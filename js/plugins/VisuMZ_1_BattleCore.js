//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.85;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.85] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x44ae36=_0x48fa;(function(_0x47f2cf,_0x4a9134){const _0x1b3acd=_0x48fa,_0x5e5aae=_0x47f2cf();while(!![]){try{const _0x15c090=parseInt(_0x1b3acd(0x28f))/0x1*(parseInt(_0x1b3acd(0x5cd))/0x2)+parseInt(_0x1b3acd(0x279))/0x3*(parseInt(_0x1b3acd(0xb5e))/0x4)+-parseInt(_0x1b3acd(0x7ed))/0x5+-parseInt(_0x1b3acd(0x925))/0x6+parseInt(_0x1b3acd(0x40a))/0x7+parseInt(_0x1b3acd(0xbb1))/0x8*(parseInt(_0x1b3acd(0x25f))/0x9)+parseInt(_0x1b3acd(0x788))/0xa*(parseInt(_0x1b3acd(0xa0d))/0xb);if(_0x15c090===_0x4a9134)break;else _0x5e5aae['push'](_0x5e5aae['shift']());}catch(_0x420561){_0x5e5aae['push'](_0x5e5aae['shift']());}}}(_0x2aab,0xebcca));var label=_0x44ae36(0x851),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x3da81f){const _0xac5b89=_0x44ae36;return _0x3da81f['status']&&_0x3da81f[_0xac5b89(0x709)][_0xac5b89(0x76b)]('['+label+']');})[0x0];VisuMZ[label][_0x44ae36(0xa08)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x44ae36(0x170)]=function(_0x74113,_0x1f6047){const _0x208246=_0x44ae36;for(const _0x4fe949 in _0x1f6047){if(_0x4fe949[_0x208246(0x54f)](/(.*):(.*)/i)){const _0x42cccb=String(RegExp['$1']),_0x493681=String(RegExp['$2'])[_0x208246(0xaf2)]()[_0x208246(0x9de)]();let _0xbeff00,_0x513370,_0x4be0d8;switch(_0x493681){case _0x208246(0x629):_0xbeff00=_0x1f6047[_0x4fe949]!==''?Number(_0x1f6047[_0x4fe949]):0x0;break;case'ARRAYNUM':_0x513370=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):[],_0xbeff00=_0x513370[_0x208246(0x6e5)](_0x36fa56=>Number(_0x36fa56));break;case'EVAL':_0xbeff00=_0x1f6047[_0x4fe949]!==''?eval(_0x1f6047[_0x4fe949]):null;break;case'ARRAYEVAL':_0x513370=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):[],_0xbeff00=_0x513370['map'](_0x22ce99=>eval(_0x22ce99));break;case _0x208246(0x6b4):_0xbeff00=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):'';break;case'ARRAYJSON':_0x513370=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):[],_0xbeff00=_0x513370[_0x208246(0x6e5)](_0x59f11c=>JSON['parse'](_0x59f11c));break;case'FUNC':_0xbeff00=_0x1f6047[_0x4fe949]!==''?new Function(JSON['parse'](_0x1f6047[_0x4fe949])):new Function('return\x200');break;case'ARRAYFUNC':_0x513370=_0x1f6047[_0x4fe949]!==''?JSON['parse'](_0x1f6047[_0x4fe949]):[],_0xbeff00=_0x513370[_0x208246(0x6e5)](_0x145f9c=>new Function(JSON[_0x208246(0x740)](_0x145f9c)));break;case _0x208246(0xd3):_0xbeff00=_0x1f6047[_0x4fe949]!==''?String(_0x1f6047[_0x4fe949]):'';break;case _0x208246(0x1e2):_0x513370=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):[],_0xbeff00=_0x513370[_0x208246(0x6e5)](_0x3bd4e2=>String(_0x3bd4e2));break;case _0x208246(0xb77):_0x4be0d8=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):{},_0x74113[_0x42cccb]={},VisuMZ[_0x208246(0x170)](_0x74113[_0x42cccb],_0x4be0d8);continue;case'ARRAYSTRUCT':_0x513370=_0x1f6047[_0x4fe949]!==''?JSON[_0x208246(0x740)](_0x1f6047[_0x4fe949]):[],_0xbeff00=_0x513370[_0x208246(0x6e5)](_0x51bfcf=>VisuMZ[_0x208246(0x170)]({},JSON[_0x208246(0x740)](_0x51bfcf)));break;default:continue;}_0x74113[_0x42cccb]=_0xbeff00;}}return _0x74113;},(_0x9439f=>{const _0xf6495a=_0x44ae36,_0x37f48d=_0x9439f[_0xf6495a(0x674)];for(const _0xb2d6b3 of dependencies){if(!Imported[_0xb2d6b3]){alert(_0xf6495a(0x1e4)[_0xf6495a(0x4be)](_0x37f48d,_0xb2d6b3)),SceneManager[_0xf6495a(0x804)]();break;}}const _0x399525=_0x9439f['description'];if(_0x399525['match'](/\[Version[ ](.*?)\]/i)){const _0x2568e9=Number(RegExp['$1']);_0x2568e9!==VisuMZ[label][_0xf6495a(0x722)]&&(alert(_0xf6495a(0x23e)[_0xf6495a(0x4be)](_0x37f48d,_0x2568e9)),SceneManager[_0xf6495a(0x804)]());}if(_0x399525['match'](/\[Tier[ ](\d+)\]/i)){const _0x698607=Number(RegExp['$1']);_0x698607<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0xf6495a(0x4be)](_0x37f48d,_0x698607,tier)),SceneManager[_0xf6495a(0x804)]()):tier=Math[_0xf6495a(0x131)](_0x698607,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0xf6495a(0xa08)],_0x9439f[_0xf6495a(0x1fa)]);})(pluginData),VisuMZ[_0x44ae36(0xb3b)]=function(_0x454e73){const _0x4afc3d=_0x44ae36;let _0x1f1eef=[];for(const _0xc8ecf5 of _0x454e73){_0x1f1eef=_0x1f1eef[_0x4afc3d(0x738)](VisuMZ[_0x4afc3d(0xabc)](_0xc8ecf5));}return _0x1f1eef[_0x4afc3d(0x1e5)](_0x2e33ab=>_0x2e33ab);},VisuMZ[_0x44ae36(0xabc)]=function(_0x4da765){const _0x501d86=_0x44ae36,_0x49c70a=BattleManager['allBattleMembers']()['filter'](_0x479daa=>_0x479daa&&_0x479daa['isAppeared']()),_0x5e7bee=BattleManager[_0x501d86(0xb62)],_0x47f313=BattleManager[_0x501d86(0x5ec)],_0x20964c=BattleManager['_allTargets']?BattleManager['_allTargets']['slice'](0x0):_0x49c70a;_0x4da765=_0x4da765[_0x501d86(0x672)]()['trim']();if(_0x4da765===_0x501d86(0x786))return[_0x5e7bee];else{if(_0x4da765===_0x501d86(0x1ee))return[_0x47f313];else{if(_0x4da765===_0x501d86(0x268)){if(_0x47f313){const _0xec33d8=_0x20964c[_0x501d86(0x83c)](_0x47f313);return _0xec33d8>=0x0?[_0x20964c[_0xec33d8-0x1]||_0x47f313]:[_0x47f313];}}else{if(_0x4da765===_0x501d86(0x68d)){if(_0x47f313){const _0x8251ee=_0x20964c[_0x501d86(0x83c)](_0x47f313);return _0x8251ee>=0x0?[_0x20964c[_0x8251ee+0x1]||_0x47f313]:[_0x47f313];}}else{if(_0x4da765===_0x501d86(0x3e7))return _0x20964c;else{if(_0x4da765==='focus')return[_0x5e7bee][_0x501d86(0x738)](_0x20964c);else{if(_0x4da765==='not\x20focus')return _0x49c70a['filter'](_0x39d0c5=>_0x39d0c5!==_0x5e7bee&&!_0x20964c['includes'](_0x39d0c5)&&_0x39d0c5['notFocusValid']());else{if(_0x4da765===_0x501d86(0x90c))return[VisuMZ[_0x501d86(0x139)]()];else{if(_0x4da765['match'](/SPECIAL (.*)>/i)){const _0x508e94=String(RegExp['$1'])['split'](',')['map'](_0x12e058=>_0x12e058[_0x501d86(0x9de)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x508e94)];}}}}}}}}}if(_0x5e7bee){if(_0x4da765===_0x501d86(0x403))return _0x5e7bee[_0x501d86(0xd9)]()[_0x501d86(0xbad)]();else{if(_0x4da765===_0x501d86(0xa80))return _0x5e7bee[_0x501d86(0xd9)]()['aliveMembers']()[_0x501d86(0x1e5)](_0x37aeab=>_0x37aeab!==_0x5e7bee);else{if(_0x4da765===_0x501d86(0x839))return _0x5e7bee[_0x501d86(0xd9)]()[_0x501d86(0xbad)]()['filter'](_0x2a1d1b=>_0x2a1d1b!==_0x47f313);else{if(_0x4da765==='dead\x20friends')return _0x5e7bee[_0x501d86(0xd9)]()[_0x501d86(0x9c1)]();else{if(_0x4da765['match'](/FRIEND INDEX (\d+)/i)){const _0x4cad83=Number(RegExp['$1']);return[_0x5e7bee[_0x501d86(0xd9)]()[_0x501d86(0xb30)]()[_0x4cad83]];}}}}}if(_0x4da765===_0x501d86(0x917))return _0x5e7bee[_0x501d86(0x867)]()[_0x501d86(0xbad)]();else{if(_0x4da765===_0x501d86(0x407))return _0x5e7bee['opponentsUnit']()[_0x501d86(0xbad)]()[_0x501d86(0x1e5)](_0x49d5c9=>_0x49d5c9!==_0x47f313);else{if(_0x4da765===_0x501d86(0xa13))return _0x5e7bee[_0x501d86(0x867)]()[_0x501d86(0x9c1)]();else{if(_0x4da765[_0x501d86(0x54f)](/OPPONENT INDEX (\d+)/i)){const _0x29a08f=Number(RegExp['$1']);return[_0x5e7bee[_0x501d86(0x867)]()['members']()[_0x29a08f]];}}}}}if(_0x4da765===_0x501d86(0x316))return $gameParty[_0x501d86(0xbad)]();else{if(_0x4da765==='alive\x20actors\x20not\x20user')return $gameParty[_0x501d86(0xbad)]()[_0x501d86(0x1e5)](_0x25c05b=>_0x25c05b!==_0x5e7bee);else{if(_0x4da765===_0x501d86(0xb5f))return $gameParty[_0x501d86(0xbad)]()[_0x501d86(0x1e5)](_0x4fbe02=>_0x4fbe02!==_0x47f313);else{if(_0x4da765==='dead\x20actors')return $gameParty[_0x501d86(0x9c1)]();else{if(_0x4da765['match'](/ACTOR INDEX (\d+)/i)){const _0x206bc7=Number(RegExp['$1']);return[$gameParty[_0x501d86(0xb30)]()[_0x206bc7]];}else{if(_0x4da765[_0x501d86(0x54f)](/ACTOR ID (\d+)/i)){const _0x3cfd11=Number(RegExp['$1']);return[$gameActors['actor'](_0x3cfd11)];}}}}}}if(_0x4da765==='alive\x20enemies')return $gameTroop[_0x501d86(0xbad)]();else{if(_0x4da765===_0x501d86(0x48e))return $gameTroop[_0x501d86(0xbad)]()[_0x501d86(0x1e5)](_0x2f9078=>_0x2f9078!==_0x5e7bee);else{if(_0x4da765===_0x501d86(0x117))return $gameTroop[_0x501d86(0xbad)]()[_0x501d86(0x1e5)](_0x274284=>_0x274284!==_0x47f313);else{if(_0x4da765===_0x501d86(0x706))return $gameTroop['deadMembers']();else{if(_0x4da765[_0x501d86(0x54f)](/ENEMY INDEX (\d+)/i)){const _0x322d84=Number(RegExp['$1']);return[$gameTroop[_0x501d86(0xb30)]()[_0x322d84]];}else{if(_0x4da765['match'](/ENEMY ID (\d+)/i)){const _0x3e23af=Number(RegExp['$1']);return $gameTroop[_0x501d86(0xbad)]()['filter'](_0x17255c=>_0x17255c[_0x501d86(0xa2f)]()===_0x3e23af);}}}}}}if(_0x4da765===_0x501d86(0x623))return _0x49c70a[_0x501d86(0x1e5)](_0x18c99d=>_0x18c99d['isAlive']());else{if(_0x4da765===_0x501d86(0x5d6))return _0x49c70a['filter'](_0x416cea=>_0x416cea[_0x501d86(0x1c1)]()&&_0x416cea!==_0x5e7bee);else{if(_0x4da765==='alive\x20battlers\x20not\x20target')return _0x49c70a[_0x501d86(0x1e5)](_0x34d4e4=>_0x34d4e4[_0x501d86(0x1c1)]()&&_0x34d4e4!==_0x47f313);else{if(_0x4da765===_0x501d86(0x858))return _0x49c70a[_0x501d86(0x1e5)](_0x3f767c=>_0x3f767c['isDead']());}}}return[];},VisuMZ[_0x44ae36(0x139)]=function(){return BattleManager['_target'];},VisuMZ[_0x44ae36(0x4ae)]=function(_0x3a94bb){return BattleManager['_target'];},PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x65a),_0x543f65=>{const _0x38a053=_0x44ae36;if(!SceneManager[_0x38a053(0xb75)]())return;VisuMZ['ConvertParams'](_0x543f65,_0x543f65);const _0x2200d6=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bc6df=BattleManager[_0x38a053(0xaca)],_0x32ef22=BattleManager[_0x38a053(0xb62)],_0x8f275d=BattleManager[_0x38a053(0x113)]?BattleManager[_0x38a053(0x113)][_0x38a053(0xb46)](0x0):[],_0x52365a=BattleManager[_0x38a053(0x551)];if(!_0x2200d6||!_0x3bc6df||!_0x32ef22)return;if(!_0x3bc6df[_0x38a053(0x4ec)]())return;if(_0x543f65['DisplayAction'])_0x52365a[_0x38a053(0xaa3)](_0x32ef22,_0x3bc6df[_0x38a053(0x4ec)]());_0x543f65['ApplyImmortal']&&_0x52365a[_0x38a053(0xa04)]('applyImmortal',_0x32ef22,_0x8f275d,!![]);if(_0x543f65[_0x38a053(0x892)])_0x52365a[_0x38a053(0xa04)](_0x38a053(0xfc),_0x32ef22,_0x3bc6df);if(_0x543f65[_0x38a053(0x444)])_0x52365a[_0x38a053(0xa04)](_0x38a053(0x8a2));if(_0x543f65['CastAnimation'])_0x52365a[_0x38a053(0xa04)](_0x38a053(0x65f),_0x32ef22,_0x3bc6df);if(_0x543f65['WaitForAnimation'])_0x52365a['push'](_0x38a053(0x879));_0x2200d6[_0x38a053(0x6d7)]('battlelog');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x964),_0x41e4e9=>{const _0x122d32=_0x44ae36;if(!SceneManager[_0x122d32(0xb75)]())return;VisuMZ[_0x122d32(0x170)](_0x41e4e9,_0x41e4e9);const _0x2045bf=$gameTemp['getLastPluginCommandInterpreter'](),_0x459ac8=BattleManager[_0x122d32(0xaca)],_0x46e207=BattleManager['_subject'],_0x378dee=BattleManager[_0x122d32(0x113)]?BattleManager[_0x122d32(0x113)][_0x122d32(0xb46)](0x0):[],_0x1a6da3=BattleManager[_0x122d32(0x551)],_0xb4f393=_0x41e4e9[_0x122d32(0x3e3)]??![];if(!_0x2045bf||!_0x459ac8||!_0x46e207)return;if(!_0x459ac8[_0x122d32(0x4ec)]())return;let _0x1b7631=_0xb4f393?_0x1a6da3[_0x122d32(0x724)](_0x46e207):0x1;for(let _0x508228=0x0;_0x508228<_0x1b7631;_0x508228++){_0xb4f393&&_0x46e207[_0x122d32(0x30c)]()&&_0x1a6da3['push'](_0x122d32(0x2b6),_0x46e207,_0x508228);if(_0x41e4e9[_0x122d32(0x1dd)])_0x1a6da3[_0x122d32(0xa04)](_0x122d32(0x23a),_0x46e207,_0x459ac8);if(_0x41e4e9['WaitCount']>0x0)_0x1a6da3['push']('waitCount',_0x41e4e9['WaitCount']);if(_0x41e4e9['ActionAnimation'])_0x1a6da3[_0x122d32(0xa04)](_0x122d32(0x8e3),_0x46e207,_0x378dee,_0x459ac8['item']()[_0x122d32(0xa94)]);if(_0x41e4e9[_0x122d32(0x8be)])_0x1a6da3[_0x122d32(0xa04)](_0x122d32(0x879));for(const _0x2e1da4 of _0x378dee){if(!_0x2e1da4)continue;if(_0x41e4e9[_0x122d32(0xacd)])_0x1a6da3[_0x122d32(0xa04)](_0x122d32(0x115),_0x46e207,_0x2e1da4);}}_0xb4f393&&_0x46e207[_0x122d32(0x30c)]()&&_0x1a6da3[_0x122d32(0xa04)](_0x122d32(0xf8),_0x46e207);if(_0x41e4e9['ApplyImmortal'])_0x1a6da3[_0x122d32(0xa04)]('applyImmortal',_0x46e207,_0x378dee,![]);_0x2045bf[_0x122d32(0x6d7)]('battlelog');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Set_TargetActionSet',_0x51b421=>{const _0x8da92b=_0x44ae36;if(!SceneManager[_0x8da92b(0xb75)]())return;VisuMZ['ConvertParams'](_0x51b421,_0x51b421);const _0x21b0af=$gameTemp[_0x8da92b(0xbc7)](),_0x45ab68=BattleManager[_0x8da92b(0xaca)],_0x3f42fc=BattleManager[_0x8da92b(0xb62)],_0x36311a=BattleManager[_0x8da92b(0x113)]?BattleManager[_0x8da92b(0x113)]['slice'](0x0):[],_0x52f79d=BattleManager['_logWindow'],_0x1b1b11=_0x51b421[_0x8da92b(0x3e3)]??![];if(!_0x21b0af||!_0x45ab68||!_0x3f42fc)return;if(!_0x45ab68[_0x8da92b(0x4ec)]())return;let _0x547d09=_0x1b1b11?_0x52f79d['getDualWieldTimes'](_0x3f42fc):0x1;for(let _0x46b9c3=0x0;_0x46b9c3<_0x547d09;_0x46b9c3++){for(const _0x12014a of _0x36311a){if(!_0x12014a)continue;_0x1b1b11&&_0x3f42fc[_0x8da92b(0x30c)]()&&_0x52f79d['push'](_0x8da92b(0x2b6),_0x3f42fc,_0x46b9c3);if(_0x51b421['PerformAction'])_0x52f79d[_0x8da92b(0xa04)](_0x8da92b(0x23a),_0x3f42fc,_0x45ab68);if(_0x51b421[_0x8da92b(0xa6c)]>0x0)_0x52f79d[_0x8da92b(0xa04)](_0x8da92b(0x707),_0x51b421[_0x8da92b(0xa6c)]);if(_0x51b421[_0x8da92b(0x9cd)])_0x52f79d[_0x8da92b(0xa04)](_0x8da92b(0x8e3),_0x3f42fc,[_0x12014a],_0x45ab68[_0x8da92b(0x4ec)]()[_0x8da92b(0xa94)]);if(_0x51b421['WaitCount2']>0x0)_0x52f79d['push'](_0x8da92b(0x707),_0x51b421[_0x8da92b(0x89a)]);if(_0x51b421[_0x8da92b(0xacd)])_0x52f79d[_0x8da92b(0xa04)](_0x8da92b(0x115),_0x3f42fc,_0x12014a);}}_0x1b1b11&&_0x3f42fc[_0x8da92b(0x30c)]()&&_0x52f79d['push'](_0x8da92b(0xf8),_0x3f42fc);if(_0x51b421['ApplyImmortal'])_0x52f79d['push']('applyImmortal',_0x3f42fc,_0x36311a,![]);_0x21b0af[_0x8da92b(0x6d7)]('battlelog');}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0xac0),_0x3984d9=>{const _0x1a36fa=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3984d9,_0x3984d9);const _0x820ac1=$gameTemp[_0x1a36fa(0xbc7)](),_0x40ffd3=BattleManager[_0x1a36fa(0xaca)],_0x3a5c89=BattleManager[_0x1a36fa(0xb62)],_0x287d53=BattleManager[_0x1a36fa(0x113)]?BattleManager['_allTargets'][_0x1a36fa(0xb46)](0x0):[],_0x754b11=BattleManager[_0x1a36fa(0x551)];if(!_0x820ac1||!_0x40ffd3||!_0x3a5c89)return;if(!_0x40ffd3[_0x1a36fa(0x4ec)]())return;if(_0x3984d9[_0x1a36fa(0x863)])_0x754b11[_0x1a36fa(0xa04)](_0x1a36fa(0xb8a),_0x3a5c89,_0x287d53,![]);if(_0x3984d9[_0x1a36fa(0x6bd)])_0x754b11[_0x1a36fa(0xa04)](_0x1a36fa(0xb41));if(_0x3984d9[_0x1a36fa(0xad5)])_0x754b11[_0x1a36fa(0xa04)](_0x1a36fa(0x47a));if(_0x3984d9['ClearBattleLog'])_0x754b11[_0x1a36fa(0xa04)](_0x1a36fa(0x87b));if(_0x3984d9[_0x1a36fa(0x4f5)])_0x754b11[_0x1a36fa(0xa04)](_0x1a36fa(0xa7f),_0x3a5c89);if(_0x3984d9[_0x1a36fa(0x444)])_0x754b11[_0x1a36fa(0xa04)](_0x1a36fa(0x8a2));_0x820ac1[_0x1a36fa(0x6d7)](_0x1a36fa(0x41c));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x996),_0x3b51f0=>{const _0x36564=_0x44ae36;if(!SceneManager[_0x36564(0xb75)]())return;if(!Imported[_0x36564(0x85a)])return;VisuMZ[_0x36564(0x170)](_0x3b51f0,_0x3b51f0);const _0x3aab60=$gameTemp[_0x36564(0xbc7)](),_0x531ce7=_0x3b51f0['WaitForAngle'];if(!_0x3aab60)return;$gameScreen[_0x36564(0x735)](_0x3b51f0['Angle'],_0x3b51f0[_0x36564(0x76c)],_0x3b51f0[_0x36564(0x67d)]);if(_0x531ce7)_0x3aab60[_0x36564(0x6d7)](_0x36564(0x27c));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Angle_Reset',_0x3677f1=>{const _0x3c2269=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3c2269(0x85a)])return;VisuMZ[_0x3c2269(0x170)](_0x3677f1,_0x3677f1);const _0x571439=$gameTemp['getLastPluginCommandInterpreter'](),_0x511506=_0x3677f1[_0x3c2269(0x142)];if(!_0x571439)return;$gameScreen[_0x3c2269(0x735)](0x0,_0x3677f1['Duration'],_0x3677f1['EasingType']);if(_0x511506)_0x571439[_0x3c2269(0x6d7)]('battleAngle');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Angle_WaitForAngle',_0x4aac13=>{const _0xc1902d=_0x44ae36;if(!SceneManager[_0xc1902d(0xb75)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x13a7d3=$gameTemp[_0xc1902d(0xbc7)]();if(!_0x13a7d3)return;_0x13a7d3[_0xc1902d(0x6d7)](_0xc1902d(0x27c));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x6c6),_0x3c72ee=>{const _0x51b3b4=_0x44ae36;if(!SceneManager[_0x51b3b4(0xb75)]())return;VisuMZ['ConvertParams'](_0x3c72ee,_0x3c72ee);const _0x303c1b=$gameTemp[_0x51b3b4(0xbc7)](),_0x12e648=BattleManager[_0x51b3b4(0xaca)],_0x1b9349=BattleManager[_0x51b3b4(0xb62)],_0x2ce0c1=VisuMZ['CreateActionSequenceTargets'](_0x3c72ee[_0x51b3b4(0x158)]),_0x351415=_0x3c72ee[_0x51b3b4(0x7c6)],_0x5626a8=BattleManager[_0x51b3b4(0x551)];if(!_0x303c1b||!_0x12e648||!_0x1b9349)return;if(!_0x12e648[_0x51b3b4(0x4ec)]())return;let _0x362ee9=_0x12e648['item']()[_0x51b3b4(0xa94)];if(_0x362ee9<0x0)_0x362ee9=_0x1b9349[_0x51b3b4(0x79b)]();$gameTemp[_0x51b3b4(0x140)](_0x2ce0c1,_0x362ee9,_0x351415),_0x3c72ee[_0x51b3b4(0x8be)]&&_0x303c1b[_0x51b3b4(0x6d7)](_0x51b3b4(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xa03),_0x291888=>{const _0x5e310a=_0x44ae36;if(!SceneManager[_0x5e310a(0xb75)]())return;VisuMZ['ConvertParams'](_0x291888,_0x291888);const _0x17a6db=$gameTemp['getLastPluginCommandInterpreter'](),_0x37180b=BattleManager['_subject'],_0x4a35de=VisuMZ[_0x5e310a(0xb3b)](_0x291888[_0x5e310a(0x158)]),_0x26be32=_0x291888['Mirror'],_0x17c1eb=BattleManager[_0x5e310a(0x551)];if(!_0x17a6db||!_0x37180b)return;const _0x4dd175=_0x37180b[_0x5e310a(0x79b)]();$gameTemp[_0x5e310a(0x140)](_0x4a35de,_0x4dd175,_0x26be32),_0x291888[_0x5e310a(0x8be)]&&_0x17a6db[_0x5e310a(0x6d7)]('battleAnimation');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x9b1),_0x182842=>{const _0x2ecccd=_0x44ae36;if(!SceneManager[_0x2ecccd(0xb75)]())return;VisuMZ[_0x2ecccd(0x170)](_0x182842,_0x182842);const _0x23d2ca=_0x11c9e8[_0x2ecccd(0x4a1)](_0x182842[_0x2ecccd(0x995)]);if(_0x23d2ca<=0x0)return;const _0x450eaa=$gameTemp[_0x2ecccd(0xbc7)](),_0x11c9e8=BattleManager['_subject'],_0x1c9cc9=VisuMZ[_0x2ecccd(0xb3b)](_0x182842[_0x2ecccd(0x158)]),_0x2910a2=_0x182842[_0x2ecccd(0x7c6)],_0x232a9a=BattleManager[_0x2ecccd(0x551)];if(!_0x450eaa||!_0x11c9e8)return;$gameTemp[_0x2ecccd(0x140)](_0x1c9cc9,_0x23d2ca,_0x2910a2),_0x182842[_0x2ecccd(0x8be)]&&_0x450eaa[_0x2ecccd(0x6d7)](_0x2ecccd(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Animation_BalloonAnimation',_0x168b21=>{const _0x1a1f67=_0x44ae36;if(!SceneManager[_0x1a1f67(0xb75)]())return;VisuMZ['ConvertParams'](_0x168b21,_0x168b21);const _0x4f260d=$gameTemp[_0x1a1f67(0xbc7)](),_0x482adb=VisuMZ[_0x1a1f67(0xb3b)](_0x168b21[_0x1a1f67(0x158)]),_0x10e9f4=_0x168b21['Balloon'];let _0x222655=0x0;switch(_0x10e9f4[_0x1a1f67(0xaf2)]()[_0x1a1f67(0x9de)]()){case'!':case'EXCLAMATION':_0x222655=0x1;break;case'?':case'QUESTION':_0x222655=0x2;break;case'MUSIC':case _0x1a1f67(0xa71):case _0x1a1f67(0x539):case _0x1a1f67(0x6d2):case _0x1a1f67(0xb38):_0x222655=0x3;break;case _0x1a1f67(0x476):case'LOVE':_0x222655=0x4;break;case _0x1a1f67(0x10e):case _0x1a1f67(0x270):_0x222655=0x5;break;case _0x1a1f67(0x861):_0x222655=0x6;break;case _0x1a1f67(0x93e):case'ANNOYED':case _0x1a1f67(0x2d7):_0x222655=0x7;break;case _0x1a1f67(0x7a4):case'...':_0x222655=0x8;break;case _0x1a1f67(0x7fd):case _0x1a1f67(0x71c):case _0x1a1f67(0x7e2):case _0x1a1f67(0x30f):case _0x1a1f67(0x284):_0x222655=0x9;break;case'Z':case'ZZ':case _0x1a1f67(0x7bd):case _0x1a1f67(0xb50):_0x222655=0xa;break;case _0x1a1f67(0x562):_0x222655=0xb;break;case'USER-DEFINED\x202':_0x222655=0xc;break;case'USER-DEFINED\x203':_0x222655=0xd;break;case _0x1a1f67(0x457):_0x222655=0xe;break;case _0x1a1f67(0x6aa):_0x222655=0xf;break;}for(const _0x272e85 of _0x482adb){if(!_0x272e85)continue;$gameTemp[_0x1a1f67(0x5ac)](_0x272e85,_0x222655);}_0x168b21['WaitComplete']&&_0x4f260d&&(_0x4f260d['wait'](0x1),_0x4f260d[_0x1a1f67(0x6d7)](_0x1a1f67(0x494)));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x74d),_0x29dd4a=>{const _0x52d4de=_0x44ae36;if(!SceneManager[_0x52d4de(0xb75)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x52d4de(0x170)](_0x29dd4a,_0x29dd4a);const _0x16c632=$gameTemp['getLastPluginCommandInterpreter'](),_0x3d05c2=VisuMZ[_0x52d4de(0xb3b)](_0x29dd4a[_0x52d4de(0x158)]),_0x43f3a2=_0x29dd4a['IconIndex'];for(const _0x2b8847 of _0x3d05c2){if(!_0x2b8847)continue;$gameTemp[_0x52d4de(0x5ac)](_0x2b8847,[_0x43f3a2]);}_0x29dd4a[_0x52d4de(0x6a5)]&&_0x16c632&&(_0x16c632[_0x52d4de(0x26f)](0x1),_0x16c632[_0x52d4de(0x6d7)]('battleBalloon'));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Animation_BalloonIconRange',_0x1caaeb=>{const _0x10fa65=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x10fa65(0x6d6)])return;VisuMZ[_0x10fa65(0x170)](_0x1caaeb,_0x1caaeb);const _0x44a7fa=$gameTemp[_0x10fa65(0xbc7)](),_0x54eae0=VisuMZ['CreateActionSequenceTargets'](_0x1caaeb[_0x10fa65(0x158)]),_0x2a9aa8=Math[_0x10fa65(0x920)](Number(_0x1caaeb['startIcon']||0x0),Number(_0x1caaeb[_0x10fa65(0x8a4)]||0x0)),_0x5bffb8=Math[_0x10fa65(0x131)](Number(_0x1caaeb[_0x10fa65(0x773)]||0x0),Number(_0x1caaeb[_0x10fa65(0x8a4)]||0x0)),_0xe2b6ce=[];for(let _0x27702f=_0x2a9aa8;_0x27702f<=_0x5bffb8;_0x27702f++){_0xe2b6ce['push'](_0x27702f);}for(const _0xbb497 of _0x54eae0){if(!_0xbb497)continue;$gameTemp[_0x10fa65(0x5ac)](_0xbb497,_0xe2b6ce);}_0x1caaeb[_0x10fa65(0x6a5)]&&_0x44a7fa&&(_0x44a7fa['wait'](0x1),_0x44a7fa[_0x10fa65(0x6d7)](_0x10fa65(0x494)));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x438),_0x15232a=>{const _0x55dc66=_0x44ae36;if(!SceneManager[_0x55dc66(0xb75)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ['ConvertParams'](_0x15232a,_0x15232a);const _0x2f5bf2=$gameTemp[_0x55dc66(0xbc7)](),_0x596448=VisuMZ[_0x55dc66(0xb3b)](_0x15232a[_0x55dc66(0x158)]),_0x4c9ce8=_0x15232a[_0x55dc66(0x8e8)];for(const _0x2b3346 of _0x596448){if(!_0x2b3346)continue;$gameTemp[_0x55dc66(0x5ac)](_0x2b3346,_0x4c9ce8);}_0x15232a['WaitComplete']&&_0x2f5bf2&&(_0x2f5bf2[_0x55dc66(0x26f)](0x1),_0x2f5bf2[_0x55dc66(0x6d7)]('battleBalloon'));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Animation_CastAnimation',_0x394df0=>{const _0x3fae06=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x394df0,_0x394df0);const _0x414d93=$gameTemp[_0x3fae06(0xbc7)](),_0x4dd168=BattleManager[_0x3fae06(0xaca)],_0x58962c=_0x394df0['Mirror'],_0x14ed89=VisuMZ[_0x3fae06(0xb3b)](_0x394df0[_0x3fae06(0x158)]);if(!_0x414d93||!_0x4dd168)return;if(!_0x4dd168[_0x3fae06(0x4ec)]())return;for(const _0x30d653 of _0x14ed89){if(!_0x30d653)continue;_0x30d653[_0x3fae06(0x65f)](_0x4dd168,_0x58962c);}if(_0x394df0[_0x3fae06(0x8be)])_0x414d93[_0x3fae06(0x6d7)](_0x3fae06(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xb51),_0x57f313=>{const _0x27f5c4=_0x44ae36;VisuMZ[_0x27f5c4(0x170)](_0x57f313,_0x57f313);const _0x32266c=$gameTemp[_0x27f5c4(0xbc7)](),_0x3be9aa=VisuMZ['CreateActionSequenceTargets'](_0x57f313['Targets']),_0x1305d7=_0x57f313[_0x27f5c4(0x237)];if(!_0x1305d7)return;for(const _0x2f4032 of _0x3be9aa){if(!_0x2f4032)continue;if(!_0x2f4032[_0x27f5c4(0x30c)]())continue;_0x2f4032[_0x27f5c4(0x250)](_0x1305d7);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x1c86af=>{const _0x52d71e=_0x44ae36;VisuMZ[_0x52d71e(0x170)](_0x1c86af,_0x1c86af);const _0xd92085=_0x1c86af[_0x52d71e(0xbdb)](),_0x5c17b2=$gameActors[_0x52d71e(0x2f8)](_0xd92085)||null;if(!_0x5c17b2){console['log'](_0x52d71e(0x800));return;}const _0x444383=_0x1c86af[_0x52d71e(0x9a6)]();_0x5c17b2['setBattlePortrait'](_0x444383);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x8a6),_0x40efaa=>{const _0x26d99c=_0x44ae36;if(!SceneManager[_0x26d99c(0xb75)]())return;VisuMZ[_0x26d99c(0x170)](_0x40efaa,_0x40efaa);const _0x8173d6=$gameTemp[_0x26d99c(0xbc7)](),_0x46342b=BattleManager[_0x26d99c(0xb62)],_0x5a49a7=VisuMZ[_0x26d99c(0xb3b)](_0x40efaa[_0x26d99c(0x158)]),_0x14ac8e=_0x40efaa[_0x26d99c(0x7c6)];if(!_0x8173d6||!_0x46342b)return;const _0x4326a3=$dataSkilles[_0x46342b[_0x26d99c(0x1ce)]()],_0x8a91a7=_0x4326a3[_0x26d99c(0xa94)];$gameTemp[_0x26d99c(0x140)](_0x5a49a7,_0x8a91a7,_0x14ac8e),_0x40efaa[_0x26d99c(0x8be)]&&_0x8173d6[_0x26d99c(0x6d7)](_0x26d99c(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x37c),_0x78f511=>{const _0x4479a8=_0x44ae36;if(!SceneManager[_0x4479a8(0xb75)]())return;VisuMZ['ConvertParams'](_0x78f511,_0x78f511);const _0x1cd271=$gameTemp[_0x4479a8(0xbc7)](),_0x22286d=VisuMZ[_0x4479a8(0xb3b)](_0x78f511[_0x4479a8(0x158)]),_0x1649f5=Number(_0x78f511[_0x4479a8(0x73c)]||0x1),_0x44a826=$dataItems[_0x1649f5],_0x4c375f=_0x78f511['Mirror'];if(!_0x1cd271)return;if(!_0x44a826)return;let _0x5ef633=_0x44a826[_0x4479a8(0xa94)];$gameTemp[_0x4479a8(0x140)](_0x22286d,_0x5ef633,_0x4c375f),_0x78f511[_0x4479a8(0x8be)]&&_0x1cd271[_0x4479a8(0x6d7)](_0x4479a8(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xad4),_0x42043b=>{const _0x1def48=_0x44ae36;if(!SceneManager[_0x1def48(0x97d)])return;if(!SceneManager[_0x1def48(0x97d)][_0x1def48(0x4b4)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x1def48(0x170)](_0x42043b,_0x42043b);const _0x5df992=$gameTemp[_0x1def48(0xbc7)](),_0x234f78=Math['round'](_0x42043b[_0x1def48(0x9f9)]),_0x60168f=Math[_0x1def48(0x875)](_0x42043b['pointY']);$gameTemp['requestPointAnimation'](_0x234f78,_0x60168f,_0x42043b['AnimationID'],_0x42043b['Mirror'],_0x42043b['Mute']),_0x42043b[_0x1def48(0x6a5)]&&_0x5df992&&(SceneManager['_scene']['_spriteset']['updatePointAnimations'](),_0x5df992[_0x1def48(0x6d7)](_0x1def48(0x31b)));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x809),_0x25095f=>{const _0x117ce4=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x117ce4(0x170)](_0x25095f,_0x25095f);const _0x299c3b=$gameTemp[_0x117ce4(0xbc7)](),_0x46490e=VisuMZ[_0x117ce4(0xb3b)](_0x25095f[_0x117ce4(0x158)]),_0x2d3950=_0x25095f[_0x117ce4(0x6b3)],_0x283cb7=_0x25095f['Mirror'];if(!_0x299c3b)return;$gameTemp['requestAnimation'](_0x46490e,_0x2d3950,_0x283cb7);if(_0x25095f['WaitForAnimation'])_0x299c3b[_0x117ce4(0x6d7)](_0x117ce4(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Animation_ShowAnimationJS',_0x1f09e6=>{const _0xa371c5=_0x44ae36;if(!SceneManager[_0xa371c5(0xb75)]())return;VisuMZ['ConvertParams'](_0x1f09e6,_0x1f09e6);const _0x4da649=$gameTemp[_0xa371c5(0xbc7)](),_0x55bef4=VisuMZ[_0xa371c5(0xb3b)](_0x1f09e6[_0xa371c5(0x158)]),_0x121814=Number(_0x1f09e6[_0xa371c5(0x6b3)])||0x1,_0x3264c8=_0x1f09e6['Mirror'];if(!_0x4da649)return;$gameTemp[_0xa371c5(0x140)](_0x55bef4,_0x121814,_0x3264c8);if(_0x1f09e6['WaitForAnimation'])_0x4da649['setWaitMode'](_0xa371c5(0x31b));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x130),_0x5cd110=>{const _0x5236de=_0x44ae36;if(!SceneManager[_0x5236de(0xb75)]())return;VisuMZ[_0x5236de(0x170)](_0x5cd110,_0x5cd110);const _0x219676=$gameTemp[_0x5236de(0xbc7)](),_0x4a72f4=VisuMZ[_0x5236de(0xb3b)](_0x5cd110['Targets']),_0x17f9b6=Number(_0x5cd110['SkillID']||0x1),_0x2c12a9=$dataSkills[_0x17f9b6],_0x183eff=_0x5cd110['Mirror'];if(!_0x219676)return;if(!_0x2c12a9)return;let _0x4f0f97=_0x2c12a9[_0x5236de(0xa94)];$gameTemp[_0x5236de(0x140)](_0x4a72f4,_0x4f0f97,_0x183eff),_0x5cd110['WaitForAnimation']&&_0x219676[_0x5236de(0x6d7)]('battleAnimation');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x112),_0x3782db=>{const _0x98dce4=_0x44ae36;if(!SceneManager[_0x98dce4(0xb75)]())return;const _0x50adb4=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x50adb4)return;_0x50adb4[_0x98dce4(0x6d7)](_0x98dce4(0x31b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_BattleLog_AddText',_0x1e729d=>{const _0x27a01c=_0x44ae36;if(!SceneManager[_0x27a01c(0xb75)]())return;VisuMZ[_0x27a01c(0x170)](_0x1e729d,_0x1e729d);const _0x3ab7bd=BattleManager['_logWindow'],_0x210dea=_0x1e729d[_0x27a01c(0x495)]&&Imported[_0x27a01c(0x4ad)];_0x3ab7bd[_0x27a01c(0x91d)](_0x1e729d[_0x27a01c(0xb54)]),_0x210dea&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x27a01c(0x68c)](_0x1e729d[_0x27a01c(0xb54)]||'',_0x1e729d[_0x27a01c(0x288)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xb59),_0x5eff20=>{const _0x5e7ba1=_0x44ae36;if(!SceneManager[_0x5e7ba1(0xb75)]())return;const _0x305cf6=BattleManager[_0x5e7ba1(0x551)];_0x305cf6[_0x5e7ba1(0x87b)]();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x847),_0x1ef1a6=>{const _0x3b5e0b=_0x44ae36;if(!SceneManager[_0x3b5e0b(0xb75)]())return;const _0x5a7540=$gameTemp[_0x3b5e0b(0xbc7)](),_0x555e3a=BattleManager[_0x3b5e0b(0xaca)],_0xc34d51=BattleManager[_0x3b5e0b(0xb62)],_0x4d6279=BattleManager[_0x3b5e0b(0x551)];if(!_0x5a7540||!_0x555e3a||!_0xc34d51)return;if(!_0x555e3a['item']())return;_0x4d6279[_0x3b5e0b(0xaa3)](_0xc34d51,_0x555e3a['item']()),_0x5a7540['setWaitMode'](_0x3b5e0b(0x41c));}),PluginManager['registerCommand'](pluginData['name'],_0x44ae36(0x99f),_0x19b4ee=>{const _0x2f6c22=_0x44ae36;if(!SceneManager[_0x2f6c22(0xb75)]())return;const _0x561e4d=BattleManager['_logWindow'];_0x561e4d[_0x2f6c22(0x4c7)]();}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x6fd),_0x3b3c49=>{const _0x2ae56d=_0x44ae36;if(!SceneManager[_0x2ae56d(0xb75)]())return;const _0x1199f8=BattleManager[_0x2ae56d(0x551)];_0x1199f8[_0x2ae56d(0x6ad)]();}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x239),_0x35ff9c=>{const _0x4f5706=_0x44ae36;if(!SceneManager['isSceneBattle']())return;const _0x450aa7=BattleManager[_0x4f5706(0x551)];_0x450aa7[_0x4f5706(0x749)]();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x325),_0x52fbc1=>{const _0xffb2e6=_0x44ae36;if(!SceneManager[_0xffb2e6(0xb75)]())return;VisuMZ['ConvertParams'](_0x52fbc1,_0x52fbc1),SceneManager['_scene'][_0xffb2e6(0x34e)](_0x52fbc1['ShowHide']);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x4cf),_0x2ae6b6=>{const _0x4bfad7=_0x44ae36;if(!SceneManager[_0x4bfad7(0xb75)]())return;const _0x418261=$gameTemp[_0x4bfad7(0xbc7)]();_0x418261[_0x4bfad7(0x6d7)](_0x4bfad7(0x41c));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_BattleLog_WaitForNewLine',_0x1914a2=>{const _0x97804b=_0x44ae36;if(!SceneManager[_0x97804b(0xb75)]())return;const _0x1ec48b=$gameTemp[_0x97804b(0xbc7)](),_0x661c2c=BattleManager[_0x97804b(0x551)];_0x661c2c[_0x97804b(0xb41)](),_0x1ec48b[_0x97804b(0x6d7)]('battlelog');}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0xa09),_0x483f66=>{const _0x14a7c3=_0x44ae36;if(!SceneManager[_0x14a7c3(0xb75)]())return;if(!Imported[_0x14a7c3(0x85a)])return;VisuMZ[_0x14a7c3(0x170)](_0x483f66,_0x483f66);const _0x261585=$gameScreen['battleCameraData']();_0x261585['cameraClamp']=_0x483f66['Setting'];}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x7ac),_0x2aa77e=>{const _0x24d2d4=_0x44ae36;if(!SceneManager[_0x24d2d4(0xb75)]())return;if(!Imported[_0x24d2d4(0x85a)])return;VisuMZ[_0x24d2d4(0x170)](_0x2aa77e,_0x2aa77e);const _0x49deb5=$gameTemp['getLastPluginCommandInterpreter'](),_0x2ac312=_0x2aa77e['WaitForCamera'];$gameScreen[_0x24d2d4(0x3ee)](_0x2aa77e[_0x24d2d4(0xa93)],_0x2aa77e[_0x24d2d4(0xab3)],_0x2aa77e[_0x24d2d4(0x76c)],_0x2aa77e[_0x24d2d4(0x67d)]);if(_0x2ac312)_0x49deb5[_0x24d2d4(0x6d7)](_0x24d2d4(0xb01));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_FocusTarget',_0x32125c=>{const _0x452c3d=_0x44ae36;if(!SceneManager[_0x452c3d(0xb75)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x452c3d(0x170)](_0x32125c,_0x32125c);const _0x4554e1=$gameTemp['getLastPluginCommandInterpreter'](),_0x1c8dae=VisuMZ[_0x452c3d(0xb3b)](_0x32125c['Targets']),_0xd353bb=_0x32125c['WaitForCamera'];$gameScreen[_0x452c3d(0x751)](_0x1c8dae,_0x32125c['Duration'],_0x32125c[_0x452c3d(0x67d)]);if(_0xd353bb)_0x4554e1['setWaitMode'](_0x452c3d(0xb01));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Camera_Offset',_0x4b658b=>{const _0x193bbb=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x193bbb(0x170)](_0x4b658b,_0x4b658b);const _0x4afb3f=$gameTemp[_0x193bbb(0xbc7)](),_0x575a4c=_0x4b658b[_0x193bbb(0xa8b)];$gameScreen[_0x193bbb(0x259)](_0x4b658b['OffsetX'],_0x4b658b['OffsetY'],_0x4b658b[_0x193bbb(0x76c)],_0x4b658b[_0x193bbb(0x67d)]);if(_0x575a4c)_0x4afb3f[_0x193bbb(0x6d7)](_0x193bbb(0xb01));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x701),_0x4e5d8e=>{const _0x4e65a6=_0x44ae36;if(!SceneManager[_0x4e65a6(0xb75)]())return;if(!Imported[_0x4e65a6(0x85a)])return;VisuMZ[_0x4e65a6(0x170)](_0x4e5d8e,_0x4e5d8e);const _0x32efef=$gameTemp[_0x4e65a6(0xbc7)](),_0x3be7df=_0x4e5d8e[_0x4e65a6(0x711)],_0x5f284a=_0x4e5d8e[_0x4e65a6(0x721)],_0x20795e=_0x4e5d8e[_0x4e65a6(0xa8b)];if(_0x3be7df){const _0x212e5a=Math[_0x4e65a6(0x875)](Graphics['width']/0x2),_0x3f4bff=Math[_0x4e65a6(0x875)](Graphics[_0x4e65a6(0x745)]/0x2);$gameScreen[_0x4e65a6(0x3ee)](_0x212e5a,_0x3f4bff,_0x4e5d8e[_0x4e65a6(0x76c)],_0x4e5d8e[_0x4e65a6(0x67d)]);}_0x5f284a&&$gameScreen[_0x4e65a6(0x259)](0x0,0x0,_0x4e5d8e[_0x4e65a6(0x76c)],_0x4e5d8e[_0x4e65a6(0x67d)]);if(_0x20795e)_0x32efef[_0x4e65a6(0x6d7)]('battleCamera');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x669),_0x105338=>{const _0x3c605f=_0x44ae36;if(!SceneManager[_0x3c605f(0xb75)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x1b943b=$gameTemp[_0x3c605f(0xbc7)]();if(!_0x1b943b)return;_0x1b943b[_0x3c605f(0x6d7)](_0x3c605f(0xb01));}),VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6ac)]=function(_0x5e5300){const _0x51b314=_0x44ae36;_0x5e5300[_0x51b314(0x6de)]='';const _0xdfbbc6=VisuMZ[_0x51b314(0xa4a)][_0x51b314(0x6ac)](_0x5e5300),_0x45de4e=VisuMZ[_0x51b314(0xb3b)](_0x5e5300[_0x51b314(0x158)])[0x0]||null;return _0x45de4e&&(_0xdfbbc6['portraitFilename']=_0x45de4e['visualCutinPortraitFilename'](),_0xdfbbc6[_0x51b314(0x64c)]=_0x45de4e[_0x51b314(0x86c)](),_0xdfbbc6[_0x51b314(0xb9e)]=_0x45de4e[_0x51b314(0x74a)](),_0xdfbbc6[_0x51b314(0x3aa)]=_0x45de4e[_0x51b314(0x1bf)](),_0x45de4e['isEnemy']()&&(_0x45de4e['flipVisualCutinHorz']()&&(_0xdfbbc6['portraitFlipHorz']=!_0xdfbbc6[_0x51b314(0x5f5)]),_0x45de4e[_0x51b314(0x441)]()&&(_0xdfbbc6[_0x51b314(0x622)]=!_0xdfbbc6['portraitFlipVert']),_0xdfbbc6['portraitType']===_0x51b314(0x2ea)&&(_0xdfbbc6[_0x51b314(0x5f5)]=!_0xdfbbc6[_0x51b314(0x5f5)]),_0x5e5300['ExtraSettings'][_0x51b314(0x6b2)]&&(_0xdfbbc6['parallaxScrollX']*=-0x1),_0x5e5300[_0x51b314(0x9b6)][_0x51b314(0x696)]&&(_0xdfbbc6[_0x51b314(0x605)]*=-0x1),_0xdfbbc6['parallaxHue']+=_0x5e5300[_0x51b314(0x9b6)]['parallaxHueEnemyModifier']??0x0)),_0xdfbbc6;},PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x959),_0x282fe7=>{const _0x186c38=_0x44ae36;if(!SceneManager[_0x186c38(0xb75)]())return;if(!Imported[_0x186c38(0xe2)])return;VisuMZ[_0x186c38(0x170)](_0x282fe7,_0x282fe7);const _0x2ae0a7=VisuMZ['BattleCore']['CreateCutinSettings'](_0x282fe7);SceneManager[_0x186c38(0x97d)]['startVisualCutin'](_0x2ae0a7);const _0x8183f3=$gameTemp[_0x186c38(0xbc7)]();_0x8183f3&&_0x282fe7[_0x186c38(0xbb0)]&&_0x8183f3[_0x186c38(0x6d7)]('cutinEnter');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xca),_0x55c229=>{const _0x43f505=_0x44ae36;if(!SceneManager[_0x43f505(0xb75)]())return;if(!Imported[_0x43f505(0xe2)])return;VisuMZ[_0x43f505(0x170)](_0x55c229,_0x55c229),SceneManager[_0x43f505(0x97d)]['clearAllVisualCutins']();const _0x605f5d=$gameTemp[_0x43f505(0xbc7)]();_0x605f5d&&_0x55c229['WaitForExit']&&_0x605f5d[_0x43f505(0x6d7)](_0x43f505(0x4a7));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x8f3),_0x24902a=>{const _0x4dbe40=_0x44ae36;if(!SceneManager[_0x4dbe40(0xb75)]())return;if(!Imported[_0x4dbe40(0xe2)])return;VisuMZ[_0x4dbe40(0x170)](_0x24902a,_0x24902a);const _0x316118=_0x24902a[_0x4dbe40(0x4d5)][_0x4dbe40(0x672)]()[_0x4dbe40(0x9de)]();SceneManager[_0x4dbe40(0x97d)][_0x4dbe40(0x9cf)](_0x316118);const _0x50bc37=$gameTemp[_0x4dbe40(0xbc7)]();_0x50bc37&&_0x24902a['WaitForExit']&&_0x50bc37['setWaitMode'](_0x4dbe40(0x4a7));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x311),_0x24169a=>{const _0x190cfb=_0x44ae36;if(!SceneManager[_0x190cfb(0xb75)]())return;if(!Imported[_0x190cfb(0xe2)])return;const _0x479637=$gameTemp[_0x190cfb(0xbc7)]();_0x479637[_0x190cfb(0x6d7)](_0x190cfb(0x922));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x14d),_0x4fc232=>{const _0x51747a=_0x44ae36;if(!SceneManager[_0x51747a(0xb75)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x317107=$gameTemp[_0x51747a(0xbc7)]();_0x317107[_0x51747a(0x6d7)](_0x51747a(0x4a7));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x261),_0x61c749=>{const _0x23bee1=_0x44ae36;if(!SceneManager[_0x23bee1(0xb75)]())return;if(!Imported[_0x23bee1(0x19d)])return;VisuMZ[_0x23bee1(0x170)](_0x61c749,_0x61c749);const _0x5c248d=VisuMZ[_0x23bee1(0xb3b)](_0x61c749['Targets']),_0xaf73a3=_0x61c749[_0x23bee1(0x6c9)][_0x23bee1(0x672)]()[_0x23bee1(0x9de)]();for(const _0x1ebba6 of _0x5c248d){if(!_0x1ebba6)continue;_0x1ebba6[_0x23bee1(0x8ed)](_0xaf73a3);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x8a1),_0x591473=>{const _0x55a163=_0x44ae36;if(!SceneManager[_0x55a163(0xb75)]())return;if(!Imported[_0x55a163(0x19d)])return;VisuMZ[_0x55a163(0x170)](_0x591473,_0x591473);const _0x32ab45=VisuMZ['CreateActionSequenceTargets'](_0x591473[_0x55a163(0x158)]),_0x56d129=_0x591473['TimeScale'];for(const _0x234a92 of _0x32ab45){if(!_0x234a92)continue;_0x234a92['dragonbonesData']()[_0x55a163(0x848)]=_0x56d129;}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Element_AddElements',_0x8b2a51=>{const _0x5b52b6=_0x44ae36;if(!SceneManager[_0x5b52b6(0xb75)]())return;if(!Imported[_0x5b52b6(0x6d9)])return;VisuMZ[_0x5b52b6(0x170)](_0x8b2a51,_0x8b2a51);const _0x2a50de=BattleManager[_0x5b52b6(0xaca)],_0x27dccc=_0x8b2a51[_0x5b52b6(0x393)];if(!_0x2a50de)return;_0x2a50de['_battleCoreAddedElements']=_0x27dccc;}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x232),_0x49b6b8=>{const _0x433fe2=_0x44ae36;if(!SceneManager[_0x433fe2(0xb75)]())return;if(!Imported[_0x433fe2(0x6d9)])return;const _0x1b8949=BattleManager[_0x433fe2(0xaca)];if(!_0x1b8949)return;_0x1b8949['clearElementChanges']();}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xbd2),_0x367599=>{const _0x1d8c30=_0x44ae36;if(!SceneManager[_0x1d8c30(0xb75)]())return;if(!Imported[_0x1d8c30(0x6d9)])return;VisuMZ[_0x1d8c30(0x170)](_0x367599,_0x367599);const _0xb61a04=BattleManager[_0x1d8c30(0xaca)],_0x3e6410=_0x367599[_0x1d8c30(0x393)];if(!_0xb61a04)return;_0xb61a04[_0x1d8c30(0xe7)]=_0x3e6410;}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x133),_0x49336a=>{const _0x5d44fe=_0x44ae36;if(!SceneManager[_0x5d44fe(0xb75)]())return;if(!Imported[_0x5d44fe(0x6d9)])return;const _0x4c7acf=BattleManager[_0x5d44fe(0xaca)];if(!_0x4c7acf)return;_0x4c7acf['_battleCoreNoElement']=!![];}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x9ea),_0x25e17c=>{const _0x1699ca=_0x44ae36;VisuMZ[_0x1699ca(0x395)][_0x1699ca(0x9ea)](_0x25e17c);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x795),_0x8c5fdf=>{const _0x367b88=_0x44ae36;VisuMZ[_0x367b88(0x395)][_0x367b88(0x795)](_0x8c5fdf);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Grid_AddTriggerToNode',_0x3fa48f=>{const _0x4938d1=_0x44ae36;VisuMZ['BattleGridSystem'][_0x4938d1(0x2b9)](_0x3fa48f);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Grid_AddTriggerToNodeJS',_0x4eee57=>{const _0x1fefa1=_0x44ae36;VisuMZ[_0x1fefa1(0x395)][_0x1fefa1(0x2b9)](_0x4eee57);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x553),_0x3b2e16=>{const _0x33639e=_0x44ae36;VisuMZ[_0x33639e(0x395)][_0x33639e(0x553)](_0x3b2e16);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x29d),_0xd6212e=>{const _0x5a0add=_0x44ae36;VisuMZ[_0x5a0add(0x395)][_0x5a0add(0x29d)](_0xd6212e);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xb9d),_0x2545f1=>{const _0xcc6921=_0x44ae36;VisuMZ[_0xcc6921(0x395)]['ActSeq_Grid_AnimationTypeAtNode'](_0x2545f1);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x1d0),_0x54a783=>{const _0x4a65ff=_0x44ae36;VisuMZ[_0x4a65ff(0x395)]['ActSeq_Grid_ClearPassiveStatesFromNode'](_0x54a783);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Grid_MoveTargetsInDirection',_0x3dc6dd=>{const _0x475c82=_0x44ae36;VisuMZ[_0x475c82(0x395)][_0x475c82(0x177)](_0x3dc6dd);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x4f2),_0x1cb3e4=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_PullToTargetNode'](_0x1cb3e4);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Grid_PushFromTargetNode',_0x5bde71=>{const _0x383655=_0x44ae36;VisuMZ[_0x383655(0x395)][_0x383655(0x1df)](_0x5bde71);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x344),_0x874298=>{const _0x54183a=_0x44ae36;VisuMZ[_0x54183a(0x395)][_0x54183a(0x344)](_0x874298);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x96a),_0x17938f=>{const _0x50fa7d=_0x44ae36;VisuMZ[_0x50fa7d(0x395)][_0x50fa7d(0x96a)](_0x17938f);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Grid_TeleportToNode',_0x1bd6c0=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_TeleportToNode'](_0x1bd6c0);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Grid_TraverseToNode',_0x15d5fb=>{const _0x7676f1=_0x44ae36;VisuMZ[_0x7676f1(0x395)]['ActSeq_Grid_TraverseToNode'](_0x15d5fb);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x813),_0x3d8fa7=>{const _0x2df4ac=_0x44ae36;if(!Imported[_0x2df4ac(0xb8b)])return;if(!SceneManager[_0x2df4ac(0xb75)]())return;VisuMZ[_0x2df4ac(0x170)](_0x3d8fa7,_0x3d8fa7);const _0x3a5f2b=VisuMZ[_0x2df4ac(0xb3b)](_0x3d8fa7[_0x2df4ac(0x158)]);for(const _0xbccb03 of _0x3a5f2b){if(!_0xbccb03)continue;_0xbccb03[_0x2df4ac(0x5b4)]('noise'),_0xbccb03[_0x2df4ac(0x5b4)]('glitch'),_0xbccb03[_0x2df4ac(0x5b4)]('tv'),_0xbccb03[_0x2df4ac(0x5f6)]();}$gamePlayer[_0x2df4ac(0x749)]();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x451),_0x375626=>{const _0x51509e=_0x44ae36;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x51509e(0x170)](_0x375626,_0x375626);const _0x129c86=VisuMZ['CreateActionSequenceTargets'](_0x375626['Targets']),_0x3a9458='glitch';_0x375626[_0x51509e(0x692)]=Math[_0x51509e(0xb2f)](_0x375626[_0x51509e(0x30e)]/0x2),_0x375626[_0x51509e(0xb4a)]=_0x375626[_0x51509e(0x30e)],_0x375626[_0x51509e(0x3d1)]=!![];for(const _0x4f5658 of _0x129c86){if(!_0x4f5658)continue;_0x4f5658[_0x51509e(0x264)](_0x3a9458,_0x375626);}$gamePlayer[_0x51509e(0x749)]();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x603),_0x33bfa1=>{const _0x5c05cc=_0x44ae36;if(!Imported[_0x5c05cc(0xb8b)])return;if(!SceneManager[_0x5c05cc(0xb75)]())return;VisuMZ[_0x5c05cc(0x170)](_0x33bfa1,_0x33bfa1);const _0x214821=VisuMZ['CreateActionSequenceTargets'](_0x33bfa1[_0x5c05cc(0x158)]);for(const _0x4b0fa8 of _0x214821){if(!_0x4b0fa8)continue;_0x4b0fa8[_0x5c05cc(0x5b4)](_0x5c05cc(0x6bb));}$gamePlayer[_0x5c05cc(0x749)]();}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x98b),_0x1b7b25=>{const _0x52499d=_0x44ae36;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x52499d(0xb75)]())return;VisuMZ[_0x52499d(0x170)](_0x1b7b25,_0x1b7b25);const _0x5694f7=VisuMZ[_0x52499d(0xb3b)](_0x1b7b25[_0x52499d(0x158)]),_0xf482a4=_0x52499d(0x7da);for(const _0x59d582 of _0x5694f7){if(!_0x59d582)continue;_0x59d582[_0x52499d(0x264)](_0xf482a4,_0x1b7b25);}$gamePlayer[_0x52499d(0x749)]();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x993),_0x5f1d85=>{const _0x4239ac=_0x44ae36;if(!Imported[_0x4239ac(0xb8b)])return;if(!SceneManager[_0x4239ac(0xb75)]())return;VisuMZ[_0x4239ac(0x170)](_0x5f1d85,_0x5f1d85);const _0x2ea4f6=VisuMZ[_0x4239ac(0xb3b)](_0x5f1d85[_0x4239ac(0x158)]);for(const _0x22219a of _0x2ea4f6){if(!_0x22219a)continue;_0x22219a[_0x4239ac(0x5b4)](_0x4239ac(0x7da));}$gamePlayer['refresh']();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x202),_0x15e77c=>{const _0x127b57=_0x44ae36;if(!Imported[_0x127b57(0xb8b)])return;if(!SceneManager[_0x127b57(0xb75)]())return;VisuMZ[_0x127b57(0x170)](_0x15e77c,_0x15e77c);const _0x1087c1=VisuMZ['CreateActionSequenceTargets'](_0x15e77c[_0x127b57(0x158)]),_0xcd9135='tv';for(const _0x2e0829 of _0x1087c1){if(!_0x2e0829)continue;_0x2e0829[_0x127b57(0x264)](_0xcd9135,_0x15e77c);}$gamePlayer[_0x127b57(0x749)]();}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x3ab),_0x808f57=>{const _0x28d5b7=_0x44ae36;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x28d5b7(0xb75)]())return;VisuMZ[_0x28d5b7(0x170)](_0x808f57,_0x808f57);const _0x42c699=VisuMZ[_0x28d5b7(0xb3b)](_0x808f57[_0x28d5b7(0x158)]);for(const _0x112947 of _0x42c699){if(!_0x112947)continue;_0x112947['removeHorrorEffect']('tv');}$gamePlayer['refresh']();}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x583),_0x1cacc3=>{const _0xbaced9=_0x44ae36;if(!Imported[_0xbaced9(0x21f)])return;const _0x5ea08a=SceneManager['_scene'][_0xbaced9(0x4b4)];if(!_0x5ea08a)return;if(VisuMZ[_0xbaced9(0x72b)][_0xbaced9(0x722)]<=1.04){alert(_0xbaced9(0x540)),SceneManager[_0xbaced9(0x804)]();return;}VisuMZ[_0xbaced9(0x170)](_0x1cacc3,_0x1cacc3);const _0x472f07=_0x1cacc3['Enable'];_0x5ea08a[_0xbaced9(0x55e)](_0x472f07);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x36e),_0x5c6342=>{const _0x373297=_0x44ae36;if(!SceneManager[_0x373297(0xb75)]())return;if(!Imported[_0x373297(0x21f)])return;const _0x9861c0=SceneManager[_0x373297(0x97d)][_0x373297(0x4b4)];if(!_0x9861c0)return;VisuMZ['ConvertParams'](_0x5c6342,_0x5c6342);const _0x2d5673=_0x5c6342[_0x373297(0x48a)]||0x1,_0x347963=_0x5c6342['Duration']||0x1,_0x1e816f=_0x5c6342[_0x373297(0x67d)]||'Linear';_0x9861c0[_0x373297(0x3fb)](_0x2d5673,_0x347963,_0x1e816f);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x732),_0x2b7be9=>{const _0x529d89=_0x44ae36;if(!Imported[_0x529d89(0x21f)])return;const _0x61712d=SceneManager['_scene'][_0x529d89(0x4b4)];if(!_0x61712d)return;if(VisuMZ['ActSeqImpact'][_0x529d89(0x722)]<=1.04){alert(_0x529d89(0x540)),SceneManager['exit']();return;}VisuMZ[_0x529d89(0x170)](_0x2b7be9,_0x2b7be9);const _0x54e703=_0x2b7be9['Enable'];_0x61712d[_0x529d89(0xb04)](_0x54e703);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Impact_MotionBlurScreen',_0x322014=>{const _0x2baeed=_0x44ae36;if(!SceneManager[_0x2baeed(0xb75)]())return;if(!Imported[_0x2baeed(0x21f)])return;const _0x5dc82a=SceneManager[_0x2baeed(0x97d)][_0x2baeed(0x4b4)];if(!_0x5dc82a)return;VisuMZ[_0x2baeed(0x170)](_0x322014,_0x322014);const _0x51603c=Number(_0x322014[_0x2baeed(0x421)])||0x0,_0x1caf59=Number(_0x322014['Rate']),_0xae6c22=_0x322014[_0x2baeed(0x76c)]||0x1,_0xc41cf=_0x322014[_0x2baeed(0x67d)]||'Linear';_0x5dc82a['setupMotionBlurImpactFilter'](_0x51603c,_0x1caf59,_0xae6c22,_0xc41cf);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x2a6),_0x34d311=>{const _0x3571ce=_0x44ae36;if(!SceneManager[_0x3571ce(0xb75)]())return;if(!Imported[_0x3571ce(0x21f)])return;const _0x4983be=SceneManager[_0x3571ce(0x97d)][_0x3571ce(0x4b4)];if(!_0x4983be)return;VisuMZ['ConvertParams'](_0x34d311,_0x34d311);const _0x1b1737=Number(_0x34d311['Angle'])||0x0,_0x76d2cc=Number(_0x34d311['Rate']),_0x18ece8=_0x34d311[_0x3571ce(0x76c)]||0x1,_0x2f539d=_0x34d311[_0x3571ce(0x67d)]||_0x3571ce(0x45a),_0x27158d=VisuMZ[_0x3571ce(0xb3b)](_0x34d311[_0x3571ce(0x158)]);for(const _0x41e190 of _0x27158d){if(!_0x41e190)continue;if(!_0x41e190['battler']())continue;_0x41e190[_0x3571ce(0x7ef)]()[_0x3571ce(0x7e3)](_0x1b1737,_0x76d2cc,_0x18ece8,_0x2f539d);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xe1),_0x45938e=>{const _0x488606=_0x44ae36;if(!SceneManager[_0x488606(0xb75)]())return;if(!Imported[_0x488606(0x21f)])return;VisuMZ[_0x488606(0x170)](_0x45938e,_0x45938e);const _0x56e8c2={'delay':_0x45938e[_0x488606(0x807)],'duration':_0x45938e[_0x488606(0x4c4)],'hue':_0x45938e[_0x488606(0x987)],'opacityStart':_0x45938e[_0x488606(0x784)],'tone':_0x45938e['tone'],'visible':!![]},_0x5d3064=VisuMZ[_0x488606(0xb3b)](_0x45938e['Targets']);for(const _0x2a6eda of _0x5d3064){if(!_0x2a6eda)continue;_0x2a6eda[_0x488606(0x8f2)](_0x56e8c2);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x9c6),_0x114e54=>{const _0x3941b0=_0x44ae36;if(!SceneManager[_0x3941b0(0xb75)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x3941b0(0x170)](_0x114e54,_0x114e54);const _0x59fb1f=VisuMZ['CreateActionSequenceTargets'](_0x114e54[_0x3941b0(0x158)]);for(const _0x1090b5 of _0x59fb1f){if(!_0x1090b5)continue;_0x1090b5['clearBattlerMotionTrailData']();}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x174),_0xc1828f=>{const _0x3a0eee=_0x44ae36;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4b73a1=SceneManager[_0x3a0eee(0x97d)][_0x3a0eee(0x4b4)];if(!_0x4b73a1)return;if(VisuMZ[_0x3a0eee(0x72b)][_0x3a0eee(0x722)]<=1.04){alert(_0x3a0eee(0x540)),SceneManager[_0x3a0eee(0x804)]();return;}VisuMZ[_0x3a0eee(0x170)](_0xc1828f,_0xc1828f);const _0x3f5340=_0xc1828f[_0x3a0eee(0x28d)];_0x4b73a1[_0x3a0eee(0xb35)](_0x3f5340);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xb5d),_0x36bbc3=>{const _0x2a62a7=_0x44ae36;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x36baeb=SceneManager['_scene'][_0x2a62a7(0x4b4)];if(!_0x36baeb)return;if(VisuMZ[_0x2a62a7(0x72b)][_0x2a62a7(0x722)]<=1.04){alert(_0x2a62a7(0x540)),SceneManager[_0x2a62a7(0x804)]();return;}VisuMZ[_0x2a62a7(0x170)](_0x36bbc3,_0x36bbc3);const _0x248d44=_0x36bbc3['Enable'];_0x36baeb[_0x2a62a7(0x4ba)](_0x248d44);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x8c2),_0x229913=>{const _0x3fc574=_0x44ae36;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x9fae97=SceneManager[_0x3fc574(0x97d)]['_spriteset'];if(!_0x9fae97)return;VisuMZ[_0x3fc574(0x170)](_0x229913,_0x229913);const _0x2422d9=_0x229913['X']||0x0,_0x53e26a=_0x229913['Y']||0x0,_0x3d13ad=_0x229913[_0x3fc574(0x4dc)]||0x0,_0x40d70e=_0x229913[_0x3fc574(0x70c)]||0x0,_0x1863c0=_0x229913[_0x3fc574(0x76c)]||0x1;_0x9fae97[_0x3fc574(0x339)](_0x2422d9,_0x53e26a,_0x3d13ad,_0x40d70e,_0x1863c0);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xb1b),_0x20212a=>{const _0x5defa1=_0x44ae36;if(!SceneManager[_0x5defa1(0xb75)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2d9735=SceneManager[_0x5defa1(0x97d)][_0x5defa1(0x4b4)];if(!_0x2d9735)return;VisuMZ[_0x5defa1(0x170)](_0x20212a,_0x20212a);const _0x272448=VisuMZ[_0x5defa1(0xb3b)](_0x20212a[_0x5defa1(0x158)]),_0x43b78c=_0x20212a[_0x5defa1(0x216)],_0x24545b=_0x20212a[_0x5defa1(0x491)]||0x0,_0x5bd16c=_0x20212a['OffsetY']||0x0,_0x49621f=_0x20212a[_0x5defa1(0x4dc)]||0x0,_0x58a236=_0x20212a[_0x5defa1(0x70c)]||0x0,_0x2bd445=_0x20212a[_0x5defa1(0x76c)]||0x1;for(const _0x48b3ef of _0x272448){if(!_0x48b3ef)continue;if(!_0x48b3ef[_0x5defa1(0x7ef)]())continue;const _0x5683ab=_0x48b3ef[_0x5defa1(0x7ef)]();let _0x4beb8d=_0x5683ab[_0x5defa1(0x358)],_0x36cd68=_0x5683ab[_0x5defa1(0x5b5)];_0x4beb8d+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x36cd68+=(Graphics['height']-Graphics[_0x5defa1(0x7a7)])/0x2;if(_0x43b78c['match'](/front/i))_0x4beb8d+=(_0x48b3ef[_0x5defa1(0x2fe)]()?0x1:-0x1)*_0x5683ab[_0x5defa1(0x6ce)]()/0x2;else _0x43b78c[_0x5defa1(0x54f)](/back/i)&&(_0x4beb8d+=(_0x48b3ef[_0x5defa1(0x2fe)]()?-0x1:0x1)*_0x5683ab[_0x5defa1(0x6ce)]()/0x2);if(_0x43b78c[_0x5defa1(0x54f)](/head/i))_0x36cd68-=_0x5683ab[_0x5defa1(0x977)]();else _0x43b78c[_0x5defa1(0x54f)](/center/i)&&(_0x36cd68-=_0x5683ab[_0x5defa1(0x977)]()/0x2);_0x4beb8d+=_0x24545b,_0x36cd68+=_0x5bd16c,_0x2d9735[_0x5defa1(0x339)](_0x4beb8d,_0x36cd68,_0x49621f,_0x58a236,_0x2bd445);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Impact_ShockwaveCenterTargets',_0x464dda=>{const _0x4d9934=_0x44ae36;if(!SceneManager[_0x4d9934(0xb75)]())return;if(!Imported[_0x4d9934(0x21f)])return;const _0x10d2ea=SceneManager[_0x4d9934(0x97d)][_0x4d9934(0x4b4)];if(!_0x10d2ea)return;VisuMZ['ConvertParams'](_0x464dda,_0x464dda);const _0xcbd683=VisuMZ[_0x4d9934(0xb3b)](_0x464dda['Targets']),_0x5d38f0=_0x464dda[_0x4d9934(0x216)],_0x4471d9=_0x464dda[_0x4d9934(0x491)]||0x0,_0x1f29ce=_0x464dda['OffsetY']||0x0,_0x5b689b=_0x464dda[_0x4d9934(0x4dc)]||0x0,_0x2c963c=_0x464dda[_0x4d9934(0x70c)]||0x0,_0x5923f1=_0x464dda[_0x4d9934(0x76c)]||0x1,_0x4b6f28=Math[_0x4d9934(0x920)](..._0xcbd683['map'](_0x311015=>_0x311015[_0x4d9934(0x7ef)]()[_0x4d9934(0x358)]-_0x311015[_0x4d9934(0x7ef)]()[_0x4d9934(0x6ce)]()/0x2)),_0x38b989=Math[_0x4d9934(0x131)](..._0xcbd683['map'](_0x19a784=>_0x19a784['battler']()[_0x4d9934(0x358)]+_0x19a784[_0x4d9934(0x7ef)]()[_0x4d9934(0x6ce)]()/0x2)),_0x340d89=Math[_0x4d9934(0x920)](..._0xcbd683[_0x4d9934(0x6e5)](_0x4d1d08=>_0x4d1d08[_0x4d9934(0x7ef)]()[_0x4d9934(0x5b5)]-_0x4d1d08[_0x4d9934(0x7ef)]()[_0x4d9934(0x977)]())),_0x3d4d24=Math[_0x4d9934(0x131)](..._0xcbd683[_0x4d9934(0x6e5)](_0x14b39a=>_0x14b39a[_0x4d9934(0x7ef)]()[_0x4d9934(0x5b5)])),_0x397296=_0xcbd683[_0x4d9934(0x1e5)](_0x32c613=>_0x32c613[_0x4d9934(0x30c)]())[_0x4d9934(0x2d9)],_0x3903e2=_0xcbd683[_0x4d9934(0x1e5)](_0xbcd458=>_0xbcd458[_0x4d9934(0x2fe)]())['length'];let _0x266e96=0x0,_0x24ca48=0x0;if(_0x5d38f0[_0x4d9934(0x54f)](/front/i))_0x266e96=_0x397296>=_0x3903e2?_0x4b6f28:_0x38b989;else{if(_0x5d38f0[_0x4d9934(0x54f)](/middle/i))_0x266e96=(_0x4b6f28+_0x38b989)/0x2,melee=-0x1;else _0x5d38f0[_0x4d9934(0x54f)](/back/i)&&(_0x266e96=_0x397296>=_0x3903e2?_0x38b989:_0x4b6f28);}if(_0x5d38f0[_0x4d9934(0x54f)](/head/i))_0x24ca48=_0x340d89;else{if(_0x5d38f0[_0x4d9934(0x54f)](/center/i))_0x24ca48=(_0x340d89+_0x3d4d24)/0x2;else _0x5d38f0[_0x4d9934(0x54f)](/base/i)&&(_0x24ca48=_0x3d4d24);}_0x266e96+=(Graphics[_0x4d9934(0xa20)]-Graphics[_0x4d9934(0x345)])/0x2,_0x24ca48+=(Graphics[_0x4d9934(0x745)]-Graphics[_0x4d9934(0x7a7)])/0x2,_0x266e96+=_0x4471d9,_0x24ca48+=_0x1f29ce,_0x10d2ea['setupShockwaveImpactFilter'](_0x266e96,_0x24ca48,_0x5b689b,_0x2c963c,_0x5923f1);}),PluginManager['registerCommand'](pluginData['name'],_0x44ae36(0x16b),_0x26f2d0=>{const _0x3847f8=_0x44ae36;if(!Imported[_0x3847f8(0x21f)])return;const _0x169cc4=SceneManager[_0x3847f8(0x97d)][_0x3847f8(0x4b4)];if(!_0x169cc4)return;if(VisuMZ[_0x3847f8(0x72b)]['version']<=1.04){alert(_0x3847f8(0x540)),SceneManager[_0x3847f8(0x804)]();return;}VisuMZ['ConvertParams'](_0x26f2d0,_0x26f2d0);const _0xa72adf=$gameTemp[_0x3847f8(0xbc7)](),_0x1d837b=Math[_0x3847f8(0x131)](0.01,_0x26f2d0[_0x3847f8(0xac6)]);$gameTemp[_0x3847f8(0x98e)](_0x1d837b,_0xa72adf);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x56d),_0x2669d8=>{const _0x40ee3a=_0x44ae36;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x55bdd3=SceneManager[_0x40ee3a(0x97d)][_0x40ee3a(0x4b4)];if(!_0x55bdd3)return;if(VisuMZ[_0x40ee3a(0x72b)][_0x40ee3a(0x722)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x2669d8,_0x2669d8);const _0x261b21=$gameTemp[_0x40ee3a(0xbc7)](),_0x2637d7=_0x2669d8['ms']||0x1;VisuMZ[_0x40ee3a(0x72b)]['freezeTime'](_0x2637d7,_0x261b21);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Impact_ZoomBlurPoint',_0x4efee2=>{const _0x3b2884=_0x44ae36;if(!Imported[_0x3b2884(0x21f)])return;const _0x433804=SceneManager[_0x3b2884(0x97d)][_0x3b2884(0x4b4)];if(!_0x433804)return;VisuMZ[_0x3b2884(0x170)](_0x4efee2,_0x4efee2);const _0x3438d8=_0x4efee2['X']||0x0,_0x73a30c=_0x4efee2['Y']||0x0,_0x2e06f2=_0x4efee2[_0x3b2884(0x597)]||0x0,_0x4f49e7=_0x4efee2[_0x3b2884(0x208)]||0x0,_0x2d4cbe=_0x4efee2[_0x3b2884(0x76c)]||0x1,_0x4f88df=_0x4efee2[_0x3b2884(0x67d)]||_0x3b2884(0x45a);_0x433804[_0x3b2884(0x440)](_0x2e06f2,_0x3438d8,_0x73a30c,_0x4f49e7,_0x2d4cbe,_0x4f88df);}),PluginManager['registerCommand'](pluginData['name'],_0x44ae36(0x9da),_0x4a6850=>{const _0x473d2c=_0x44ae36;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xbe914b=SceneManager['_scene'][_0x473d2c(0x4b4)];if(!_0xbe914b)return;VisuMZ['ConvertParams'](_0x4a6850,_0x4a6850);const _0x37a8ea=VisuMZ['CreateActionSequenceTargets'](_0x4a6850[_0x473d2c(0x158)]),_0x3c8499=_0x4a6850['TargetLocation'],_0x28dbd1=_0x4a6850['OffsetX']||0x0,_0x45f49c=_0x4a6850[_0x473d2c(0xb91)]||0x0,_0x12a27d=_0x4a6850[_0x473d2c(0x597)]||0x0,_0x1751c4=_0x4a6850['Radius']||0x0,_0x508782=_0x4a6850[_0x473d2c(0x76c)]||0x1,_0x1f789d=_0x4a6850[_0x473d2c(0x67d)]||_0x473d2c(0x45a),_0x177c7a=Math[_0x473d2c(0x920)](..._0x37a8ea['map'](_0x39a34b=>_0x39a34b['battler']()[_0x473d2c(0x358)]-_0x39a34b[_0x473d2c(0x7ef)]()['mainSpriteWidth']()/0x2)),_0x4cb259=Math[_0x473d2c(0x131)](..._0x37a8ea[_0x473d2c(0x6e5)](_0xbc4fa8=>_0xbc4fa8[_0x473d2c(0x7ef)]()[_0x473d2c(0x358)]+_0xbc4fa8[_0x473d2c(0x7ef)]()[_0x473d2c(0x6ce)]()/0x2)),_0x146d8f=Math[_0x473d2c(0x920)](..._0x37a8ea[_0x473d2c(0x6e5)](_0x16e3e8=>_0x16e3e8[_0x473d2c(0x7ef)]()[_0x473d2c(0x5b5)]-_0x16e3e8[_0x473d2c(0x7ef)]()[_0x473d2c(0x977)]())),_0x2b87b2=Math[_0x473d2c(0x131)](..._0x37a8ea[_0x473d2c(0x6e5)](_0x2e7f3d=>_0x2e7f3d['battler']()[_0x473d2c(0x5b5)])),_0x566c64=_0x37a8ea[_0x473d2c(0x1e5)](_0xa887e5=>_0xa887e5[_0x473d2c(0x30c)]())['length'],_0x5d6b9e=_0x37a8ea[_0x473d2c(0x1e5)](_0x448a64=>_0x448a64[_0x473d2c(0x2fe)]())[_0x473d2c(0x2d9)];let _0x5a97f3=0x0,_0x31559f=0x0;if(_0x3c8499[_0x473d2c(0x54f)](/front/i))_0x5a97f3=_0x566c64>=_0x5d6b9e?_0x177c7a:_0x4cb259;else{if(_0x3c8499['match'](/middle/i))_0x5a97f3=(_0x177c7a+_0x4cb259)/0x2,melee=-0x1;else _0x3c8499[_0x473d2c(0x54f)](/back/i)&&(_0x5a97f3=_0x566c64>=_0x5d6b9e?_0x4cb259:_0x177c7a);}if(_0x3c8499[_0x473d2c(0x54f)](/head/i))_0x31559f=_0x146d8f;else{if(_0x3c8499[_0x473d2c(0x54f)](/center/i))_0x31559f=(_0x146d8f+_0x2b87b2)/0x2;else _0x3c8499['match'](/base/i)&&(_0x31559f=_0x2b87b2);}_0x5a97f3+=(Graphics[_0x473d2c(0xa20)]-Graphics[_0x473d2c(0x345)])/0x2,_0x31559f+=(Graphics[_0x473d2c(0x745)]-Graphics['boxHeight'])/0x2,_0x5a97f3+=_0x28dbd1,_0x31559f+=_0x45f49c,_0xbe914b[_0x473d2c(0x440)](_0x12a27d,_0x5a97f3,_0x31559f,_0x1751c4,_0x508782,_0x1f789d);}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Inject_AnimationStart',_0x1dcc81=>{const _0x450eb3=_0x44ae36;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x45fb86=SceneManager[_0x450eb3(0x97d)][_0x450eb3(0x4b4)];if(!_0x45fb86)return;if(VisuMZ[_0x450eb3(0x72b)][_0x450eb3(0x722)]<=1.05){alert(_0x450eb3(0x540)),SceneManager['exit']();return;}VisuMZ[_0x450eb3(0x170)](_0x1dcc81,_0x1dcc81);const _0x1de1a1=VisuMZ['CreateActionSequenceTargets'](_0x1dcc81[_0x450eb3(0x158)]),_0x2eb35a={'filename':_0x1dcc81[_0x450eb3(0x237)],'horzCells':_0x1dcc81[_0x450eb3(0x85d)]||0x1,'vertCells':_0x1dcc81[_0x450eb3(0x965)]||0x1,'frameDelay':_0x1dcc81[_0x450eb3(0x60a)]||0x1,'smooth':_0x1dcc81[_0x450eb3(0x568)]||![],'anchorX':_0x1dcc81[_0x450eb3(0x704)]||0x0,'anchorY':_0x1dcc81[_0x450eb3(0xb5c)]||0x0,'offsetX':_0x1dcc81[_0x450eb3(0x5dc)]||0x0,'offsetY':_0x1dcc81[_0x450eb3(0x837)]||0x0};for(const _0x110485 of _0x1de1a1){if(!_0x110485)continue;if(!_0x110485[_0x450eb3(0x7ef)]())continue;_0x110485['battler']()[_0x450eb3(0x3a0)](_0x2eb35a);}const _0xa8773f=$gameTemp[_0x450eb3(0xbc7)]();_0xa8773f&&_0xa8773f[_0x450eb3(0x6d7)](_0x450eb3(0x45f));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Inject_AnimationEnd',_0x492dad=>{const _0x3462d5=_0x44ae36;if(!Imported[_0x3462d5(0x21f)])return;const _0x48d7eb=SceneManager[_0x3462d5(0x97d)]['_spriteset'];if(!_0x48d7eb)return;if(VisuMZ['ActSeqImpact'][_0x3462d5(0x722)]<=1.05){alert(_0x3462d5(0x540)),SceneManager[_0x3462d5(0x804)]();return;}VisuMZ[_0x3462d5(0x170)](_0x492dad,_0x492dad);const _0x24c8a6=VisuMZ[_0x3462d5(0xb3b)](_0x492dad[_0x3462d5(0x158)]);for(const _0x2e0264 of _0x24c8a6){if(!_0x2e0264)continue;if(!_0x2e0264[_0x3462d5(0x7ef)]())continue;_0x2e0264['battler']()[_0x3462d5(0x754)]();}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Inject_AnimationPauseResume',_0x51a851=>{const _0x2e3810=_0x44ae36;if(!Imported[_0x2e3810(0x21f)])return;const _0x23f8ba=SceneManager[_0x2e3810(0x97d)]['_spriteset'];if(!_0x23f8ba)return;if(VisuMZ[_0x2e3810(0x72b)][_0x2e3810(0x722)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2e3810(0x804)]();return;}VisuMZ[_0x2e3810(0x170)](_0x51a851,_0x51a851);const _0x4746a3=VisuMZ[_0x2e3810(0xb3b)](_0x51a851[_0x2e3810(0x158)]),_0x546038=_0x51a851[_0x2e3810(0x19a)];for(const _0xa382b9 of _0x4746a3){if(!_0xa382b9)continue;if(!_0xa382b9[_0x2e3810(0x7ef)]())continue;_0xa382b9['battler']()[_0x2e3810(0x5af)](_0x546038);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xbd0),_0x34d4f0=>{const _0x44b4fc=_0x44ae36;if(!SceneManager[_0x44b4fc(0xb75)]())return;const _0x206df7=$gameTemp[_0x44b4fc(0xbc7)]();if(!_0x206df7)return;_0x206df7[_0x44b4fc(0x6d7)](_0x44b4fc(0xb86));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x9d8),_0x41f52b=>{const _0x165950=_0x44ae36;if(!SceneManager[_0x165950(0xb75)]())return;VisuMZ[_0x165950(0x170)](_0x41f52b,_0x41f52b);const _0x8fec0e=$gameTemp[_0x165950(0xbc7)](),_0x32d33a=BattleManager[_0x165950(0xaca)],_0x587086=BattleManager[_0x165950(0xb62)],_0x4ad6b5=BattleManager[_0x165950(0x551)];if(!_0x8fec0e||!_0x32d33a||!_0x587086)return;if(!_0x32d33a[_0x165950(0x4ec)]())return;const _0x120216=VisuMZ[_0x165950(0xb3b)](_0x41f52b[_0x165950(0x158)]);for(const _0x11bbb5 of _0x120216){if(!_0x11bbb5)continue;_0x4ad6b5[_0x165950(0xa04)](_0x165950(0x115),_0x587086,_0x11bbb5);}_0x8fec0e['setWaitMode'](_0x165950(0x41c));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Mechanics_ActiveChainInputDisable',_0x5260a9=>{const _0x2d0668=_0x44ae36;if(!SceneManager[_0x2d0668(0xb75)]())return;if(!Imported[_0x2d0668(0x463)])return;$gameTemp[_0x2d0668(0x456)]=!![];}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x9c9),_0x31dd70=>{const _0x590e8c=_0x44ae36;if(!SceneManager[_0x590e8c(0xb75)]())return;VisuMZ[_0x590e8c(0x170)](_0x31dd70,_0x31dd70);const _0x5736c9=[_0x590e8c(0x262),'MAXMP',_0x590e8c(0x5e6),'DEF',_0x590e8c(0x6a7),'MDF','AGI',_0x590e8c(0x5a1)],_0x38137e=_0x31dd70['Buffs'],_0x3a61a1=_0x31dd70[_0x590e8c(0xb45)],_0x34cf3f=_0x31dd70[_0x590e8c(0x9ba)],_0x10aaf0=VisuMZ[_0x590e8c(0xb3b)](_0x31dd70['Targets']);for(const _0x252f92 of _0x10aaf0){if(!_0x252f92)continue;for(const _0x16de0e of _0x38137e){const _0x2d2f0a=_0x5736c9[_0x590e8c(0x83c)](_0x16de0e[_0x590e8c(0xaf2)]()[_0x590e8c(0x9de)]());_0x2d2f0a>=0x0&&_0x2d2f0a<=0x7&&_0x252f92[_0x590e8c(0xaa9)](_0x2d2f0a,_0x34cf3f);}for(const _0x467ddc of _0x3a61a1){const _0x50af43=_0x5736c9[_0x590e8c(0x83c)](_0x467ddc[_0x590e8c(0xaf2)]()[_0x590e8c(0x9de)]());_0x50af43>=0x0&&_0x50af43<=0x7&&_0x252f92[_0x590e8c(0x919)](_0x50af43,_0x34cf3f);}}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Mechanics_AddState',_0x4ed76f=>{const _0x463463=_0x44ae36;if(!SceneManager[_0x463463(0xb75)]())return;VisuMZ[_0x463463(0x170)](_0x4ed76f,_0x4ed76f);const _0x4af21e=_0x4ed76f[_0x463463(0xa86)],_0x39d360=VisuMZ[_0x463463(0xb3b)](_0x4ed76f[_0x463463(0x158)]);for(const _0x368fd0 of _0x39d360){if(!_0x368fd0)continue;for(const _0x3ea01e of _0x4af21e){_0x368fd0['addState'](_0x3ea01e);}}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0xb6f),_0x23527b=>{const _0x35c30a=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x35c30a(0x170)](_0x23527b,_0x23527b);const _0x16bf37=BattleManager['_action'],_0x5470bd={'arPenRate':_0x23527b[_0x35c30a(0x1e1)],'arPenFlat':_0x23527b[_0x35c30a(0xa10)],'arRedRate':_0x23527b[_0x35c30a(0x459)],'arRedFlat':_0x23527b[_0x35c30a(0xaf8)]};_0x16bf37[_0x35c30a(0xadb)]=_0x5470bd;}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x5d4),_0x5f42ac=>{const _0xcaf5b7=_0x44ae36;if(!SceneManager[_0xcaf5b7(0xb75)]())return;if(!Imported[_0xcaf5b7(0xaee)])return;VisuMZ[_0xcaf5b7(0x170)](_0x5f42ac,_0x5f42ac);const _0x4609c0=VisuMZ[_0xcaf5b7(0xb3b)](_0x5f42ac['Targets']),_0x314c9c=_0x5f42ac[_0xcaf5b7(0xb09)]||0x1;for(const _0x5a8740 of _0x4609c0){if(!_0x5a8740)continue;if(!_0x5a8740['isEnemy']())continue;_0x5a8740['revealNewWeaknesses'](_0x314c9c);}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x1cf),_0x48e305=>{const _0x306d75=_0x44ae36;if(!SceneManager[_0x306d75(0xb75)]())return;if(!Imported[_0x306d75(0xa1b)])return;if(!BattleManager[_0x306d75(0x855)]())return;VisuMZ[_0x306d75(0x170)](_0x48e305,_0x48e305);const _0x400491=VisuMZ[_0x306d75(0xb3b)](_0x48e305[_0x306d75(0x158)]),_0x3d2499=_0x48e305[_0x306d75(0x65e)],_0x39c161=_0x48e305[_0x306d75(0x65e)],_0x52f822=_0x48e305[_0x306d75(0xf4)];for(const _0x103913 of _0x400491){if(!_0x103913)continue;if(_0x103913[_0x306d75(0xa24)]())_0x103913['changeAtbChargeTime'](_0x3d2499);else{if(_0x103913['isAtbCastingState']()){_0x103913[_0x306d75(0x3a1)](_0x39c161);if(_0x52f822)_0x103913[_0x306d75(0x431)]();}}}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Mechanics_BoostPointsChange',_0x4b16d=>{const _0x3ed68d=_0x44ae36;if(!SceneManager[_0x3ed68d(0xb75)]())return;if(!Imported[_0x3ed68d(0x61c)])return;VisuMZ[_0x3ed68d(0x170)](_0x4b16d,_0x4b16d);const _0x47c1c5=VisuMZ['CreateActionSequenceTargets'](_0x4b16d[_0x3ed68d(0x158)]),_0x2b4033=_0x4b16d['BoostPoints'];for(const _0x5e6c8a of _0x47c1c5){if(!_0x5e6c8a)continue;_0x5e6c8a[_0x3ed68d(0x404)](_0x2b4033);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x39e),_0x4f9a26=>{const _0x12bab9=_0x44ae36;if(!SceneManager[_0x12bab9(0xb75)]())return;if(!Imported[_0x12bab9(0x61c)])return;if(!BattleManager[_0x12bab9(0xb62)])return;VisuMZ[_0x12bab9(0x170)](_0x4f9a26,_0x4f9a26);const _0x1b9f68=_0x4f9a26[_0x12bab9(0x209)];$gameVariables[_0x12bab9(0xa0c)](_0x1b9f68,BattleManager['_subject'][_0x12bab9(0x126)]());}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x31e),_0x42ba73=>{const _0x261f3c=_0x44ae36;if(!SceneManager[_0x261f3c(0xb75)]())return;if(!Imported[_0x261f3c(0xae2)])return;VisuMZ[_0x261f3c(0x170)](_0x42ba73,_0x42ba73);const _0x2a787f=VisuMZ[_0x261f3c(0xb3b)](_0x42ba73['Targets']),_0x3f440e=_0x42ba73['BreakShields'];for(const _0xcd28d5 of _0x2a787f){if(!_0xcd28d5)continue;if(_0xcd28d5['isBreakStunned']())continue;if(!_0xcd28d5[_0x261f3c(0x52b)]())continue;_0xcd28d5[_0x261f3c(0x399)](_0x3f440e);}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x384),_0x2e7de2=>{const _0x3ef1b8=_0x44ae36;if(!SceneManager[_0x3ef1b8(0xb75)]())return;if(!Imported[_0x3ef1b8(0xae2)])return;VisuMZ[_0x3ef1b8(0x170)](_0x2e7de2,_0x2e7de2);const _0x446fb7=VisuMZ['CreateActionSequenceTargets'](_0x2e7de2[_0x3ef1b8(0x158)]);for(const _0x149608 of _0x446fb7){if(!_0x149608)continue;if(_0x149608[_0x3ef1b8(0x90d)]())continue;if(!_0x149608['isAffectedByBreakShield']())continue;_0x149608[_0x3ef1b8(0xacc)]();}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x962),_0xdf761e=>{const _0x5a1208=_0x44ae36;if(!SceneManager[_0x5a1208(0xb75)]())return;if(!Imported[_0x5a1208(0x625)])return;if(!BattleManager[_0x5a1208(0xa0b)]())return;VisuMZ[_0x5a1208(0x170)](_0xdf761e,_0xdf761e);const _0x2a2b1e=VisuMZ[_0x5a1208(0xb3b)](_0xdf761e[_0x5a1208(0x158)]),_0x13b639=_0xdf761e['BravePoints'];for(const _0xfe7582 of _0x2a2b1e){if(!_0xfe7582)continue;_0xfe7582['gainBravePoints'](_0x13b639);}}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xa22),_0x5288c0=>{const _0x2c3be8=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2c3be8(0x170)](_0x5288c0,_0x5288c0);const _0x2934b0=$gameTemp[_0x2c3be8(0xbc7)](),_0x3b103b=BattleManager[_0x2c3be8(0xaca)],_0x4afdde=BattleManager['_subject'];if(!_0x2934b0||!_0x3b103b||!_0x4afdde)return;if(!_0x3b103b['item']())return;const _0x1a6494=VisuMZ[_0x2c3be8(0xb3b)](_0x5288c0[_0x2c3be8(0x158)]);for(const _0x169a86 of _0x1a6494){if(!_0x169a86)continue;_0x5288c0[_0x2c3be8(0x69d)]&&(_0x169a86['removeImmortal'](),_0x169a86[_0x2c3be8(0x66b)](_0x169a86[_0x2c3be8(0x102)]())),_0x169a86['isDeathStateAffected']()&&_0x169a86[_0x2c3be8(0x228)]();}_0x2934b0[_0x2c3be8(0x6d7)](_0x2c3be8(0x606));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x891),_0x5a31b8=>{const _0x36e684=_0x44ae36;if(!SceneManager[_0x36e684(0xb75)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x36e684(0x106)]())return;VisuMZ[_0x36e684(0x170)](_0x5a31b8,_0x5a31b8);const _0x40a05a=VisuMZ[_0x36e684(0xb3b)](_0x5a31b8['Targets']),_0x3ee380=_0x5a31b8[_0x36e684(0x6b6)];for(const _0x3e230b of _0x40a05a){if(!_0x3e230b)continue;_0x3e230b[_0x36e684(0x169)](_0x3ee380);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x408),_0x34e3d1=>{const _0x549c66=_0x44ae36;if(!SceneManager[_0x549c66(0xb75)]())return;if(!Imported[_0x549c66(0x6c0)])return;if(!BattleManager[_0x549c66(0x106)]())return;VisuMZ[_0x549c66(0x170)](_0x34e3d1,_0x34e3d1);const _0x24fa4c=VisuMZ['CreateActionSequenceTargets'](_0x34e3d1[_0x549c66(0x158)]),_0x4d8872=_0x34e3d1[_0x549c66(0x65e)],_0x46603d=_0x34e3d1[_0x549c66(0x65e)];for(const _0x4188b1 of _0x24fa4c){if(!_0x4188b1)continue;if(_0x4188b1['_tpbState']==='charging')_0x4188b1[_0x549c66(0xf9)](_0x4d8872);else _0x4188b1['_tpbState']===_0x549c66(0x6d3)&&_0x4188b1[_0x549c66(0xaeb)](_0x46603d);}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x6af),_0x50b3a3=>{const _0x4cb4df=_0x44ae36;if(!SceneManager[_0x4cb4df(0xb75)]())return;VisuMZ[_0x4cb4df(0x170)](_0x50b3a3,_0x50b3a3);const _0x1e6775=BattleManager[_0x4cb4df(0xaca)];if(!_0x1e6775)return;let _0x5cb7fe=_0x50b3a3['Formula'];_0x1e6775[_0x4cb4df(0x5b0)](_0x5cb7fe);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x58a),_0x3c5eb2=>{const _0x4404a5=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4404a5(0x170)](_0x3c5eb2,_0x3c5eb2);const _0x58303f=VisuMZ[_0x4404a5(0xb3b)](_0x3c5eb2[_0x4404a5(0x158)]);for(const _0x58e5da of _0x58303f){if(!_0x58e5da)continue;if(_0x58e5da[_0x4404a5(0x7e6)]())_0x58e5da[_0x4404a5(0xa8d)]();}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xbbd),_0x5519bf=>{const _0x5222a9=_0x44ae36;if(!SceneManager[_0x5222a9(0xb75)]())return;VisuMZ[_0x5222a9(0x170)](_0x5519bf,_0x5519bf);const _0x42d79c=$gameTemp[_0x5222a9(0xbc7)](),_0x20e8fc=BattleManager[_0x5222a9(0xb62)],_0x2c4c4c=_0x5519bf['JumpToLabel'];if(!_0x42d79c)return;if(!_0x20e8fc)return;_0x20e8fc&&_0x20e8fc[_0x5222a9(0xb6d)]()&&_0x2c4c4c[_0x5222a9(0xaf2)]()[_0x5222a9(0x9de)]()!==_0x5222a9(0x9e7)&&_0x42d79c[_0x5222a9(0xb1d)]([_0x2c4c4c]);}),PluginManager['registerCommand'](pluginData['name'],_0x44ae36(0x3c0),_0x3d4560=>{const _0x6f83bd=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6f83bd(0x170)](_0x3d4560,_0x3d4560);const _0x565191=$gameTemp[_0x6f83bd(0xbc7)](),_0x29ab1f=BattleManager[_0x6f83bd(0x551)];if(!_0x565191)return;const _0xe7209e=VisuMZ['CreateActionSequenceTargets'](_0x3d4560[_0x6f83bd(0x89c)]),_0x479e49=VisuMZ[_0x6f83bd(0xb3b)](_0x3d4560[_0x6f83bd(0x158)]);for(const _0x389c4c of _0xe7209e){for(const _0x2c0281 of _0x479e49){if(!_0x2c0281)continue;const _0xe17d4b=$dataSkills[_0x389c4c['attackSkillId']()];_0x29ab1f[_0x6f83bd(0xa04)]('emulateActionEffect',_0x389c4c,_0x2c0281,_0xe17d4b);}}_0x565191[_0x6f83bd(0x6d7)](_0x6f83bd(0x41c));}),PluginManager['registerCommand'](pluginData['name'],_0x44ae36(0x80e),_0x5cd055=>{const _0x53ee81=_0x44ae36;if(!SceneManager[_0x53ee81(0xb75)]())return;VisuMZ[_0x53ee81(0x170)](_0x5cd055,_0x5cd055);const _0x21310e=$gameTemp[_0x53ee81(0xbc7)](),_0x1f7a6c=BattleManager[_0x53ee81(0x551)];if(!_0x21310e)return;const _0x515566=VisuMZ[_0x53ee81(0xb3b)](_0x5cd055[_0x53ee81(0x89c)]),_0x31717a=VisuMZ[_0x53ee81(0xb3b)](_0x5cd055['Targets']);for(const _0x158ce9 of _0x515566){for(const _0x1a6804 of _0x31717a){if(!_0x1a6804)continue;const _0x30c2df=$dataSkills[_0x158ce9[_0x53ee81(0x1ce)]()];_0x1f7a6c[_0x53ee81(0xa04)](_0x53ee81(0x11b),_0x158ce9,_0x1a6804,_0x30c2df);}}_0x21310e['setWaitMode']('battlelog');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x929),_0x40108b=>{const _0x125c6f=_0x44ae36;if(!SceneManager[_0x125c6f(0xb75)]())return;VisuMZ[_0x125c6f(0x170)](_0x40108b,_0x40108b);const _0x3620ca=$gameTemp[_0x125c6f(0xbc7)](),_0x31b570=BattleManager[_0x125c6f(0x551)],_0x2b77cb=Number(_0x40108b[_0x125c6f(0x73c)]||0x1),_0xaee888=$dataItems[_0x2b77cb];if(!_0x3620ca)return;if(!_0xaee888)return;const _0x1158c9=VisuMZ[_0x125c6f(0xb3b)](_0x40108b[_0x125c6f(0x89c)]),_0x38f024=VisuMZ['CreateActionSequenceTargets'](_0x40108b[_0x125c6f(0x158)]);for(const _0x11ba1c of _0x1158c9){for(const _0x18d1f4 of _0x38f024){if(!_0x18d1f4)continue;_0x31b570['push'](_0x125c6f(0x11b),_0x11ba1c,_0x18d1f4,_0xaee888);}}_0x3620ca[_0x125c6f(0x6d7)](_0x125c6f(0x41c));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xa6b),_0x5be748=>{const _0x388a19=_0x44ae36;if(!SceneManager[_0x388a19(0xb75)]())return;VisuMZ[_0x388a19(0x170)](_0x5be748,_0x5be748);let _0xaf8e42=Number(_0x5be748[_0x388a19(0x260)]||0x0);if(_0xaf8e42<=0x0){const _0x4eee63=BattleManager[_0x388a19(0xaca)];if(_0x4eee63&&_0x4eee63[_0x388a19(0x5d2)]())_0xaf8e42=_0x4eee63[_0x388a19(0x4ec)]()['id'];else return;}const _0x3d1ddd=$dataSkills[_0xaf8e42];if(!_0x3d1ddd)return;const _0x33a455=VisuMZ[_0x388a19(0xb3b)](_0x5be748[_0x388a19(0x89c)]);for(const _0x3a2079 of _0x33a455){_0x3a2079[_0x388a19(0x85c)](_0x3d1ddd);}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x4e8),_0x2ceac2=>{const _0x391053=_0x44ae36;if(!SceneManager[_0x391053(0xb75)]())return;VisuMZ[_0x391053(0x170)](_0x2ceac2,_0x2ceac2);const _0x226a6b=$gameTemp[_0x391053(0xbc7)](),_0x5f3e5d=BattleManager[_0x391053(0x551)],_0x481e54=Number(_0x2ceac2[_0x391053(0x260)]||0x1),_0x4a1e81=$dataSkills[_0x481e54];if(!_0x226a6b)return;if(!_0x4a1e81)return;const _0x526c76=VisuMZ[_0x391053(0xb3b)](_0x2ceac2[_0x391053(0x89c)]),_0x4ff5a9=VisuMZ[_0x391053(0xb3b)](_0x2ceac2[_0x391053(0x158)]);for(const _0x3cca8f of _0x526c76){for(const _0x525d96 of _0x4ff5a9){if(!_0x525d96)continue;_0x5f3e5d[_0x391053(0xa04)](_0x391053(0x11b),_0x3cca8f,_0x525d96,_0x4a1e81);}}_0x226a6b[_0x391053(0x6d7)]('battlelog');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x1b8),_0x1c6d68=>{const _0x2b8a3e=_0x44ae36;if(!SceneManager[_0x2b8a3e(0xb75)]())return;VisuMZ[_0x2b8a3e(0x170)](_0x1c6d68,_0x1c6d68);const _0x210559=VisuMZ[_0x2b8a3e(0xb3b)](_0x1c6d68[_0x2b8a3e(0x158)]);for(const _0x386131 of _0x210559){if(!_0x386131)continue;if(!_0x386131[_0x2b8a3e(0x2fe)]())continue;_0x386131['escape']();}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x385),_0xc68346=>{const _0x4948de=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4948de(0x429)])return;if(!BattleManager[_0x4948de(0x283)]())return;VisuMZ['ConvertParams'](_0xc68346,_0xc68346);const _0x579432=_0xc68346[_0x4948de(0x98d)];BattleManager['_subject']&&BattleManager[_0x4948de(0xb62)][_0x4948de(0xd9)]()[_0x4948de(0x62f)](_0x579432);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x196),_0x3dceb0=>{const _0x27bef2=_0x44ae36;if(!SceneManager[_0x27bef2(0xb75)]())return;if(!Imported[_0x27bef2(0x6b0)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x27bef2(0x170)](_0x3dceb0,_0x3dceb0);const _0x140260=_0x3dceb0[_0x27bef2(0x98d)];BattleManager['_subject']&&BattleManager[_0x27bef2(0xb62)][_0x27bef2(0xd9)]()[_0x27bef2(0x868)](_0x140260);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x4a8),_0x40473e=>{const _0x16f975=_0x44ae36;if(!SceneManager[_0x16f975(0xb75)]())return;VisuMZ[_0x16f975(0x170)](_0x40473e,_0x40473e);const _0x42301a=VisuMZ[_0x16f975(0xb3b)](_0x40473e['Targets']),_0x418e5d=_0x40473e[_0x16f975(0x911)],_0x1e852e=_0x40473e[_0x16f975(0xb97)],_0x13c259=_0x40473e[_0x16f975(0x966)],_0x24a59a=_0x40473e[_0x16f975(0x1c4)],_0x402a67=_0x40473e[_0x16f975(0x7eb)],_0x42cf97=_0x40473e['TP_Flat'],_0xfd9097=_0x40473e['ShowPopup'];for(const _0x2ac2ee of _0x42301a){if(!_0x2ac2ee)continue;const _0x40d9cb=_0x2ac2ee[_0x16f975(0x1c1)](),_0x46cb01=Math[_0x16f975(0x875)](_0x418e5d*_0x2ac2ee[_0x16f975(0xafd)]+_0x1e852e),_0x37d7b3=Math['round'](_0x13c259*_0x2ac2ee[_0x16f975(0x9e6)]+_0x24a59a),_0x47ddd1=Math[_0x16f975(0x875)](_0x402a67*_0x2ac2ee[_0x16f975(0x189)]()+_0x42cf97);if(_0x46cb01!==0x0)_0x2ac2ee['gainHp'](_0x46cb01);if(_0x37d7b3!==0x0)_0x2ac2ee[_0x16f975(0x235)](_0x37d7b3);if(_0x47ddd1!==0x0)_0x2ac2ee[_0x16f975(0x60e)](_0x47ddd1);if(_0xfd9097)_0x2ac2ee[_0x16f975(0xa8d)]();_0x40d9cb&&_0x2ac2ee[_0x16f975(0xb6d)]()&&_0x2ac2ee['performCollapse']();}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x47d),_0x101d3e=>{const _0xec3715=_0x44ae36;if(!SceneManager[_0xec3715(0xb75)]())return;VisuMZ[_0xec3715(0x170)](_0x101d3e,_0x101d3e);const _0x6ecfff=VisuMZ[_0xec3715(0xb3b)](_0x101d3e[_0xec3715(0x158)]);for(const _0x41820b of _0x6ecfff){if(!_0x41820b)continue;_0x41820b['setImmortal'](_0x101d3e[_0xec3715(0x6d0)]);}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Mechanics_Multipliers',_0x4fc1c3=>{const _0x5af19c=_0x44ae36;if(!SceneManager[_0x5af19c(0xb75)]())return;VisuMZ[_0x5af19c(0x170)](_0x4fc1c3,_0x4fc1c3);const _0x390864=BattleManager[_0x5af19c(0xaca)],_0x48472a={'criticalHitRate':_0x4fc1c3[_0x5af19c(0xd8)],'criticalHitFlat':_0x4fc1c3[_0x5af19c(0x8ea)],'criticalDmgRate':_0x4fc1c3[_0x5af19c(0xa5c)],'criticalDmgFlat':_0x4fc1c3[_0x5af19c(0x499)],'damageRate':_0x4fc1c3[_0x5af19c(0x676)],'damageFlat':_0x4fc1c3[_0x5af19c(0x398)],'hitRate':_0x4fc1c3[_0x5af19c(0x31d)],'hitFlat':_0x4fc1c3['HitFlat']};_0x390864['_multipliers']=_0x48472a;}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Mechanics_OnceParallel',_0x4d0c19=>{const _0x33e545=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x33e545(0x170)](_0x4d0c19,_0x4d0c19);const _0x1446cd=_0x4d0c19[_0x33e545(0x77c)];SceneManager[_0x33e545(0x97d)][_0x33e545(0x9f4)](_0x1446cd);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x806),_0x3da07b=>{const _0x142818=_0x44ae36;if(!SceneManager[_0x142818(0xb75)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x142818(0x170)](_0x3da07b,_0x3da07b);const _0x577e48=VisuMZ['CreateActionSequenceTargets'](_0x3da07b['Targets']);for(const _0x99d51 of _0x577e48){if(!_0x99d51)continue;let _0x44f8b7=_0x3da07b['CurrentTurn'],_0xb1d48b=_0x3da07b['NextTurn'],_0x4472d1=_0x3da07b['FollowTurn'];BattleManager[_0x142818(0x91a)][_0x142818(0x76b)](_0x99d51)?_0x44f8b7+=_0x4472d1:_0xb1d48b+=_0x4472d1,BattleManager[_0x142818(0xf2)](_0x99d51,-_0x44f8b7,![]),BattleManager[_0x142818(0xf2)](_0x99d51,-_0xb1d48b,!![]);}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x309),_0x11b67a=>{const _0x1a36b4=_0x44ae36;if(!SceneManager[_0x1a36b4(0xb75)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x1a36b4(0x8de)]())return;VisuMZ['ConvertParams'](_0x11b67a,_0x11b67a);const _0x500f39=BattleManager[_0x1a36b4(0xb62)]['friendsUnit'](),_0x122fda=_0x11b67a[_0x1a36b4(0x589)],_0x162c21=_0x11b67a[_0x1a36b4(0x6f2)]||_0x1a36b4(0x4f7),_0x36578f=_0x11b67a['alterType']||_0x1a36b4(0x4f7),_0x3ce63c=_0x11b67a[_0x1a36b4(0x6fb)]||0x0,_0x1b6687=_0x11b67a[_0x1a36b4(0xb80)]||0x0;(_0x500f39['canAlterActionCostPTB']()||_0x122fda)&&(_0x122fda&&(_0x500f39[_0x1a36b4(0x80a)]=_0x500f39['_ptbActionCost']||{},_0x500f39['_ptbActionCost']['priority']=0x0),_0x500f39['alterActionCostPTB'](_0x162c21,_0x36578f,_0x3ce63c,_0x1b6687));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x124),_0x259660=>{const _0x6ea146=_0x44ae36;if(!SceneManager[_0x6ea146(0xb75)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x6ea146(0x170)](_0x259660,_0x259660);const _0xc81f92=BattleManager['_subject'][_0x6ea146(0xd9)]();let _0x558b92=Math[_0x6ea146(0x131)](_0x259660[_0x6ea146(0x591)],0x0),_0xfe0f2a=_0xc81f92[_0x6ea146(0x8e9)](),_0x20e21c=_0xc81f92['getHalfActionsPTB']();while(_0x558b92--){if(_0xfe0f2a<=0x0&&_0x20e21c<=0x0)break;else _0xfe0f2a>0x0?(_0xfe0f2a--,_0x20e21c++):_0x20e21c--;}_0xc81f92[_0x6ea146(0xb03)](_0xfe0f2a),_0xc81f92[_0x6ea146(0x852)](_0x20e21c);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xbb2),_0x24fb9a=>{const _0x423cf9=_0x44ae36;if(!SceneManager[_0x423cf9(0xb75)]())return;if(!Imported[_0x423cf9(0x511)])return;if(!BattleManager[_0x423cf9(0x8de)]())return;VisuMZ[_0x423cf9(0x170)](_0x24fb9a,_0x24fb9a);const _0xaf69f8=BattleManager[_0x423cf9(0xb62)][_0x423cf9(0xd9)]();let _0x123c3a=_0x24fb9a[_0x423cf9(0xa28)],_0x4139fb=_0x24fb9a[_0x423cf9(0xae4)];_0xaf69f8[_0x423cf9(0xa91)](_0x123c3a),_0xaf69f8[_0x423cf9(0x593)](_0x4139fb);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x3a5),_0x5cc19c=>{const _0xcaa538=_0x44ae36;if(!SceneManager[_0xcaa538(0xb75)]())return;VisuMZ['ConvertParams'](_0x5cc19c,_0x5cc19c);const _0xffbcc7=[_0xcaa538(0x262),_0xcaa538(0x748),_0xcaa538(0x5e6),_0xcaa538(0xfb),_0xcaa538(0x6a7),_0xcaa538(0xb7a),_0xcaa538(0x176),_0xcaa538(0x5a1)],_0x2fd7e8=_0x5cc19c[_0xcaa538(0x14a)],_0x350451=_0x5cc19c['Debuffs'],_0x5392fe=VisuMZ['CreateActionSequenceTargets'](_0x5cc19c['Targets']);for(const _0x43717e of _0x5392fe){if(!_0x43717e)continue;for(const _0x11835c of _0x2fd7e8){const _0x26d9cb=_0xffbcc7['indexOf'](_0x11835c[_0xcaa538(0xaf2)]()[_0xcaa538(0x9de)]());_0x26d9cb>=0x0&&_0x26d9cb<=0x7&&_0x43717e['isBuffAffected'](_0x26d9cb)&&_0x43717e[_0xcaa538(0xbf5)](_0x26d9cb);}for(const _0x322d94 of _0x350451){const _0x35d303=_0xffbcc7[_0xcaa538(0x83c)](_0x322d94[_0xcaa538(0xaf2)]()['trim']());_0x35d303>=0x0&&_0x35d303<=0x7&&_0x43717e['isDebuffAffected'](_0x35d303)&&_0x43717e[_0xcaa538(0xbf5)](_0x35d303);}}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x375b92=>{const _0x44a21b=_0x44ae36;if(!SceneManager[_0x44a21b(0xb75)]())return;VisuMZ[_0x44a21b(0x170)](_0x375b92,_0x375b92);const _0x1d6930=_0x375b92['States'],_0x229bde=VisuMZ[_0x44a21b(0xb3b)](_0x375b92[_0x44a21b(0x158)]);for(const _0xfbff7b of _0x229bde){if(!_0xfbff7b)continue;for(const _0x189db8 of _0x1d6930){_0xfbff7b[_0x44a21b(0x537)](_0x189db8);}}}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xad9),_0x596f45=>{const _0xc146f4=_0x44ae36;if(!SceneManager[_0xc146f4(0xb75)]())return;if(!Imported[_0xc146f4(0x9a3)])return;VisuMZ[_0xc146f4(0x170)](_0x596f45,_0x596f45);const _0x341f79=VisuMZ[_0xc146f4(0xb3b)](_0x596f45[_0xc146f4(0x158)]),_0x549f3a=Number(_0x596f45['StateID']),_0x7dd5fe=Number(_0x596f45['Turns']),_0x38145f=_0x596f45[_0xc146f4(0x5c7)];for(const _0x585186 of _0x341f79){if(!_0x585186)continue;_0x38145f&&!_0x585186[_0xc146f4(0xa3c)](_0x549f3a)?(_0x585186[_0xc146f4(0x66b)](_0x549f3a),_0x585186[_0xc146f4(0x4c1)](_0x549f3a,_0x7dd5fe)):_0x585186[_0xc146f4(0x997)](_0x549f3a,_0x7dd5fe);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xbe6),_0x5c3280=>{const _0x37ac74=_0x44ae36;if(!SceneManager[_0x37ac74(0xb75)]())return;if(!Imported[_0x37ac74(0x9a3)])return;VisuMZ[_0x37ac74(0x170)](_0x5c3280,_0x5c3280);const _0x4b82ad=VisuMZ[_0x37ac74(0xb3b)](_0x5c3280[_0x37ac74(0x158)]),_0x5b8396=Number(_0x5c3280[_0x37ac74(0x5c8)]),_0x45af64=Math[_0x37ac74(0x131)](Number(_0x5c3280[_0x37ac74(0x9ba)]),0x0),_0x4ef1ea=_0x5c3280['AutoAddState'];for(const _0x415903 of _0x4b82ad){if(!_0x415903)continue;_0x4ef1ea&&!_0x415903['isStateAffected'](_0x5b8396)&&_0x415903[_0x37ac74(0x66b)](_0x5b8396),_0x415903[_0x37ac74(0x4c1)](_0x5b8396,_0x45af64);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x2c6),_0x43a156=>{const _0xac915a=_0x44ae36;if(!SceneManager[_0xac915a(0xb75)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ[_0xac915a(0x170)](_0x43a156,_0x43a156);const _0x3ec2d8=_0x43a156[_0xac915a(0x43c)],_0x46ed82=VisuMZ[_0xac915a(0xb3b)](_0x43a156[_0xac915a(0x158)]),_0xefe2b2=_0x43a156[_0xac915a(0x51f)],_0x40c497=_0x43a156[_0xac915a(0x5ae)],_0x116f20=_0x43a156[_0xac915a(0x94e)],_0x18174a=BattleManager[_0xac915a(0xaca)];if(_0x3ec2d8)for(const _0x14c181 of _0x46ed82){if(!_0x14c181)continue;if(_0x14c181===BattleManager[_0xac915a(0xb62)])continue;if(_0xefe2b2)_0x14c181['setSTBExploited'](![]);_0x14c181[_0xac915a(0x52e)](BattleManager[_0xac915a(0xb62)],_0x18174a);}if(_0x40c497&&BattleManager[_0xac915a(0xb62)]){if(_0x116f20)BattleManager[_0xac915a(0xb62)]['setSTBExploited'](![]);const _0x36d98f=_0x46ed82[0x0];BattleManager['_subject'][_0xac915a(0x8e7)](_0x36d98f,_0x18174a);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x52f),_0x846a3e=>{const _0x46f305=_0x44ae36;if(!SceneManager[_0x46f305(0xb75)]())return;if(!Imported[_0x46f305(0x498)])return;if(!BattleManager[_0x46f305(0x480)]())return;VisuMZ[_0x46f305(0x170)](_0x846a3e,_0x846a3e);const _0x36013d=_0x846a3e[_0x46f305(0xa2d)];BattleManager['_subject']&&BattleManager[_0x46f305(0xb62)][_0x46f305(0x931)](_0x36013d);}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x5406c9=>{const _0x55de39=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55de39(0x498)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x55de39(0x170)](_0x5406c9,_0x5406c9);let _0x22a98c=_0x5406c9[_0x55de39(0xa2d)];if(BattleManager[_0x55de39(0xb62)]){BattleManager[_0x55de39(0xb62)][_0x55de39(0xa65)]=BattleManager['_subject'][_0x55de39(0xa65)]||[];while(_0x22a98c--){if(BattleManager['_subject'][_0x55de39(0xa65)]['length']<=0x0)break;BattleManager[_0x55de39(0xb62)][_0x55de39(0xa65)][_0x55de39(0x479)]();}}}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Mechanics_SwapWeapon',_0x557043=>{const _0x44772f=_0x44ae36;if(!SceneManager[_0x44772f(0xb75)]())return;if(!Imported[_0x44772f(0x6f7)])return;VisuMZ['ConvertParams'](_0x557043,_0x557043);const _0x2b7692=VisuMZ[_0x44772f(0xb3b)](_0x557043[_0x44772f(0x158)]),_0x3278a3=_0x557043[_0x44772f(0x9aa)];for(const _0x459bc7 of _0x2b7692){if(!_0x459bc7)continue;if(!_0x459bc7[_0x44772f(0x30c)]())continue;_0x459bc7[_0x44772f(0x94d)](_0x3278a3);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x5c1),_0x165649=>{const _0x510740=_0x44ae36;if(!SceneManager[_0x510740(0xb75)]())return;VisuMZ['ConvertParams'](_0x165649,_0x165649);const _0x558a8f=VisuMZ[_0x510740(0xb3b)](_0x165649['Targets']),_0x333cff=_0x165649[_0x510740(0xb54)],_0x87006a={'textColor':ColorManager['getColor'](_0x165649[_0x510740(0x3f7)]),'flashColor':_0x165649['FlashColor'],'flashDuration':_0x165649['FlashDuration']};for(const _0x41807f of _0x558a8f){if(!_0x41807f)continue;_0x41807f[_0x510740(0xac3)](_0x333cff,_0x87006a);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x363),_0x20ad2f=>{const _0x145c40=_0x44ae36;if(!SceneManager[_0x145c40(0xb75)]())return;VisuMZ['ConvertParams'](_0x20ad2f,_0x20ad2f);const _0x32af52=VisuMZ[_0x145c40(0xb3b)](_0x20ad2f[_0x145c40(0x158)]);let _0x324324=$gameVariables[_0x145c40(0x92b)](_0x20ad2f[_0x145c40(0x229)]);Imported[_0x145c40(0x6c8)]&&_0x20ad2f[_0x145c40(0x58f)]&&(_0x324324=VisuMZ[_0x145c40(0xba3)](_0x324324));const _0x1cbf68=String(_0x324324),_0x195fd0={'textColor':ColorManager['getColor'](_0x20ad2f[_0x145c40(0x3f7)]),'flashColor':_0x20ad2f[_0x145c40(0x123)],'flashDuration':_0x20ad2f[_0x145c40(0x8bc)]};for(const _0x506e4c of _0x32af52){if(!_0x506e4c)continue;_0x506e4c[_0x145c40(0xac3)](_0x1cbf68,_0x195fd0);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Mechanics_WaitForEffect',_0x53c8a1=>{const _0x503883=_0x44ae36;if(!SceneManager[_0x503883(0xb75)]())return;const _0x54171c=$gameTemp[_0x503883(0xbc7)]();if(!_0x54171c)return;_0x54171c[_0x503883(0x6d7)](_0x503883(0x606));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0xa85),_0x3e0a5f=>{const _0x4c169b=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4c169b(0x170)](_0x3e0a5f,_0x3e0a5f);const _0xc1ddca=VisuMZ['CreateActionSequenceTargets'](_0x3e0a5f[_0x4c169b(0x158)]);for(const _0x33a70e of _0xc1ddca){if(!_0x33a70e)continue;_0x33a70e[_0x4c169b(0x815)]();}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x7b0),_0x3d1b15=>{const _0x570975=_0x44ae36;if(!SceneManager[_0x570975(0xb75)]())return;VisuMZ[_0x570975(0x170)](_0x3d1b15,_0x3d1b15);const _0x22d5f4=VisuMZ[_0x570975(0xb3b)](_0x3d1b15['Targets']),_0x3d0e3f=_0x3d1b15[_0x570975(0xbaf)][_0x570975(0x672)]()[_0x570975(0x9de)]();let _0x1372af=_0x3d1b15[_0x570975(0x63a)];const _0x20b2f5=_0x3d1b15[_0x570975(0x3d0)];![_0x570975(0x1f8),_0x570975(0x201),_0x570975(0xa3a),_0x570975(0x3b1)][_0x570975(0x76b)](_0x3d0e3f)&&(_0x1372af=![]);for(const _0x59c357 of _0x22d5f4){if(!_0x59c357)continue;_0x59c357[_0x570975(0x82f)](_0x3d0e3f,_0x1372af,_0x20b2f5);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xaff),_0x2982c0=>{const _0x1bd786=_0x44ae36;if(!SceneManager[_0x1bd786(0xb75)]())return;VisuMZ[_0x1bd786(0x170)](_0x2982c0,_0x2982c0);const _0x282f0e=VisuMZ['CreateActionSequenceTargets'](_0x2982c0['Targets']),_0x2be6da=_0x2982c0[_0x1bd786(0xbaf)][_0x1bd786(0x672)]()['trim'](),_0x313813=_0x2982c0[_0x1bd786(0x63a)];for(const _0x62e88 of _0x282f0e){if(!_0x62e88)continue;_0x62e88[_0x1bd786(0x7e8)]=_0x313813;if(_0x2be6da[_0x1bd786(0x54f)](/ATTACK[ ](\d+)/i))_0x62e88['performAttackSlot'](Number(RegExp['$1']));else _0x2be6da===_0x1bd786(0x1f8)?_0x62e88['performAttack']():_0x62e88[_0x1bd786(0x7f4)](_0x2be6da);if(!_0x313813)_0x62e88[_0x1bd786(0x20e)](0x0);else{if(_0x313813&&[_0x1bd786(0x201),'swing',_0x1bd786(0x595)][_0x1bd786(0x76b)](_0x2be6da)){}}_0x62e88[_0x1bd786(0x7e8)]=undefined;}}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Motion_PerformAction',_0x2e7203=>{const _0x4a6465=_0x44ae36;if(!SceneManager[_0x4a6465(0xb75)]())return;VisuMZ[_0x4a6465(0x170)](_0x2e7203,_0x2e7203);const _0x26034d=BattleManager['_action'];if(!_0x26034d)return;if(!_0x26034d[_0x4a6465(0x4ec)]())return;const _0x4a60a3=VisuMZ['CreateActionSequenceTargets'](_0x2e7203[_0x4a6465(0x158)]);for(const _0xcf940b of _0x4a60a3){if(!_0xcf940b)continue;_0xcf940b[_0x4a6465(0x23a)](_0x26034d);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_RefreshMotion',_0x5c9536=>{const _0x28535a=_0x44ae36;if(!SceneManager[_0x28535a(0xb75)]())return;VisuMZ[_0x28535a(0x170)](_0x5c9536,_0x5c9536);const _0x1c1125=VisuMZ['CreateActionSequenceTargets'](_0x5c9536['Targets']);for(const _0x564f9d of _0x1c1125){if(!_0x564f9d)continue;if(!_0x564f9d['battler']())continue;_0x564f9d[_0x28535a(0x7ef)]()[_0x28535a(0x543)]();}}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x114),_0x1a9222=>{const _0x222c6d=_0x44ae36;if(!SceneManager[_0x222c6d(0xb75)]())return;VisuMZ['ConvertParams'](_0x1a9222,_0x1a9222);const _0x18343c=$gameTemp[_0x222c6d(0xbc7)](),_0x5d270c=_0x1a9222['MotionFrameWait']*Sprite_Battler[_0x222c6d(0x906)];_0x18343c[_0x222c6d(0x26f)](_0x5d270c);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x203),_0x1c9fab=>{const _0x8dbe9b=_0x44ae36;if(!SceneManager[_0x8dbe9b(0xb75)]())return;VisuMZ['ConvertParams'](_0x1c9fab,_0x1c9fab);const _0x1710ba=$gameTemp['getLastPluginCommandInterpreter'](),_0x480945=BattleManager[_0x8dbe9b(0xaca)];if(!_0x1710ba||!_0x480945)return;if(!_0x480945[_0x8dbe9b(0x4ec)]())return;const _0x4b490e=VisuMZ[_0x8dbe9b(0xb3b)](_0x1c9fab[_0x8dbe9b(0x158)]);for(const _0x127153 of _0x4b490e){if(!_0x127153)continue;_0x127153[_0x8dbe9b(0xfc)](_0x480945);}if(_0x1c9fab[_0x8dbe9b(0x444)])_0x1710ba[_0x8dbe9b(0x6d7)](_0x8dbe9b(0xa16));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x798),_0xdfe7c1=>{const _0x1cde3e=_0x44ae36;if(!SceneManager[_0x1cde3e(0xb75)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1cde3e(0x170)](_0xdfe7c1,_0xdfe7c1);const _0x4cc22b=$gameTemp[_0x1cde3e(0xbc7)](),_0x5c3b3e=VisuMZ['CreateActionSequenceTargets'](_0xdfe7c1[_0x1cde3e(0x158)]),_0x352ca7=_0xdfe7c1[_0x1cde3e(0x691)],_0x1d3f4d=_0xdfe7c1['DistanceX'],_0x54cf0d=_0xdfe7c1[_0x1cde3e(0x2c9)],_0x2b17f1=_0xdfe7c1[_0x1cde3e(0x76c)],_0x4b8265=_0xdfe7c1['FaceDirection'],_0x1f87e2=_0xdfe7c1[_0x1cde3e(0x67d)],_0x49d4b1=_0xdfe7c1[_0x1cde3e(0xbaf)],_0x3795ed=_0xdfe7c1[_0x1cde3e(0x444)];if(!_0x4cc22b)return;for(const _0x55ba3e of _0x5c3b3e){if(!_0x55ba3e)continue;let _0x9b1473=_0x1d3f4d,_0x56ff33=_0x54cf0d;if(_0x352ca7['match'](/horz/i))_0x9b1473*=_0x55ba3e[_0x1cde3e(0x30c)]()?-0x1:0x1;if(_0x352ca7[_0x1cde3e(0x54f)](/vert/i))_0x56ff33*=_0x55ba3e['isActor']()?-0x1:0x1;_0x55ba3e[_0x1cde3e(0x6fe)](_0x9b1473,_0x56ff33,_0x2b17f1,_0x4b8265,_0x1f87e2),_0x55ba3e[_0x1cde3e(0x7f4)](_0x49d4b1);}if(_0x3795ed)_0x4cc22b[_0x1cde3e(0x6d7)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_HomeMoveToJsPoint',_0x5516f2=>{const _0x4fca29=_0x44ae36;if(!SceneManager[_0x4fca29(0xb75)]())return;if(!$gameSystem[_0x4fca29(0x628)]())return;VisuMZ[_0x4fca29(0x170)](_0x5516f2,_0x5516f2);const _0x2f7455=$gameTemp['getLastPluginCommandInterpreter'](),_0x7ac0a1=VisuMZ[_0x4fca29(0xb3b)](_0x5516f2[_0x4fca29(0x158)]),_0x4c6777=_0x5516f2[_0x4fca29(0x6a9)],_0x5142e8=_0x5516f2[_0x4fca29(0x491)],_0x28e7cb=_0x5516f2[_0x4fca29(0xb91)],_0x5084b0=_0x5516f2['Duration'],_0x166c56=_0x5516f2[_0x4fca29(0xace)],_0x11cb1f=_0x5516f2[_0x4fca29(0x67d)],_0x1cd43b=_0x5516f2[_0x4fca29(0xbaf)],_0x2616a1=_0x5516f2[_0x4fca29(0x444)];if(!_0x2f7455)return;for(const _0xfeeb97 of _0x7ac0a1){if(!_0xfeeb97)continue;const _0x182a88=_0x5516f2[_0x4fca29(0x331)](_0xfeeb97)||{'x':0x0,'y':0x0};let _0x3a205c=_0x182a88['x'],_0x56ef07=_0x182a88['y'];if(_0x4c6777[_0x4fca29(0x54f)](/none/i))_0x3a205c+=_0x5142e8,_0x56ef07+=_0x28e7cb;else{if(_0x4c6777['match'](/horz/i)&&_0x4c6777[_0x4fca29(0x54f)](/vert/i))_0x3a205c+=_0xfeeb97[_0x4fca29(0x30c)]()?-_0x5142e8:_0x5142e8,_0x56ef07+=_0xfeeb97['isActor']()?-_0x28e7cb:_0x28e7cb;else{if(_0x4c6777[_0x4fca29(0x54f)](/horz/i))_0x3a205c+=_0xfeeb97[_0x4fca29(0x30c)]()?-_0x5142e8:_0x5142e8,_0x56ef07+=_0x28e7cb;else _0x4c6777[_0x4fca29(0x54f)](/vert/i)&&(_0x3a205c+=_0x5142e8,_0x56ef07+=_0xfeeb97[_0x4fca29(0x30c)]()?-_0x28e7cb:_0x28e7cb);}}_0xfeeb97['moveBattlerHomeToPoint'](_0x3a205c,_0x56ef07,_0x5084b0,_0x166c56,_0x11cb1f,-0x1),_0xfeeb97[_0x4fca29(0x7f4)](_0x1cd43b);}if(_0x2616a1)_0x2f7455[_0x4fca29(0x6d7)](_0x4fca29(0xa16));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x267),_0x4e7875=>{const _0x2b315f=_0x44ae36;if(!SceneManager[_0x2b315f(0xb75)]())return;if(!$gameSystem[_0x2b315f(0x628)]())return;VisuMZ[_0x2b315f(0x170)](_0x4e7875,_0x4e7875);const _0x4117bd=$gameTemp[_0x2b315f(0xbc7)](),_0x4fee07=VisuMZ['CreateActionSequenceTargets'](_0x4e7875[_0x2b315f(0x158)]),_0x5a467f=_0x4e7875['Destination'],_0x495978=_0x4e7875[_0x2b315f(0x6a9)],_0xbc3565=_0x4e7875[_0x2b315f(0x491)],_0xefb970=_0x4e7875['OffsetY'],_0xa2926d=_0x4e7875['Duration'],_0x5d6e49=_0x4e7875[_0x2b315f(0xace)],_0x339298=_0x4e7875[_0x2b315f(0x67d)],_0x1c1b7e=_0x4e7875[_0x2b315f(0xbaf)],_0x3be057=_0x4e7875[_0x2b315f(0x444)];if(!_0x4117bd)return;for(const _0x25937a of _0x4fee07){if(!_0x25937a)continue;let _0x142cc1=_0x25937a[_0x2b315f(0x7ef)]()['_baseX'],_0x3bebc7=_0x25937a[_0x2b315f(0x7ef)]()['_baseY'];if(_0x5a467f[_0x2b315f(0x54f)](/home/i))_0x142cc1=_0x25937a[_0x2b315f(0x7ef)]()[_0x2b315f(0x50d)],_0x3bebc7=_0x25937a[_0x2b315f(0x7ef)]()[_0x2b315f(0x496)];else{if(_0x5a467f[_0x2b315f(0x54f)](/center/i))_0x142cc1=Graphics['boxWidth']/0x2,_0x3bebc7=Graphics[_0x2b315f(0x7a7)]/0x2;else _0x5a467f[_0x2b315f(0x54f)](/point (\d+), (\d+)/i)&&(_0x142cc1=Number(RegExp['$1']),_0x3bebc7=Number(RegExp['$2']));}if(_0x495978[_0x2b315f(0x54f)](/none/i))_0x142cc1+=_0xbc3565,_0x3bebc7+=_0xefb970;else{if(_0x495978[_0x2b315f(0x54f)](/horz/i)&&_0x495978[_0x2b315f(0x54f)](/vert/i))_0x142cc1+=_0x25937a[_0x2b315f(0x30c)]()?-_0xbc3565:_0xbc3565,_0x3bebc7+=_0x25937a[_0x2b315f(0x30c)]()?-_0xefb970:_0xefb970;else{if(_0x495978[_0x2b315f(0x54f)](/horz/i))_0x142cc1+=_0x25937a[_0x2b315f(0x30c)]()?-_0xbc3565:_0xbc3565,_0x3bebc7+=_0xefb970;else _0x495978['match'](/vert/i)&&(_0x142cc1+=_0xbc3565,_0x3bebc7+=_0x25937a['isActor']()?-_0xefb970:_0xefb970);}}_0x25937a[_0x2b315f(0x53f)](_0x142cc1,_0x3bebc7,_0xa2926d,_0x5d6e49,_0x339298,-0x1),_0x25937a[_0x2b315f(0x7f4)](_0x1c1b7e);}if(_0x3be057)_0x4117bd[_0x2b315f(0x6d7)](_0x2b315f(0xa16));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x9b0),_0x3e76d7=>{const _0x19d452=_0x44ae36;if(!SceneManager[_0x19d452(0xb75)]())return;if(!$gameSystem[_0x19d452(0x628)]())return;VisuMZ['ConvertParams'](_0x3e76d7,_0x3e76d7);const _0x561e93=$gameTemp[_0x19d452(0xbc7)](),_0x376b36=VisuMZ[_0x19d452(0xb3b)](_0x3e76d7['Targets1']),_0x25112b=VisuMZ[_0x19d452(0xb3b)](_0x3e76d7[_0x19d452(0x6cb)]),_0x21c0d0=_0x3e76d7['TargetLocation'];let _0xfdfa51=_0x3e76d7[_0x19d452(0x3dd)];const _0x475b29=_0x3e76d7[_0x19d452(0x6a9)],_0x1796fc=_0x3e76d7[_0x19d452(0x491)],_0x249832=_0x3e76d7['OffsetY'],_0x57d419=_0x3e76d7[_0x19d452(0x76c)],_0x1388f6=_0x3e76d7['FaceDirection'],_0x3590af=_0x3e76d7[_0x19d452(0x67d)],_0x50db56=_0x3e76d7[_0x19d452(0xbaf)],_0x141b50=_0x3e76d7[_0x19d452(0x444)],_0x13dd0c=Math['min'](..._0x25112b[_0x19d452(0x6e5)](_0x599c28=>_0x599c28[_0x19d452(0x7ef)]()[_0x19d452(0x358)]-_0x599c28[_0x19d452(0x7ef)]()[_0x19d452(0x6ce)]()/0x2)),_0x41ed8f=Math[_0x19d452(0x131)](..._0x25112b[_0x19d452(0x6e5)](_0x4d71ff=>_0x4d71ff[_0x19d452(0x7ef)]()[_0x19d452(0x358)]+_0x4d71ff[_0x19d452(0x7ef)]()[_0x19d452(0x6ce)]()/0x2)),_0x57f8c6=Math[_0x19d452(0x920)](..._0x25112b[_0x19d452(0x6e5)](_0x460063=>_0x460063[_0x19d452(0x7ef)]()['_baseY']-_0x460063['battler']()['mainSpriteHeight']())),_0x2968a3=Math[_0x19d452(0x131)](..._0x25112b[_0x19d452(0x6e5)](_0x3b12bd=>_0x3b12bd['battler']()[_0x19d452(0x5b5)])),_0x25f722=_0x25112b['filter'](_0x5f077b=>_0x5f077b['isActor']())['length'],_0x516830=_0x25112b[_0x19d452(0x1e5)](_0x1fe520=>_0x1fe520[_0x19d452(0x2fe)]())['length'];let _0xd5fe74=0x0,_0x47945e=0x0;if(_0x21c0d0[_0x19d452(0x54f)](/front/i))_0xd5fe74=_0x25f722>=_0x516830?_0x13dd0c:_0x41ed8f;else{if(_0x21c0d0[_0x19d452(0x54f)](/middle/i))_0xd5fe74=(_0x13dd0c+_0x41ed8f)/0x2,_0xfdfa51=-0x1;else _0x21c0d0[_0x19d452(0x54f)](/back/i)&&(_0xd5fe74=_0x25f722>=_0x516830?_0x41ed8f:_0x13dd0c);}if(_0x21c0d0[_0x19d452(0x54f)](/head/i))_0x47945e=_0x57f8c6;else{if(_0x21c0d0[_0x19d452(0x54f)](/center/i))_0x47945e=(_0x57f8c6+_0x2968a3)/0x2;else _0x21c0d0['match'](/base/i)&&(_0x47945e=_0x2968a3);}if(!_0x561e93)return;for(const _0x324c26 of _0x376b36){if(!_0x324c26)continue;let _0x4bc7c6=_0xd5fe74,_0x49730c=_0x47945e;if(_0x475b29[_0x19d452(0x54f)](/none/i))_0x4bc7c6+=_0x1796fc,_0x49730c+=_0x249832;else{if(_0x475b29[_0x19d452(0x54f)](/horz/i)&&_0x475b29[_0x19d452(0x54f)](/vert/i))_0x4bc7c6+=_0x324c26[_0x19d452(0x30c)]()?-_0x1796fc:_0x1796fc,_0x49730c+=_0x324c26[_0x19d452(0x30c)]()?-_0x249832:_0x249832;else{if(_0x475b29[_0x19d452(0x54f)](/horz/i))_0x4bc7c6+=_0x324c26[_0x19d452(0x30c)]()?-_0x1796fc:_0x1796fc,_0x49730c+=_0x249832;else _0x475b29[_0x19d452(0x54f)](/vert/i)&&(_0x4bc7c6+=_0x1796fc,_0x49730c+=_0x324c26['isActor']()?-_0x249832:_0x249832);}}_0x324c26[_0x19d452(0x53f)](_0x4bc7c6,_0x49730c,_0x57d419,_0x1388f6,_0x3590af,_0xfdfa51),_0x324c26[_0x19d452(0x7f4)](_0x50db56);}if(_0x141b50)_0x561e93[_0x19d452(0x6d7)](_0x19d452(0xa16));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_FaceDirection',_0x5d5858=>{const _0x59551a=_0x44ae36;if(!SceneManager[_0x59551a(0xb75)]())return;if(!$gameSystem[_0x59551a(0x628)]())return;VisuMZ['ConvertParams'](_0x5d5858,_0x5d5858);const _0x213518=VisuMZ[_0x59551a(0xb3b)](_0x5d5858[_0x59551a(0x158)]);let _0x3759b2=_0x5d5858[_0x59551a(0xb73)][_0x59551a(0x54f)](/back/i);for(const _0x13efee of _0x213518){if(!_0x13efee)continue;if(_0x5d5858[_0x59551a(0xb73)][_0x59551a(0x54f)](/rand/i))_0x3759b2=Math['randomInt'](0x2);_0x13efee[_0x59551a(0x5b8)](!!_0x3759b2);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_FaceJsPoint',_0x359717=>{const _0x529050=_0x44ae36;if(!SceneManager[_0x529050(0xb75)]())return;if(!$gameSystem[_0x529050(0x628)]())return;VisuMZ[_0x529050(0x170)](_0x359717,_0x359717);const _0x3154a5=VisuMZ['CreateActionSequenceTargets'](_0x359717['Targets']),_0x1c2ec0=_0x359717[_0x529050(0xab0)];for(const _0x540600 of _0x3154a5){if(!_0x540600)continue;const _0x1846a3=_0x359717['PointJS'](_0x540600)||{'x':0x0,'y':0x0};let _0x593ea6=_0x1846a3['x'],_0x508f50=_0x1846a3['y'];_0x540600[_0x529050(0xb2d)](Math[_0x529050(0x875)](_0x593ea6),Math[_0x529050(0x875)](_0x508f50),!!_0x1c2ec0);}}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x55c),_0x329367=>{const _0x2ac1eb=_0x44ae36;if(!SceneManager[_0x2ac1eb(0xb75)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2ac1eb(0x170)](_0x329367,_0x329367);const _0xbf366a=VisuMZ['CreateActionSequenceTargets'](_0x329367['Targets']);let _0x528523=_0x329367[_0x2ac1eb(0x57a)];const _0x368b7e=_0x329367['FaceAway'];for(const _0x29d506 of _0xbf366a){if(!_0x29d506)continue;let _0x3819e9=_0x29d506[_0x2ac1eb(0x7ef)]()[_0x2ac1eb(0x358)],_0x4c443=_0x29d506[_0x2ac1eb(0x7ef)]()[_0x2ac1eb(0x5b5)];if(_0x528523[_0x2ac1eb(0x54f)](/home/i))_0x3819e9=_0x29d506[_0x2ac1eb(0x7ef)]()[_0x2ac1eb(0x50d)],_0x4c443=_0x29d506[_0x2ac1eb(0x7ef)]()[_0x2ac1eb(0x496)];else{if(_0x528523[_0x2ac1eb(0x54f)](/center/i))_0x3819e9=Graphics[_0x2ac1eb(0x345)]/0x2,_0x4c443=Graphics[_0x2ac1eb(0x7a7)]/0x2;else _0x528523[_0x2ac1eb(0x54f)](/point (\d+), (\d+)/i)&&(_0x3819e9=Number(RegExp['$1']),_0x4c443=Number(RegExp['$2']));}_0x29d506[_0x2ac1eb(0xb2d)](Math[_0x2ac1eb(0x875)](_0x3819e9),Math[_0x2ac1eb(0x875)](_0x4c443),!!_0x368b7e);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x10c),_0x3bded2=>{const _0x44a021=_0x44ae36;if(!SceneManager[_0x44a021(0xb75)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x44a021(0x170)](_0x3bded2,_0x3bded2);const _0x344b45=VisuMZ['CreateActionSequenceTargets'](_0x3bded2[_0x44a021(0x716)]),_0x1d1a91=VisuMZ[_0x44a021(0xb3b)](_0x3bded2[_0x44a021(0x6cb)]),_0x2a1a7f=_0x1d1a91[_0x44a021(0x6e5)](_0x34721e=>_0x34721e&&_0x34721e[_0x44a021(0x7ef)]()?_0x34721e[_0x44a021(0x7ef)]()[_0x44a021(0x358)]:0x0)/(_0x1d1a91[_0x44a021(0x2d9)]||0x1),_0x3f9eae=_0x1d1a91[_0x44a021(0x6e5)](_0x413dcc=>_0x413dcc&&_0x413dcc[_0x44a021(0x7ef)]()?_0x413dcc[_0x44a021(0x7ef)]()['_baseY']:0x0)/(_0x1d1a91['length']||0x1),_0x49bb0c=_0x3bded2[_0x44a021(0xab0)];for(const _0x2d89ce of _0x344b45){if(!_0x2d89ce)continue;_0x2d89ce['setBattlerFacePoint'](Math[_0x44a021(0x875)](_0x2a1a7f),Math['round'](_0x3f9eae),!!_0x49bb0c);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x916),_0x4e557f=>{const _0x4bd3c5=_0x44ae36;if(!SceneManager[_0x4bd3c5(0xb75)]())return;VisuMZ[_0x4bd3c5(0x170)](_0x4e557f,_0x4e557f);const _0x120dd2=$gameTemp[_0x4bd3c5(0xbc7)](),_0x234d61=VisuMZ['CreateActionSequenceTargets'](_0x4e557f[_0x4bd3c5(0x158)]),_0x25c1e2=_0x4e557f[_0x4bd3c5(0x241)],_0x4cc8e9=_0x4e557f[_0x4bd3c5(0x76c)],_0x181213=_0x4e557f['EasingType'],_0x411879=_0x4e557f[_0x4bd3c5(0x5fc)];if(!_0x120dd2)return;for(const _0x596c43 of _0x234d61){if(!_0x596c43)continue;_0x596c43['floatBattler'](_0x25c1e2,_0x4cc8e9,_0x181213);}if(_0x411879)_0x120dd2['setWaitMode'](_0x4bd3c5(0xaaf));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_HomeReset',_0x580075=>{const _0x2c7142=_0x44ae36;if(!SceneManager[_0x2c7142(0xb75)]())return;VisuMZ[_0x2c7142(0x170)](_0x580075,_0x580075);const _0x34d5cc=$gameTemp[_0x2c7142(0xbc7)]();if(!_0x34d5cc)return;const _0x28a98f=VisuMZ['CreateActionSequenceTargets'](_0x580075[_0x2c7142(0x158)]);for(const _0x4687a2 of _0x28a98f){if(!_0x4687a2)continue;_0x4687a2[_0x2c7142(0x365)]();}BattleManager[_0x2c7142(0xb62)]&&BattleManager['_subject'][_0x2c7142(0xa7f)]();if(_0x580075[_0x2c7142(0x444)])_0x34d5cc[_0x2c7142(0x6d7)](_0x2c7142(0xa16));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_Jump',_0xb2aba1=>{const _0x1c5cc9=_0x44ae36;if(!SceneManager[_0x1c5cc9(0xb75)]())return;VisuMZ[_0x1c5cc9(0x170)](_0xb2aba1,_0xb2aba1);const _0x436beb=$gameTemp[_0x1c5cc9(0xbc7)](),_0x5e312a=VisuMZ[_0x1c5cc9(0xb3b)](_0xb2aba1[_0x1c5cc9(0x158)]),_0x1c238f=_0xb2aba1[_0x1c5cc9(0x241)],_0x11110d=_0xb2aba1[_0x1c5cc9(0x76c)],_0x476f57=_0xb2aba1[_0x1c5cc9(0x486)];if(!_0x436beb)return;for(const _0x2edff7 of _0x5e312a){if(!_0x2edff7)continue;_0x2edff7[_0x1c5cc9(0x7c1)](_0x1c238f,_0x11110d);}if(_0x476f57)_0x436beb[_0x1c5cc9(0x6d7)](_0x1c5cc9(0x65b));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_MoveBy',_0x56e993=>{const _0x1f6507=_0x44ae36;if(!SceneManager[_0x1f6507(0xb75)]())return;if(!$gameSystem[_0x1f6507(0x628)]())return;VisuMZ[_0x1f6507(0x170)](_0x56e993,_0x56e993);const _0x523c6d=$gameTemp[_0x1f6507(0xbc7)](),_0x446e6c=VisuMZ[_0x1f6507(0xb3b)](_0x56e993[_0x1f6507(0x158)]),_0x15583d=_0x56e993[_0x1f6507(0x691)],_0x1ba5e6=_0x56e993[_0x1f6507(0x293)],_0x574bd0=_0x56e993[_0x1f6507(0x2c9)],_0x348fe8=_0x56e993[_0x1f6507(0x76c)],_0x323d43=_0x56e993['FaceDirection'],_0x2944f9=_0x56e993[_0x1f6507(0x67d)],_0x130582=_0x56e993['MotionType'],_0x2a3994=_0x56e993[_0x1f6507(0x444)];if(!_0x523c6d)return;for(const _0x4fcb44 of _0x446e6c){if(!_0x4fcb44)continue;let _0x33ae95=_0x1ba5e6,_0xba956e=_0x574bd0;if(_0x15583d[_0x1f6507(0x54f)](/horz/i))_0x33ae95*=_0x4fcb44[_0x1f6507(0x30c)]()?-0x1:0x1;if(_0x15583d[_0x1f6507(0x54f)](/vert/i))_0xba956e*=_0x4fcb44['isActor']()?-0x1:0x1;_0x4fcb44[_0x1f6507(0x18c)](_0x33ae95,_0xba956e,_0x348fe8,_0x323d43,_0x2944f9),_0x4fcb44['requestMotion'](_0x130582);}if(_0x2a3994)_0x523c6d[_0x1f6507(0x6d7)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x314),_0x175271=>{const _0x24c1c5=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x24c1c5(0x170)](_0x175271,_0x175271);const _0x352e34=$gameTemp[_0x24c1c5(0xbc7)](),_0x3129e7=VisuMZ[_0x24c1c5(0xb3b)](_0x175271[_0x24c1c5(0x158)]),_0x5a7c90=_0x175271[_0x24c1c5(0x6a9)],_0x383483=_0x175271['OffsetX'],_0x56777a=_0x175271[_0x24c1c5(0xb91)],_0x1c06e7=_0x175271['Duration'],_0x141ace=_0x175271[_0x24c1c5(0xace)],_0x263a19=_0x175271[_0x24c1c5(0x67d)],_0x2ad80d=_0x175271[_0x24c1c5(0xbaf)],_0x593b9f=_0x175271[_0x24c1c5(0x444)];if(!_0x352e34)return;for(const _0x376456 of _0x3129e7){if(!_0x376456)continue;const _0x1ed9b=_0x175271[_0x24c1c5(0x331)](_0x376456)||{'x':0x0,'y':0x0};let _0x286d22=_0x1ed9b['x'],_0x2e4236=_0x1ed9b['y'];if(_0x5a7c90[_0x24c1c5(0x54f)](/none/i))_0x286d22+=_0x383483,_0x2e4236+=_0x56777a;else{if(_0x5a7c90[_0x24c1c5(0x54f)](/horz/i)&&_0x5a7c90[_0x24c1c5(0x54f)](/vert/i))_0x286d22+=_0x376456['isActor']()?-_0x383483:_0x383483,_0x2e4236+=_0x376456[_0x24c1c5(0x30c)]()?-_0x56777a:_0x56777a;else{if(_0x5a7c90['match'](/horz/i))_0x286d22+=_0x376456[_0x24c1c5(0x30c)]()?-_0x383483:_0x383483,_0x2e4236+=_0x56777a;else _0x5a7c90['match'](/vert/i)&&(_0x286d22+=_0x383483,_0x2e4236+=_0x376456[_0x24c1c5(0x30c)]()?-_0x56777a:_0x56777a);}}_0x376456[_0x24c1c5(0x3db)](_0x286d22,_0x2e4236,_0x1c06e7,_0x141ace,_0x263a19,-0x1),_0x376456[_0x24c1c5(0x7f4)](_0x2ad80d);}if(_0x593b9f)_0x352e34['setWaitMode']('battleMove');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x88c),_0x36927a=>{const _0x1849b8=_0x44ae36;if(!SceneManager[_0x1849b8(0xb75)]())return;if(!$gameSystem[_0x1849b8(0x628)]())return;VisuMZ['ConvertParams'](_0x36927a,_0x36927a);const _0x8a4bf9=$gameTemp[_0x1849b8(0xbc7)](),_0x3f0a1d=VisuMZ[_0x1849b8(0xb3b)](_0x36927a[_0x1849b8(0x158)]),_0x2ada1d=_0x36927a['Destination'],_0x2a5e62=_0x36927a[_0x1849b8(0x6a9)],_0x2f1a40=_0x36927a['OffsetX'],_0x5ce3f5=_0x36927a[_0x1849b8(0xb91)],_0x23886c=_0x36927a[_0x1849b8(0x76c)],_0x4ed69d=_0x36927a[_0x1849b8(0xace)],_0x28eb03=_0x36927a[_0x1849b8(0x67d)],_0x59e387=_0x36927a[_0x1849b8(0xbaf)],_0x4b16d9=_0x36927a[_0x1849b8(0x444)];if(!_0x8a4bf9)return;for(const _0x3a8d41 of _0x3f0a1d){if(!_0x3a8d41)continue;let _0x51138b=_0x3a8d41[_0x1849b8(0x7ef)]()[_0x1849b8(0x358)],_0x54c031=_0x3a8d41['battler']()['_baseY'];if(_0x2ada1d[_0x1849b8(0x54f)](/home/i))_0x51138b=_0x3a8d41[_0x1849b8(0x7ef)]()['_homeX'],_0x54c031=_0x3a8d41[_0x1849b8(0x7ef)]()[_0x1849b8(0x496)];else{if(_0x2ada1d['match'](/center/i))_0x51138b=Graphics[_0x1849b8(0x345)]/0x2,_0x54c031=Graphics[_0x1849b8(0x7a7)]/0x2;else _0x2ada1d[_0x1849b8(0x54f)](/point (\d+), (\d+)/i)&&(_0x51138b=Number(RegExp['$1']),_0x54c031=Number(RegExp['$2']));}if(_0x2a5e62[_0x1849b8(0x54f)](/none/i))_0x51138b+=_0x2f1a40,_0x54c031+=_0x5ce3f5;else{if(_0x2a5e62[_0x1849b8(0x54f)](/horz/i)&&_0x2a5e62['match'](/vert/i))_0x51138b+=_0x3a8d41['isActor']()?-_0x2f1a40:_0x2f1a40,_0x54c031+=_0x3a8d41[_0x1849b8(0x30c)]()?-_0x5ce3f5:_0x5ce3f5;else{if(_0x2a5e62[_0x1849b8(0x54f)](/horz/i))_0x51138b+=_0x3a8d41[_0x1849b8(0x30c)]()?-_0x2f1a40:_0x2f1a40,_0x54c031+=_0x5ce3f5;else _0x2a5e62[_0x1849b8(0x54f)](/vert/i)&&(_0x51138b+=_0x2f1a40,_0x54c031+=_0x3a8d41[_0x1849b8(0x30c)]()?-_0x5ce3f5:_0x5ce3f5);}}_0x3a8d41[_0x1849b8(0x3db)](_0x51138b,_0x54c031,_0x23886c,_0x4ed69d,_0x28eb03,-0x1),_0x3a8d41[_0x1849b8(0x7f4)](_0x59e387);}if(_0x4b16d9)_0x8a4bf9[_0x1849b8(0x6d7)](_0x1849b8(0xa16));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x72e),_0x3a93df=>{const _0x13cb86=_0x44ae36;if(!SceneManager[_0x13cb86(0xb75)]())return;if(!$gameSystem[_0x13cb86(0x628)]())return;VisuMZ['ConvertParams'](_0x3a93df,_0x3a93df);const _0x5e66cc=$gameTemp[_0x13cb86(0xbc7)](),_0x2e3efb=VisuMZ['CreateActionSequenceTargets'](_0x3a93df[_0x13cb86(0x716)]),_0x4caefd=VisuMZ[_0x13cb86(0xb3b)](_0x3a93df['Targets2']),_0x6046f6=_0x3a93df['TargetLocation'];let _0x9737ba=_0x3a93df['MeleeDistance'];const _0x14bf05=_0x3a93df['OffsetAdjust'],_0x2c68b9=_0x3a93df[_0x13cb86(0x491)],_0x44639b=_0x3a93df[_0x13cb86(0xb91)],_0x31bf00=_0x3a93df['Duration'],_0x4e6f17=_0x3a93df[_0x13cb86(0xace)],_0x2af185=_0x3a93df[_0x13cb86(0x67d)],_0x2b33c4=_0x3a93df[_0x13cb86(0xbaf)],_0x4f96a9=_0x3a93df[_0x13cb86(0x444)],_0x3975ee=Math[_0x13cb86(0x920)](..._0x4caefd[_0x13cb86(0x6e5)](_0x3f17ca=>_0x3f17ca[_0x13cb86(0x7ef)]()[_0x13cb86(0x358)]-_0x3f17ca[_0x13cb86(0x7ef)]()[_0x13cb86(0x6ce)]()/0x2)),_0x43529c=Math['max'](..._0x4caefd[_0x13cb86(0x6e5)](_0x1805c9=>_0x1805c9[_0x13cb86(0x7ef)]()['_baseX']+_0x1805c9[_0x13cb86(0x7ef)]()['mainSpriteWidth']()/0x2)),_0x537bcb=Math['min'](..._0x4caefd[_0x13cb86(0x6e5)](_0x311bd7=>_0x311bd7[_0x13cb86(0x7ef)]()[_0x13cb86(0x5b5)]-_0x311bd7['battler']()[_0x13cb86(0x977)]())),_0x141fae=Math[_0x13cb86(0x131)](..._0x4caefd['map'](_0x672adc=>_0x672adc[_0x13cb86(0x7ef)]()[_0x13cb86(0x5b5)])),_0x34accb=_0x4caefd[_0x13cb86(0x1e5)](_0x37ccac=>_0x37ccac[_0x13cb86(0x30c)]())['length'],_0x279e1a=_0x4caefd[_0x13cb86(0x1e5)](_0x542145=>_0x542145[_0x13cb86(0x2fe)]())[_0x13cb86(0x2d9)];let _0x596524=0x0,_0x39074b=0x0;if(_0x6046f6[_0x13cb86(0x54f)](/front/i))_0x596524=_0x34accb>=_0x279e1a?_0x3975ee:_0x43529c;else{if(_0x6046f6[_0x13cb86(0x54f)](/middle/i))_0x596524=(_0x3975ee+_0x43529c)/0x2,_0x9737ba=-0x1;else _0x6046f6[_0x13cb86(0x54f)](/back/i)&&(_0x596524=_0x34accb>=_0x279e1a?_0x43529c:_0x3975ee);}if(_0x6046f6[_0x13cb86(0x54f)](/head/i))_0x39074b=_0x537bcb;else{if(_0x6046f6[_0x13cb86(0x54f)](/center/i))_0x39074b=(_0x537bcb+_0x141fae)/0x2;else _0x6046f6['match'](/base/i)&&(_0x39074b=_0x141fae);}if(!_0x5e66cc)return;for(const _0x199182 of _0x2e3efb){if(!_0x199182)continue;let _0x308b1b=_0x596524,_0x43b7b8=_0x39074b;if(_0x14bf05[_0x13cb86(0x54f)](/none/i))_0x308b1b+=_0x2c68b9,_0x43b7b8+=_0x44639b;else{if(_0x14bf05[_0x13cb86(0x54f)](/horz/i)&&_0x14bf05[_0x13cb86(0x54f)](/vert/i))_0x308b1b+=_0x199182['isActor']()?-_0x2c68b9:_0x2c68b9,_0x43b7b8+=_0x199182[_0x13cb86(0x30c)]()?-_0x44639b:_0x44639b;else{if(_0x14bf05['match'](/horz/i))_0x308b1b+=_0x199182['isActor']()?-_0x2c68b9:_0x2c68b9,_0x43b7b8+=_0x44639b;else _0x14bf05['match'](/vert/i)&&(_0x308b1b+=_0x2c68b9,_0x43b7b8+=_0x199182[_0x13cb86(0x30c)]()?-_0x44639b:_0x44639b);}}_0x199182[_0x13cb86(0x3db)](_0x308b1b,_0x43b7b8,_0x31bf00,_0x4e6f17,_0x2af185,_0x9737ba),_0x199182[_0x13cb86(0x7f4)](_0x2b33c4);}if(_0x4f96a9)_0x5e66cc[_0x13cb86(0x6d7)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x4b9),_0x5ede78=>{const _0x293b32=_0x44ae36;if(!SceneManager[_0x293b32(0xb75)]())return;VisuMZ['ConvertParams'](_0x5ede78,_0x5ede78);const _0x36277f=$gameTemp[_0x293b32(0xbc7)](),_0x2f57fa=VisuMZ[_0x293b32(0xb3b)](_0x5ede78['Targets']),_0x37c398=_0x5ede78['Opacity'],_0x5c1d60=_0x5ede78[_0x293b32(0x76c)],_0x5caaeb=_0x5ede78[_0x293b32(0x67d)],_0x5742a7=_0x5ede78[_0x293b32(0xa31)];if(!_0x36277f)return;for(const _0x160326 of _0x2f57fa){if(!_0x160326)continue;_0x160326['changeBattlerOpacity'](_0x37c398,_0x5c1d60,_0x5caaeb);}if(_0x5742a7)_0x36277f[_0x293b32(0x6d7)]('battleOpacity');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_Scale',_0x18fc49=>{const _0x2a2925=_0x44ae36;if(!SceneManager[_0x2a2925(0xb75)]())return;VisuMZ['ConvertParams'](_0x18fc49,_0x18fc49);const _0x51a146=$gameTemp['getLastPluginCommandInterpreter'](),_0x484439=VisuMZ[_0x2a2925(0xb3b)](_0x18fc49[_0x2a2925(0x158)]),_0x3ece44=_0x18fc49[_0x2a2925(0x470)],_0x5238e4=_0x18fc49[_0x2a2925(0x50e)],_0x1287e3=_0x18fc49[_0x2a2925(0x76c)],_0x28e861=_0x18fc49[_0x2a2925(0x67d)],_0x20bfe7=_0x18fc49[_0x2a2925(0x4eb)];if(!_0x51a146)return;for(const _0x2c7833 of _0x484439){if(!_0x2c7833)continue;_0x2c7833[_0x2a2925(0x387)](_0x3ece44,_0x5238e4,_0x1287e3,_0x28e861);}if(_0x20bfe7)_0x51a146[_0x2a2925(0x6d7)](_0x2a2925(0x188));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x7c9),_0x219ce5=>{const _0x4396e5=_0x44ae36;if(!SceneManager[_0x4396e5(0xb75)]())return;VisuMZ[_0x4396e5(0x170)](_0x219ce5,_0x219ce5);const _0x1aa5e1=$gameTemp[_0x4396e5(0xbc7)](),_0x4572c5=VisuMZ[_0x4396e5(0xb3b)](_0x219ce5[_0x4396e5(0x158)]),_0x2584c3=_0x219ce5[_0x4396e5(0xbb3)],_0xfc3099=_0x219ce5[_0x4396e5(0x981)],_0x564ebe=_0x219ce5[_0x4396e5(0x76c)],_0x3b68dc=_0x219ce5[_0x4396e5(0x67d)],_0x4babf8=_0x219ce5['WaitForSkew'];if(!_0x1aa5e1)return;for(const _0x18a3cf of _0x4572c5){if(!_0x18a3cf)continue;_0x18a3cf['skewBattler'](_0x2584c3,_0xfc3099,_0x564ebe,_0x3b68dc);}if(_0x4babf8)_0x1aa5e1[_0x4396e5(0x6d7)]('battleSpriteSkew');}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x436),_0x256109=>{const _0x208702=_0x44ae36;if(!SceneManager[_0x208702(0xb75)]())return;VisuMZ[_0x208702(0x170)](_0x256109,_0x256109);const _0x11ee2c=$gameTemp[_0x208702(0xbc7)](),_0x12840c=VisuMZ[_0x208702(0xb3b)](_0x256109[_0x208702(0x158)]),_0x38a498=_0x256109[_0x208702(0x421)],_0x2befa7=_0x256109[_0x208702(0x76c)],_0x5e7cd9=_0x256109[_0x208702(0x67d)],_0x125b75=_0x256109[_0x208702(0x9e8)],_0x36461c=_0x256109[_0x208702(0xbdc)];if(!_0x11ee2c)return;for(const _0x30cef1 of _0x12840c){if(!_0x30cef1)continue;_0x30cef1[_0x208702(0x87c)](_0x38a498,_0x2befa7,_0x5e7cd9,_0x125b75);}if(_0x36461c)_0x11ee2c['setWaitMode'](_0x208702(0x3f2));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_WaitForFloat',_0x16021e=>{const _0x54c7e3=_0x44ae36;if(!SceneManager[_0x54c7e3(0xb75)]())return;const _0x2fe54d=$gameTemp[_0x54c7e3(0xbc7)]();if(!_0x2fe54d)return;_0x2fe54d[_0x54c7e3(0x6d7)]('battleFloat');}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xbca),_0xf70525=>{const _0x5b79cb=_0x44ae36;if(!SceneManager[_0x5b79cb(0xb75)]())return;const _0x5e0e47=$gameTemp[_0x5b79cb(0xbc7)]();if(!_0x5e0e47)return;_0x5e0e47[_0x5b79cb(0x6d7)]('battleJump');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_WaitForMovement',_0xd06a6b=>{const _0x505e3d=_0x44ae36;if(!SceneManager[_0x505e3d(0xb75)]())return;const _0x319daa=$gameTemp[_0x505e3d(0xbc7)]();if(!_0x319daa)return;_0x319daa[_0x505e3d(0x6d7)](_0x505e3d(0xa16));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_WaitForOpacity',_0x562171=>{const _0x51ca7a=_0x44ae36;if(!SceneManager['isSceneBattle']())return;const _0x610ed8=$gameTemp[_0x51ca7a(0xbc7)]();if(!_0x610ed8)return;_0x610ed8['setWaitMode']('battleOpacity');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Movement_WaitForScale',_0x1d198a=>{const _0x48b874=_0x44ae36;if(!SceneManager[_0x48b874(0xb75)]())return;const _0x3e8aa4=$gameTemp[_0x48b874(0xbc7)]();if(!_0x3e8aa4)return;_0x3e8aa4[_0x48b874(0x6d7)]('battleGrow');}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0xeb),_0x1be773=>{const _0x1e1826=_0x44ae36;if(!SceneManager['isSceneBattle']())return;const _0x396b2b=$gameTemp[_0x1e1826(0xbc7)]();if(!_0x396b2b)return;_0x396b2b[_0x1e1826(0x6d7)]('battleSpriteSkew');}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0xb8c),_0x54f8f9=>{const _0x30e4f8=_0x44ae36;if(!SceneManager[_0x30e4f8(0xb75)]())return;const _0x3aa2a3=$gameTemp[_0x30e4f8(0xbc7)]();if(!_0x3aa2a3)return;_0x3aa2a3[_0x30e4f8(0x6d7)](_0x30e4f8(0x3f2));}),VisuMZ['BattleCore'][_0x44ae36(0x677)]=function(){const _0x21756c=_0x44ae36;if(!Imported[_0x21756c(0x376)])return;if(VisuMZ[_0x21756c(0xb22)][_0x21756c(0x722)]<1.08){let _0x478071='';_0x478071+=_0x21756c(0x1a5),_0x478071+=_0x21756c(0x7ad),alert(_0x478071),SceneManager['exit']();}},PluginManager['registerCommand'](pluginData['name'],_0x44ae36(0x3ec),_0x1b7a72=>{const _0x32d16f=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x32d16f(0x376)])return;VisuMZ[_0x32d16f(0x170)](_0x1b7a72,_0x1b7a72),VisuMZ[_0x32d16f(0x851)][_0x32d16f(0x677)]();const _0x30ee57=$gameTemp[_0x32d16f(0xbc7)](),_0x375faa=_0x1b7a72['WaitForProjectile'];if(!_0x30ee57)return;const _0xecaddb=BattleManager[_0x32d16f(0x4b4)];if(!_0xecaddb)return;_0xecaddb[_0x32d16f(0xaf9)](_0x1b7a72);if(_0x375faa)_0x30ee57['setWaitMode'](_0x32d16f(0x160));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x602),_0x2a916d=>{const _0x1431d1=_0x44ae36;if(!SceneManager[_0x1431d1(0xb75)]())return;if(!Imported[_0x1431d1(0x376)])return;VisuMZ['ConvertParams'](_0x2a916d,_0x2a916d),VisuMZ[_0x1431d1(0x851)][_0x1431d1(0x677)]();const _0x3898ac=$gameTemp[_0x1431d1(0xbc7)](),_0x1861b2=_0x2a916d[_0x1431d1(0x640)];if(!_0x3898ac)return;const _0x1ded05=BattleManager[_0x1431d1(0x4b4)];if(!_0x1ded05)return;_0x1ded05[_0x1431d1(0xaf9)](_0x2a916d);if(_0x1861b2)_0x3898ac['setWaitMode'](_0x1431d1(0x160));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x12f),_0x2d6f1d=>{const _0x168aef=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0x2d6f1d,_0x2d6f1d),VisuMZ[_0x168aef(0x851)]['CheckActSeqProjectileVersion']();const _0x42be6f=$gameTemp[_0x168aef(0xbc7)](),_0x5c1d34=_0x2d6f1d[_0x168aef(0x640)];if(!_0x42be6f)return;const _0x2b4a9b=BattleManager[_0x168aef(0x4b4)];if(!_0x2b4a9b)return;_0x2b4a9b[_0x168aef(0xaf9)](_0x2d6f1d);if(_0x5c1d34)_0x42be6f[_0x168aef(0x6d7)](_0x168aef(0x160));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x519),_0x59b75a=>{const _0x528b51=_0x44ae36;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x528b51(0x85a)])return;VisuMZ[_0x528b51(0x170)](_0x59b75a,_0x59b75a);const _0x285a31=$gameTemp[_0x528b51(0xbc7)](),_0x4f882d=_0x59b75a['WaitForSkew'];if(!_0x285a31)return;$gameScreen['setBattleSkew'](_0x59b75a[_0x528b51(0xbb3)],_0x59b75a['SkewY'],_0x59b75a[_0x528b51(0x76c)],_0x59b75a[_0x528b51(0x67d)]);if(_0x4f882d)_0x285a31['setWaitMode'](_0x528b51(0x273));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x8fc),_0x191107=>{const _0x158d87=_0x44ae36;if(!SceneManager[_0x158d87(0xb75)]())return;if(!Imported[_0x158d87(0x85a)])return;VisuMZ[_0x158d87(0x170)](_0x191107,_0x191107);const _0x1ba6cb=$gameTemp[_0x158d87(0xbc7)](),_0x2e3612=_0x191107[_0x158d87(0x900)];if(!_0x1ba6cb)return;$gameScreen[_0x158d87(0x5c3)](0x0,0x0,_0x191107[_0x158d87(0x76c)],_0x191107[_0x158d87(0x67d)]);if(_0x2e3612)_0x1ba6cb[_0x158d87(0x6d7)](_0x158d87(0x273));}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x501),_0x10638c=>{const _0x3d135c=_0x44ae36;if(!SceneManager[_0x3d135c(0xb75)]())return;if(!Imported[_0x3d135c(0x85a)])return;const _0x520e4e=$gameTemp[_0x3d135c(0xbc7)]();if(!_0x520e4e)return;_0x520e4e[_0x3d135c(0x6d7)](_0x3d135c(0x273));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x9f7),_0x4f3a53=>{const _0x126f70=_0x44ae36;if(!SceneManager[_0x126f70(0xb75)]())return;VisuMZ[_0x126f70(0x170)](_0x4f3a53,_0x4f3a53);const _0x382cc3=$gameTemp[_0x126f70(0xbc7)](),_0x5b561e=_0x4f3a53[_0x126f70(0x8c6)],_0x5dd3ff=_0x4f3a53['JumpToLabel'];if(!_0x382cc3)return;BattleManager[_0x126f70(0x98c)]=_0x5b561e,BattleManager[_0x126f70(0x5ec)]=BattleManager[_0x126f70(0x113)]?BattleManager[_0x126f70(0x113)][BattleManager[_0x126f70(0x98c)]]||null:null,BattleManager['_target']&&_0x5dd3ff[_0x126f70(0xaf2)]()[_0x126f70(0x9de)]()!=='UNTITLED'&&_0x382cc3[_0x126f70(0xb1d)]([_0x5dd3ff]);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Target_NextTarget',_0x37c4e1=>{const _0x3d31ce=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d31ce(0x170)](_0x37c4e1,_0x37c4e1);const _0x4e393c=$gameTemp[_0x3d31ce(0xbc7)](),_0x22f16b=_0x37c4e1['JumpToLabel'];if(!_0x4e393c)return;BattleManager[_0x3d31ce(0x98c)]++,BattleManager[_0x3d31ce(0x5ec)]=BattleManager[_0x3d31ce(0x113)][BattleManager[_0x3d31ce(0x98c)]]||null,BattleManager[_0x3d31ce(0x5ec)]&&_0x22f16b[_0x3d31ce(0xaf2)]()[_0x3d31ce(0x9de)]()!==_0x3d31ce(0x9e7)&&_0x4e393c['command119']([_0x22f16b]);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x935),_0x1f0677=>{const _0x483d3c=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1f0677,_0x1f0677);const _0x4bf4b4=$gameTemp['getLastPluginCommandInterpreter'](),_0x45bb0d=_0x1f0677[_0x483d3c(0x2a8)];if(!_0x4bf4b4)return;BattleManager['_targetIndex']--,BattleManager[_0x483d3c(0x5ec)]=BattleManager[_0x483d3c(0x113)][BattleManager['_targetIndex']]||null,BattleManager[_0x483d3c(0x5ec)]&&_0x45bb0d['toUpperCase']()[_0x483d3c(0x9de)]()!==_0x483d3c(0x9e7)&&_0x4bf4b4[_0x483d3c(0xb1d)]([_0x45bb0d]);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x8ec),_0x3f3453=>{const _0x17f73c=_0x44ae36;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x17f73c(0x170)](_0x3f3453,_0x3f3453);const _0x27f800=$gameTemp['getLastPluginCommandInterpreter'](),_0x369723=_0x3f3453[_0x17f73c(0x5a4)],_0x25d513=_0x3f3453['JumpToLabel'];if(!_0x27f800)return;const _0x4a6e5f=BattleManager[_0x17f73c(0x98c)];for(;;){BattleManager[_0x17f73c(0x98c)]=Math[_0x17f73c(0x812)](BattleManager[_0x17f73c(0x113)][_0x17f73c(0x2d9)]);if(!_0x369723)break;if(BattleManager[_0x17f73c(0x98c)]!==_0x4a6e5f)break;if(BattleManager[_0x17f73c(0x113)]['length']<=0x1){BattleManager[_0x17f73c(0x98c)]=0x0;break;}}BattleManager['_target']=BattleManager[_0x17f73c(0x113)][BattleManager[_0x17f73c(0x98c)]]||null,BattleManager[_0x17f73c(0x5ec)]&&_0x25d513[_0x17f73c(0xaf2)]()[_0x17f73c(0x9de)]()!=='UNTITLED'&&_0x27f800['command119']([_0x25d513]);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x9ee),_0x4b6bc9=>{const _0x4318e3=_0x44ae36;if(!SceneManager[_0x4318e3(0xb75)]())return;if(!Imported[_0x4318e3(0x961)])return;if(!ConfigManager[_0x4318e3(0x2cb)])return;VisuMZ[_0x4318e3(0x170)](_0x4b6bc9,_0x4b6bc9);const _0xe3a557=VisuMZ[_0x4318e3(0xb3b)](_0x4b6bc9[_0x4318e3(0x158)]);let _0x3aacc3=_0x4b6bc9[_0x4318e3(0x99d)]||'';for(const _0x5a9943 of _0xe3a557){if(!_0x5a9943)continue;_0x5a9943[_0x4318e3(0x272)](_0x3aacc3);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_BattleVoice_PlaySpecialLine',_0x5b7efd=>{const _0x122a7d=_0x44ae36;if(!SceneManager[_0x122a7d(0xb75)]())return;if(!Imported[_0x122a7d(0x961)])return;if(!ConfigManager[_0x122a7d(0x2cb)])return;VisuMZ[_0x122a7d(0x170)](_0x5b7efd,_0x5b7efd);const _0x5b32a0=VisuMZ['CreateActionSequenceTargets'](_0x5b7efd[_0x122a7d(0x158)]);let _0x2f940e=(_0x5b7efd[_0x122a7d(0x2f6)]||'')+(_0x5b7efd[_0x122a7d(0x2d1)]||'');for(const _0x46ffbc of _0x5b32a0){if(!_0x46ffbc)continue;_0x46ffbc[_0x122a7d(0x272)](_0x2f940e);}}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0x21a),_0x525cb6=>{const _0xe9e99c=_0x44ae36;if(!SceneManager[_0xe9e99c(0xb75)]())return;VisuMZ[_0xe9e99c(0x170)](_0x525cb6,_0x525cb6);const _0x10b3e2=VisuMZ['CreateActionSequenceTargets'](_0x525cb6[_0xe9e99c(0x158)]);for(const _0x1c0cfa of _0x10b3e2){if(!_0x1c0cfa)continue;if(!_0x1c0cfa[_0xe9e99c(0x30c)]())continue;_0x1c0cfa[_0xe9e99c(0x50f)]();}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],_0x44ae36(0x27e),_0x531e38=>{const _0x1872ba=_0x44ae36;if(!SceneManager[_0x1872ba(0xb75)]())return;VisuMZ[_0x1872ba(0x170)](_0x531e38,_0x531e38);const _0x29f48c=$gameTemp[_0x1872ba(0xbc7)]();let _0x5ce417=![];const _0x2df10d=_0x531e38[_0x1872ba(0x2a8)],_0x1f472c=VisuMZ[_0x1872ba(0xb3b)](_0x531e38[_0x1872ba(0x158)]);for(const _0x28632a of _0x1f472c){if(!_0x28632a)continue;if(!_0x28632a[_0x1872ba(0x30c)]())continue;_0x28632a[_0x1872ba(0x8d8)](),_0x28632a['weapons']()[_0x1872ba(0x2d9)]>0x0?_0x5ce417=!![]:_0x28632a[_0x1872ba(0x50f)]();}_0x5ce417&&_0x2df10d[_0x1872ba(0xaf2)]()[_0x1872ba(0x9de)]()!==_0x1872ba(0x9e7)&&_0x29f48c[_0x1872ba(0xb1d)]([_0x2df10d]);}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Weapon_SetActiveWeapon',_0x1ea9f0=>{const _0x2bddb6=_0x44ae36;if(!SceneManager[_0x2bddb6(0xb75)]())return;VisuMZ[_0x2bddb6(0x170)](_0x1ea9f0,_0x1ea9f0);let _0x28c450=_0x1ea9f0['SlotID'];_0x28c450--,_0x28c450=Math[_0x2bddb6(0x131)](_0x28c450,0x0);const _0x66c9be=VisuMZ[_0x2bddb6(0xb3b)](_0x1ea9f0[_0x2bddb6(0x158)]);for(const _0x204455 of _0x66c9be){if(!_0x204455)continue;if(!_0x204455[_0x2bddb6(0x30c)]())continue;_0x204455[_0x2bddb6(0xb87)](_0x28c450);}}),PluginManager[_0x44ae36(0xf6)](pluginData[_0x44ae36(0x674)],'ActSeq_Zoom_Scale',_0x1cbc73=>{const _0x29f7fa=_0x44ae36;if(!SceneManager[_0x29f7fa(0xb75)]())return;if(!Imported[_0x29f7fa(0x85a)])return;VisuMZ['ConvertParams'](_0x1cbc73,_0x1cbc73);const _0x1ee11d=$gameTemp['getLastPluginCommandInterpreter'](),_0x5e8f0c=_0x1cbc73[_0x29f7fa(0x3f6)];if(!_0x1ee11d)return;$gameScreen[_0x29f7fa(0x105)](_0x1cbc73[_0x29f7fa(0xac6)],_0x1cbc73[_0x29f7fa(0x76c)],_0x1cbc73[_0x29f7fa(0x67d)]);if(_0x5e8f0c)_0x1ee11d[_0x29f7fa(0x6d7)](_0x29f7fa(0x35c));}),PluginManager['registerCommand'](pluginData[_0x44ae36(0x674)],_0x44ae36(0xa99),_0x2ee0dd=>{const _0x179d22=_0x44ae36;if(!SceneManager[_0x179d22(0xb75)]())return;if(!Imported[_0x179d22(0x85a)])return;VisuMZ[_0x179d22(0x170)](_0x2ee0dd,_0x2ee0dd);const _0x15f387=$gameTemp['getLastPluginCommandInterpreter'](),_0x1134f2=_0x2ee0dd[_0x179d22(0x3f6)];if(!_0x15f387)return;$gameScreen[_0x179d22(0x105)](0x1,_0x2ee0dd['Duration'],_0x2ee0dd[_0x179d22(0x67d)]);if(_0x1134f2)_0x15f387[_0x179d22(0x6d7)](_0x179d22(0x35c));}),PluginManager[_0x44ae36(0xf6)](pluginData['name'],_0x44ae36(0x710),_0x3f03ea=>{const _0x48e038=_0x44ae36;if(!SceneManager[_0x48e038(0xb75)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3962bd=$gameTemp[_0x48e038(0xbc7)]();if(!_0x3962bd)return;_0x3962bd[_0x48e038(0x6d7)](_0x48e038(0x35c));}),VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x143)]=Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x72a)],Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x72a)]=function(){const _0x3ea469=_0x44ae36;this[_0x3ea469(0x212)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x3ea469(0x307)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x3ea469(0x851)][_0x3ea469(0x143)][_0x3ea469(0x689)](this),this['process_VisuMZ_BattleCore_Notetags'](),this['process_VisuMZ_BattleCore_BaseTroops'](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x3ea469(0x96b)]();},Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x5bf)]=function(){const _0x4e9e7b=_0x44ae36;if(VisuMZ['ParseAllNotetags'])return;this[_0x4e9e7b(0x53d)](),this[_0x4e9e7b(0x2a2)](),this[_0x4e9e7b(0x6a4)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x194ce5=_0x44ae36,_0x7b6155=$dataSystem[_0x194ce5(0x644)][_0x194ce5(0x2d9)];for(let _0x58b827=0x0;_0x58b827<_0x7b6155;_0x58b827++){const _0x25f64e=$dataSystem['attackMotions'][_0x58b827];if(_0x25f64e)continue;$dataSystem[_0x194ce5(0x941)][_0x58b827]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x46d)]=function(){const _0x373d23=_0x44ae36,_0x35b2e6=VisuMZ[_0x373d23(0x851)][_0x373d23(0xa08)];_0x35b2e6['Damage'][_0x373d23(0xa89)]===undefined&&(_0x35b2e6[_0x373d23(0xff)][_0x373d23(0xa89)]=_0x373d23(0xb17)),_0x35b2e6[_0x373d23(0x908)][_0x373d23(0x525)]===undefined&&(_0x35b2e6[_0x373d23(0x908)][_0x373d23(0x525)]=![]),_0x35b2e6['Enemy'][_0x373d23(0x525)]===undefined&&(_0x35b2e6[_0x373d23(0x2e0)][_0x373d23(0x525)]=!![]),_0x35b2e6[_0x373d23(0x908)][_0x373d23(0xaa4)]===undefined&&(_0x35b2e6[_0x373d23(0x908)][_0x373d23(0xaa4)]=![]),_0x35b2e6['Actor'][_0x373d23(0x3b2)]===undefined&&(_0x35b2e6[_0x373d23(0x908)]['PrioritySortActors']=!![]);},VisuMZ[_0x44ae36(0x639)]={},Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x307)]=function(){const _0x17d6a0=_0x44ae36;for(const _0x2a6e34 of VisuMZ[_0x17d6a0(0x851)][_0x17d6a0(0xa08)][_0x17d6a0(0xff)]['DamageStyleList']){if(!_0x2a6e34)continue;const _0x292211=_0x2a6e34[_0x17d6a0(0x928)][_0x17d6a0(0xaf2)]()[_0x17d6a0(0x9de)]();VisuMZ[_0x17d6a0(0x639)][_0x292211]=_0x2a6e34;}},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x808)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x3356aa=_0x44ae36,_0x3e6c86=VisuMZ[_0x3356aa(0x851)][_0x3356aa(0x808)],_0x22ba8b=_0x3356aa(0x887),_0xe978f=[[_0x3356aa(0x4b8),'PRE-'],[_0x3356aa(0x825),_0x3356aa(0x146)]],_0x45e29a=[[_0x3356aa(0x19e),_0x3356aa(0x3e9)],[_0x3356aa(0x454),_0x3356aa(0x7dd)]],_0x385f7b=[['',''],[_0x3356aa(0x98f),_0x3356aa(0x324)],[_0x3356aa(0xbac),_0x3356aa(0xab6)]];for(const _0x2997b5 of _0x45e29a){for(const _0x4e183d of _0x385f7b){for(const _0x466977 of _0xe978f){const _0x304696=_0x2997b5[0x0][_0x3356aa(0x4be)](_0x466977[0x0],_0x4e183d[0x0]),_0x5ad40b=_0x2997b5[0x1][_0x3356aa(0x4be)](_0x466977[0x1],_0x4e183d[0x1])[_0x3356aa(0x9de)](),_0x245ef0=new RegExp(_0x22ba8b[_0x3356aa(0x4be)](_0x5ad40b),'i');_0x3e6c86[_0x304696]=_0x245ef0;}}}const _0x55700a=[[_0x3356aa(0x8ee),_0x3356aa(0x989)],[_0x3356aa(0x5d3),_0x3356aa(0x4a9)]];for(const _0x43bba5 of _0x55700a){for(const _0x581096 of _0xe978f){const _0x42ca5b=_0x43bba5[0x0]['format'](_0x581096[0x0]),_0x8642b7=_0x43bba5[0x1][_0x3356aa(0x4be)](_0x581096[0x1]),_0x3964c0=new RegExp(_0x22ba8b[_0x3356aa(0x4be)](_0x8642b7),'i');_0x3e6c86[_0x42ca5b]=_0x3964c0;}}const _0x5e387c=[[_0x3356aa(0x5fa),_0x3356aa(0xbe1)],[_0x3356aa(0x730),'JS\x20%1END\x20BATTLE'],[_0x3356aa(0xb49),'JS\x20BATTLE\x20VICTORY'],[_0x3356aa(0x3c1),_0x3356aa(0x211)],[_0x3356aa(0x4a2),'JS\x20ESCAPE\x20SUCCESS'],[_0x3356aa(0x1ca),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x3356aa(0x4fc)],[_0x3356aa(0x190),'JS\x20%1END\x20TURN'],[_0x3356aa(0xa7e),'JS\x20%1REGENERATE']];for(const _0xb14323 of _0x5e387c){for(const _0x253b90 of _0xe978f){const _0xd318cd=_0xb14323[0x0][_0x3356aa(0x4be)](_0x253b90[0x0]),_0x3e7ef4=_0xb14323[0x1][_0x3356aa(0x4be)](_0x253b90[0x1]),_0x2f8b17=new RegExp(_0x22ba8b[_0x3356aa(0x4be)](_0x3e7ef4),'i');_0x3e6c86[_0xd318cd]=_0x2f8b17;}}},Scene_Boot['prototype'][_0x44ae36(0x53d)]=function(){const _0x526e7d=$dataSkills['concat']($dataItems);for(const _0xb98479 of _0x526e7d){if(!_0xb98479)continue;VisuMZ['BattleCore']['Parse_Notetags_Action'](_0xb98479);}},Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x2a2)]=function(){const _0x58f5bc=_0x44ae36,_0x3c422a=$dataActors[_0x58f5bc(0x738)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x123473 of _0x3c422a){if(!_0x123473)continue;VisuMZ[_0x58f5bc(0x851)][_0x58f5bc(0x927)](_0x123473),_0x123473[_0x58f5bc(0x910)]!==undefined&&VisuMZ[_0x58f5bc(0x851)]['Parse_Notetags_HelpDescription'](_0x123473);}},Scene_Boot[_0x44ae36(0x137)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x5a5783=_0x44ae36,_0x3f1f23=VisuMZ[_0x5a5783(0x851)][_0x5a5783(0xa08)][_0x5a5783(0x3ae)][_0x5a5783(0x4fb)],_0x563a8b=[];for(const _0xb2c7d1 of _0x3f1f23){const _0x4c6517=$dataTroops[_0xb2c7d1];if(_0x4c6517)_0x563a8b[_0x5a5783(0xa04)](JsonEx[_0x5a5783(0x22b)](_0x4c6517));}for(const _0x12813c of $dataTroops){if(!_0x12813c)continue;for(const _0xcc087f of _0x563a8b){if(_0xcc087f['id']===_0x12813c['id'])continue;_0x12813c[_0x5a5783(0x849)]=_0x12813c[_0x5a5783(0x849)]['concat'](_0xcc087f[_0x5a5783(0x849)]);}}},Scene_Boot[_0x44ae36(0x137)][_0x44ae36(0x611)]=function(){const _0x228b94=_0x44ae36,_0x473ab5=VisuMZ[_0x228b94(0x851)]['Settings'][_0x228b94(0x3ae)];if(_0x473ab5[_0x228b94(0x1c9)]>0x0&&$dataCommonEvents[_0x473ab5[_0x228b94(0x1c9)]]){const _0x1dd4ba=$dataCommonEvents[_0x473ab5[_0x228b94(0x1c9)]],_0x3abc59=_0x1dd4ba[_0x228b94(0xb29)][_0x228b94(0x2d9)]-0x2,_0x54c68b=_0x1dd4ba[_0x228b94(0xb29)][_0x3abc59];if(_0x54c68b&&_0x54c68b[_0x228b94(0x741)]!==0xe6){const _0x16e6b8={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x9d0e0=_0x1dd4ba[_0x228b94(0xb29)]['pop']();_0x1dd4ba[_0x228b94(0xb29)][_0x228b94(0xa21)](_0x16e6b8),_0x1dd4ba['list'][_0x228b94(0xa21)](_0x9d0e0);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x490a63=_0x44ae36;VisuMZ[_0x490a63(0x851)][_0x490a63(0x9db)](),VisuMZ[_0x490a63(0x851)][_0x490a63(0xbd9)]($dataSkills),VisuMZ[_0x490a63(0x851)][_0x490a63(0xbd9)]($dataItems);},VisuMZ['BattleCore'][_0x44ae36(0x9db)]=function(){const _0x1ff148=_0x44ae36;VisuMZ[_0x1ff148(0x851)][_0x1ff148(0x7c3)]={};for(const _0x222e1d of $dataCommonEvents){if(!_0x222e1d)continue;if(_0x222e1d[_0x1ff148(0x674)][_0x1ff148(0x54f)](/\[(.*)\]/i)){let _0x20c0fe=String(RegExp['$1'])['replace'](/,/g,'')[_0x1ff148(0xaf2)]()['trim']();VisuMZ[_0x1ff148(0x851)][_0x1ff148(0x7c3)][_0x20c0fe]=_0x222e1d['id'];}}},VisuMZ['BattleCore'][_0x44ae36(0xbd9)]=function(_0x38d4a0){const _0x38754d=_0x44ae36;for(const _0x140e42 of _0x38d4a0){if(!_0x140e42)continue;VisuMZ[_0x38754d(0x851)][_0x38754d(0xb7e)](_0x140e42);}},VisuMZ['BattleCore'][_0x44ae36(0xb7e)]=function(_0x497be3){const _0x1dff0f=_0x44ae36;if(!_0x497be3)return;if(!_0x497be3['effects'])return;VisuMZ['BattleCore'][_0x1dff0f(0x7c3)]=VisuMZ['BattleCore'][_0x1dff0f(0x7c3)]||{};const _0x9e97f2=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x3194b2=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x52f74c=[];const _0x3e7244=_0x497be3[_0x1dff0f(0x903)][_0x1dff0f(0x54f)](_0x9e97f2);if(_0x3e7244){for(const _0x57d456 of _0x3e7244){_0x57d456['match'](_0x9e97f2);const _0x4f028b=String(RegExp['$1'])[_0x1dff0f(0x8c4)](',')['map'](_0x3ca3e2=>String(_0x3ca3e2)[_0x1dff0f(0xaf2)]()['trim']());_0x52f74c=_0x52f74c['concat'](_0x4f028b);}!_0x497be3[_0x1dff0f(0x903)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x497be3[_0x1dff0f(0x903)]+=_0x1dff0f(0x746));;}if(_0x497be3[_0x1dff0f(0x903)][_0x1dff0f(0x54f)](_0x3194b2)){const _0x469ed2=String(RegExp['$1'])[_0x1dff0f(0x8c4)](/[\r\n]+/)[_0x1dff0f(0x6e5)](_0x421076=>String(_0x421076)[_0x1dff0f(0xaf2)]()['trim']());_0x52f74c=_0x52f74c[_0x1dff0f(0x738)](_0x469ed2);!_0x497be3[_0x1dff0f(0x903)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x497be3['note']+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x3f0c15 of _0x52f74c){if(VisuMZ[_0x1dff0f(0x851)]['_commonEventKey'][_0x3f0c15]){const _0x4ee1c9=VisuMZ[_0x1dff0f(0x851)][_0x1dff0f(0x7c3)][_0x3f0c15],_0x26544e={'code':0x2c,'dataId':_0x4ee1c9,'value1':0x1,'value2':0x0};_0x497be3[_0x1dff0f(0x7cb)][_0x1dff0f(0xa04)](_0x26544e);}}},Scene_Boot[_0x44ae36(0x137)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x5e79f9=_0x44ae36,_0xa21dba=$dataSkills[_0x5e79f9(0x738)]($dataItems);for(const _0x45a8d2 of _0xa21dba){if(!_0x45a8d2)continue;VisuMZ[_0x5e79f9(0x851)][_0x5e79f9(0x708)](_0x45a8d2);}},VisuMZ['BattleCore'][_0x44ae36(0x191)]=VisuMZ[_0x44ae36(0x191)],VisuMZ[_0x44ae36(0x191)]=function(_0x42219f){const _0x9c61d9=_0x44ae36;VisuMZ[_0x9c61d9(0x851)][_0x9c61d9(0x191)]&&VisuMZ[_0x9c61d9(0x851)][_0x9c61d9(0x191)][_0x9c61d9(0x689)](this,_0x42219f),VisuMZ['BattleCore'][_0x9c61d9(0x927)](_0x42219f);},VisuMZ['BattleCore']['ParseClassNotetags']=VisuMZ[_0x44ae36(0x82e)],VisuMZ[_0x44ae36(0x82e)]=function(_0xe5c678){const _0xa17491=_0x44ae36;VisuMZ[_0xa17491(0x851)]['ParseClassNotetags']&&VisuMZ[_0xa17491(0x851)][_0xa17491(0x82e)][_0xa17491(0x689)](this,_0xe5c678),VisuMZ['BattleCore'][_0xa17491(0x927)](_0xe5c678);},VisuMZ[_0x44ae36(0x851)]['ParseSkillNotetags']=VisuMZ[_0x44ae36(0x8e6)],VisuMZ[_0x44ae36(0x8e6)]=function(_0x117c52){const _0x596552=_0x44ae36;VisuMZ['BattleCore'][_0x596552(0x8e6)]&&VisuMZ['BattleCore'][_0x596552(0x8e6)]['call'](this,_0x117c52),VisuMZ[_0x596552(0x851)][_0x596552(0xdf)](_0x117c52),VisuMZ[_0x596552(0x851)]['Parse_Notetags_Targets'](_0x117c52);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6c2)]=VisuMZ['ParseItemNotetags'],VisuMZ['ParseItemNotetags']=function(_0x2cbb57){const _0x1f1b50=_0x44ae36;VisuMZ[_0x1f1b50(0x851)]['ParseItemNotetags']&&VisuMZ[_0x1f1b50(0x851)][_0x1f1b50(0x6c2)]['call'](this,_0x2cbb57),VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x2cbb57),VisuMZ['BattleCore'][_0x1f1b50(0x708)](_0x2cbb57);},VisuMZ['BattleCore'][_0x44ae36(0x96d)]=VisuMZ[_0x44ae36(0x96d)],VisuMZ[_0x44ae36(0x96d)]=function(_0x57caa8){const _0xc9b411=_0x44ae36;VisuMZ['BattleCore'][_0xc9b411(0x96d)]&&VisuMZ['BattleCore'][_0xc9b411(0x96d)]['call'](this,_0x57caa8),VisuMZ[_0xc9b411(0x851)][_0xc9b411(0x927)](_0x57caa8);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x831)]=VisuMZ['ParseArmorNotetags'],VisuMZ['ParseArmorNotetags']=function(_0x31e498){const _0x3acdc8=_0x44ae36;VisuMZ[_0x3acdc8(0x851)]['ParseArmorNotetags']&&VisuMZ[_0x3acdc8(0x851)][_0x3acdc8(0x831)]['call'](this,_0x31e498),VisuMZ[_0x3acdc8(0x851)][_0x3acdc8(0x927)](_0x31e498);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1a7)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x44ae36(0x1a7)]=function(_0xe36d8c){const _0x17aa9e=_0x44ae36;VisuMZ[_0x17aa9e(0x851)][_0x17aa9e(0x1a7)]&&VisuMZ[_0x17aa9e(0x851)][_0x17aa9e(0x1a7)]['call'](this,_0xe36d8c),VisuMZ[_0x17aa9e(0x851)][_0x17aa9e(0x927)](_0xe36d8c);},VisuMZ['BattleCore'][_0x44ae36(0x6a0)]=VisuMZ[_0x44ae36(0x6a0)],VisuMZ[_0x44ae36(0x6a0)]=function(_0x425b14){const _0x2cff16=_0x44ae36;VisuMZ[_0x2cff16(0x851)][_0x2cff16(0x6a0)]&&VisuMZ[_0x2cff16(0x851)][_0x2cff16(0x6a0)][_0x2cff16(0x689)](this,_0x425b14),VisuMZ[_0x2cff16(0x851)][_0x2cff16(0x927)](_0x425b14),VisuMZ['BattleCore'][_0x2cff16(0x144)](_0x425b14);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xdf)]=function(_0x1d9bb5){const _0x49e06b=_0x44ae36,_0x73109a=[_0x49e06b(0x83a),'PostApplyJS','PreDamageJS','PostDamageJS',_0x49e06b(0x890),_0x49e06b(0x46c),_0x49e06b(0x1d5),'PostEndActionJS'];for(const _0x35c982 of _0x73109a){VisuMZ[_0x49e06b(0x851)][_0x49e06b(0x2fd)](_0x1d9bb5,_0x35c982);}const _0x5acf00=_0x1d9bb5[_0x49e06b(0x903)];_0x5acf00['match'](/<ALWAYS CRITICAL/i)&&(_0x1d9bb5[_0x49e06b(0x971)][_0x49e06b(0x38e)]=!![]),_0x5acf00[_0x49e06b(0x54f)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x1d9bb5[_0x49e06b(0x205)]=Math[_0x49e06b(0x131)](0x1,Number(RegExp['$1']))),_0x5acf00['match'](/<TARGET:[ ](.*)>/i)&&(_0x1d9bb5['scope']=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x927)]=function(_0x91afb2){const _0x3a270e=_0x44ae36,_0x2d01fb=[_0x3a270e(0x487),_0x3a270e(0x777),_0x3a270e(0x536),'PostDamageAsUserJS',_0x3a270e(0xacb),_0x3a270e(0xa82),_0x3a270e(0x584),'PostDamageAsTargetJS','PreStartActionJS',_0x3a270e(0x46c),_0x3a270e(0x1d5),_0x3a270e(0xcb),'PreStartBattleJS',_0x3a270e(0x8c1),_0x3a270e(0x3b0),_0x3a270e(0x207),_0x3a270e(0xb49),'BattleDefeatJS','EscapeSuccessJS','EscapeFailureJS','PreStartTurnJS',_0x3a270e(0x92a),_0x3a270e(0x913),_0x3a270e(0x8c7),_0x3a270e(0xa41),_0x3a270e(0x824)];for(const _0x23c357 of _0x2d01fb){VisuMZ['BattleCore']['createJS'](_0x91afb2,_0x23c357);}const _0x44aba3=[_0x3a270e(0x5ce),_0x3a270e(0x774),_0x3a270e(0x16f),'jsCritRateAsUser','jsCritRateAsTarget'];for(const _0x39a4bd of _0x44aba3){VisuMZ[_0x3a270e(0x851)][_0x3a270e(0x7b7)](_0x91afb2,_0x39a4bd);}},VisuMZ['BattleCore'][_0x44ae36(0x708)]=function(_0x54c88b){const _0x575031=_0x44ae36,_0x749c4f=_0x54c88b[_0x575031(0x903)];if(_0x749c4f[_0x575031(0x54f)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x340c4e=String(RegExp['$1']),_0x17accb=VisuMZ[_0x575031(0x851)][_0x575031(0x554)](_0x54c88b,_0x575031(0x158));VisuMZ[_0x575031(0x851)][_0x575031(0x5ef)](_0x340c4e,_0x17accb);}if(_0x749c4f[_0x575031(0x54f)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4fc967=String(RegExp['$1']),_0x309b35=VisuMZ[_0x575031(0x851)]['createKeyJS'](_0x54c88b,_0x575031(0x161));VisuMZ['BattleCore'][_0x575031(0x34a)](_0x4fc967,_0x309b35);}},VisuMZ['BattleCore']['JS']={},VisuMZ['BattleCore'][_0x44ae36(0x2fd)]=function(_0xcafec0,_0x271589){const _0x444c23=_0x44ae36,_0x3d72e5=_0xcafec0[_0x444c23(0x903)];if(_0x3d72e5[_0x444c23(0x54f)](VisuMZ[_0x444c23(0x851)][_0x444c23(0x808)][_0x271589])){const _0x3fd83f=RegExp['$1'],_0x138df7='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x444c23(0x4be)](_0x3fd83f),_0x15fac2=VisuMZ[_0x444c23(0x851)][_0x444c23(0x554)](_0xcafec0,_0x271589);VisuMZ[_0x444c23(0x851)]['JS'][_0x15fac2]=new Function(_0x138df7);}},VisuMZ[_0x44ae36(0x851)]['createKeyJS']=function(_0x175f3c,_0x291a7e){const _0x286a9a=_0x44ae36;if(VisuMZ['createKeyJS'])return VisuMZ[_0x286a9a(0x554)](_0x175f3c,_0x291a7e);let _0x1266fa='';if($dataActors[_0x286a9a(0x76b)](_0x175f3c))_0x1266fa=_0x286a9a(0x234)[_0x286a9a(0x4be)](_0x175f3c['id'],_0x291a7e);if($dataClasses[_0x286a9a(0x76b)](_0x175f3c))_0x1266fa=_0x286a9a(0xabb)['format'](_0x175f3c['id'],_0x291a7e);if($dataSkills[_0x286a9a(0x76b)](_0x175f3c))_0x1266fa=_0x286a9a(0x559)['format'](_0x175f3c['id'],_0x291a7e);if($dataItems[_0x286a9a(0x76b)](_0x175f3c))_0x1266fa=_0x286a9a(0x893)[_0x286a9a(0x4be)](_0x175f3c['id'],_0x291a7e);if($dataWeapons[_0x286a9a(0x76b)](_0x175f3c))_0x1266fa=_0x286a9a(0x8dc)['format'](_0x175f3c['id'],_0x291a7e);if($dataArmors[_0x286a9a(0x76b)](_0x175f3c))_0x1266fa=_0x286a9a(0x3fa)[_0x286a9a(0x4be)](_0x175f3c['id'],_0x291a7e);if($dataEnemies['includes'](_0x175f3c))_0x1266fa=_0x286a9a(0x95e)[_0x286a9a(0x4be)](_0x175f3c['id'],_0x291a7e);if($dataStates['includes'](_0x175f3c))_0x1266fa=_0x286a9a(0x26e)['format'](_0x175f3c['id'],_0x291a7e);return _0x1266fa;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x5ef)]=function(_0x845d14,_0x4cea06){const _0x5c1523=_0x44ae36,_0x325efe=_0x5c1523(0xac8)[_0x5c1523(0x4be)](_0x845d14);VisuMZ['BattleCore']['JS'][_0x4cea06]=new Function(_0x325efe);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x34a)]=function(_0x41dbb3,_0x59b5c2){const _0x12409f=_0x44ae36,_0x1ba06a=_0x12409f(0x2f7)['format'](_0x41dbb3);VisuMZ[_0x12409f(0x851)]['JS'][_0x59b5c2]=new Function(_0x1ba06a);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x7b7)]=function(_0x24c255,_0x56c697){const _0xabd3f2=_0x44ae36,_0x148568=_0x24c255[_0xabd3f2(0x903)];if(_0x148568[_0xabd3f2(0x54f)](VisuMZ['BattleCore']['RegExp'][_0x56c697])){const _0xb7f97=RegExp['$1'],_0x38d75c=_0xabd3f2(0x9a5)[_0xabd3f2(0x4be)](_0xb7f97),_0x31a0ee=VisuMZ[_0xabd3f2(0x851)][_0xabd3f2(0x554)](_0x24c255,_0x56c697);VisuMZ[_0xabd3f2(0x851)]['JS'][_0x31a0ee]=new Function(_0x38d75c);}},VisuMZ['BattleCore'][_0x44ae36(0x144)]=function(_0x3a31d8){const _0x15de9c=_0x44ae36;_0x3a31d8[_0x15de9c(0x709)]='-';const _0x10fc2f=_0x3a31d8[_0x15de9c(0x903)];_0x10fc2f[_0x15de9c(0x54f)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x3a31d8[_0x15de9c(0x709)]=String(RegExp['$1'])['trim']()),_0x10fc2f['match'](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x3a31d8[_0x15de9c(0xb15)]=String(RegExp['$1'])[_0x15de9c(0x9de)]()),_0x10fc2f[_0x15de9c(0x54f)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x3a31d8['excludeListing']=!![]);},TextManager[_0x44ae36(0x90b)]=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x8cd)][_0x44ae36(0x3cd)],TextManager['autoBattleStart']=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0xa30)][_0x44ae36(0x585)],TextManager[_0x44ae36(0x4f6)]=VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0xa30)]['StyleName'],TextManager[_0x44ae36(0x8f5)]=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x56f)][_0x44ae36(0x928)],ColorManager['getColor']=function(_0x84ab1f){const _0x512c7d=_0x44ae36;return _0x84ab1f=String(_0x84ab1f),_0x84ab1f[_0x512c7d(0x54f)](/#(.*)/i)?_0x512c7d(0x493)[_0x512c7d(0x4be)](String(RegExp['$1'])):this[_0x512c7d(0x481)](Number(_0x84ab1f));},DataManager[_0x44ae36(0x876)]=function(_0x477f0c){const _0x110a4a=_0x44ae36;if(_0x477f0c[_0x110a4a(0x903)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x23b038=String(RegExp['$1'])['toUpperCase']()['trim']();if(_0x23b038===_0x110a4a(0x61a))return _0x110a4a(0x61a);if(VisuMZ[_0x110a4a(0x639)][_0x23b038])return _0x23b038;}const _0x2156a4=VisuMZ['BattleCore'][_0x110a4a(0xa08)][_0x110a4a(0xff)][_0x110a4a(0x686)][_0x110a4a(0xaf2)]()['trim']();if(VisuMZ['DamageStyles'][_0x2156a4])return _0x2156a4;return'MANUAL';},DataManager['getStypeIdWithName']=function(_0x157acf){const _0x5da639=_0x44ae36;_0x157acf=_0x157acf[_0x5da639(0xaf2)]()['trim'](),this[_0x5da639(0x830)]=this[_0x5da639(0x830)]||{};if(this[_0x5da639(0x830)][_0x157acf])return this[_0x5da639(0x830)][_0x157acf];for(let _0x2490a0=0x1;_0x2490a0<0x64;_0x2490a0++){if(!$dataSystem[_0x5da639(0x304)][_0x2490a0])continue;let _0x5bd8c5=$dataSystem[_0x5da639(0x304)][_0x2490a0][_0x5da639(0xaf2)]()[_0x5da639(0x9de)]();_0x5bd8c5=_0x5bd8c5[_0x5da639(0xae9)](/\x1I\[(\d+)\]/gi,''),_0x5bd8c5=_0x5bd8c5[_0x5da639(0xae9)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x5bd8c5]=_0x2490a0;}return this['_stypeIDs'][_0x157acf]||0x0;},DataManager[_0x44ae36(0x6db)]=function(_0x4c394a){const _0x2c011f=_0x44ae36;_0x4c394a=_0x4c394a[_0x2c011f(0xaf2)]()[_0x2c011f(0x9de)](),this[_0x2c011f(0x280)]=this[_0x2c011f(0x280)]||{};if(this['_skillIDs'][_0x4c394a])return this[_0x2c011f(0x280)][_0x4c394a];for(const _0x4ac5dc of $dataSkills){if(!_0x4ac5dc)continue;this[_0x2c011f(0x280)][_0x4ac5dc[_0x2c011f(0x674)][_0x2c011f(0xaf2)]()[_0x2c011f(0x9de)]()]=_0x4ac5dc['id'];}return this[_0x2c011f(0x280)][_0x4c394a]||0x0;},DataManager[_0x44ae36(0x24a)]=function(_0x5c73cf){const _0x292998=_0x44ae36;_0x5c73cf=_0x5c73cf['toUpperCase']()[_0x292998(0x9de)](),this[_0x292998(0x43f)]=this[_0x292998(0x43f)]||{};if(this[_0x292998(0x43f)][_0x5c73cf])return this[_0x292998(0x43f)][_0x5c73cf];for(const _0x15305e of $dataEnemies){if(!_0x15305e)continue;this[_0x292998(0x43f)][_0x15305e[_0x292998(0x674)][_0x292998(0xaf2)]()[_0x292998(0x9de)]()]=_0x15305e['id'];}return this[_0x292998(0x43f)][_0x5c73cf]||0x0;},DataManager[_0x44ae36(0x110)]=function(_0x213de2){const _0x597493=_0x44ae36;_0x213de2=_0x213de2[_0x597493(0xaf2)]()[_0x597493(0x9de)](),this[_0x597493(0xbf6)]=this['_wtypeIDs']||{};if(this[_0x597493(0xbf6)][_0x213de2])return this['_wtypeIDs'][_0x213de2];for(let _0x564baa=0x1;_0x564baa<0x64;_0x564baa++){if(!$dataSystem['weaponTypes'][_0x564baa])continue;let _0x1131f3=$dataSystem['weaponTypes'][_0x564baa]['toUpperCase']()['trim']();_0x1131f3=_0x1131f3[_0x597493(0xae9)](/\x1I\[(\d+)\]/gi,''),_0x1131f3=_0x1131f3[_0x597493(0xae9)](/\\I\[(\d+)\]/gi,''),this[_0x597493(0xbf6)][_0x1131f3]=_0x564baa;}return this['_wtypeIDs'][_0x597493(0x35f)]=0x0,this[_0x597493(0xbf6)][_0x213de2]||0x0;},DataManager[_0x44ae36(0x9c3)]=function(_0x576450){const _0x4e1920=_0x44ae36,_0x5eeca8=_0x4e1920(0xee);let _0x29bc43=_0x576450[_0x4e1920(0x426)],_0x5a610f=_0x576450[_0x4e1920(0x674)];const _0x2a2ea8=_0x576450[_0x4e1920(0x903)];return _0x2a2ea8[_0x4e1920(0x54f)](/<DISPLAY ICON: (\d+)>/i)&&(_0x29bc43=Number(RegExp['$1'])),_0x2a2ea8[_0x4e1920(0x54f)](/<DISPLAY TEXT: (.*)>/i)&&(_0x5a610f=String(RegExp['$1'])),_0x5eeca8[_0x4e1920(0x4be)](_0x29bc43,_0x5a610f);},DataManager['battleCommandName']=function(_0x5902b2){const _0x2ba714=_0x44ae36;return _0x5902b2[_0x2ba714(0x903)]['match'](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x5902b2[_0x2ba714(0x674)];},DataManager[_0x44ae36(0x298)]=function(_0x1a7815){const _0x53b5ab=_0x44ae36;return _0x1a7815[_0x53b5ab(0x903)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x1a7815['iconIndex'];},DataManager['swapEnemyIDs']=function(_0x2110bb){const _0x3c3733=_0x44ae36,_0x55909e=$dataEnemies[_0x2110bb];if(_0x55909e){if(_0x55909e['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1d751d=String(RegExp['$1'])[_0x3c3733(0x8c4)](/[\r\n]+/)['remove'](''),_0x4e8ca7=this[_0x3c3733(0x4bf)](_0x1d751d);_0x2110bb=this[_0x3c3733(0x24a)](_0x4e8ca7)||_0x2110bb,_0x2110bb=DataManager[_0x3c3733(0x25c)](_0x2110bb);}}return _0x2110bb;},DataManager['processRandomizedData']=function(_0x5dd524){const _0x162054=_0x44ae36;let _0x3e56e6=0x0;const _0x5e91aa={};for(const _0x254c5f of _0x5dd524){if(_0x254c5f['match'](/(.*):[ ](\d+)/i)){const _0x597d10=String(RegExp['$1'])['trim'](),_0x3577e0=Number(RegExp['$2']);_0x5e91aa[_0x597d10]=_0x3577e0,_0x3e56e6+=_0x3577e0;}else{if(_0x254c5f[_0x162054(0x54f)](/(.*):[ ](\d+\.?\d+)/i)){const _0x1965aa=String(RegExp['$1'])[_0x162054(0x9de)](),_0x342885=Number(RegExp['$2']);_0x5e91aa[_0x1965aa]=_0x342885,_0x3e56e6+=_0x342885;}else _0x254c5f!==''&&(_0x5e91aa[_0x254c5f]=0x1,_0x3e56e6++);}}if(_0x3e56e6<=0x0)return'';let _0x41a8e1=Math[_0x162054(0x38d)]()*_0x3e56e6;for(const _0x6aee97 in _0x5e91aa){_0x41a8e1-=_0x5e91aa[_0x6aee97];if(_0x41a8e1<=0x0)return _0x6aee97;}return'';},DataManager[_0x44ae36(0x4b0)]=function(_0x570f5e){const _0x3bc5ce=_0x44ae36;if(!_0x570f5e)return![];if(!VisuMZ[_0x3bc5ce(0x851)][_0x3bc5ce(0xa08)][_0x3bc5ce(0x512)][_0x3bc5ce(0xa44)])return![];if(_0x570f5e[_0x3bc5ce(0x903)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x570f5e['note'][_0x3bc5ce(0x54f)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0xc24a39 of _0x570f5e[_0x3bc5ce(0x7cb)]){if(!_0xc24a39)continue;if(_0xc24a39[_0x3bc5ce(0x741)]===Game_Action[_0x3bc5ce(0x2ae)])return!![];}return![];},DataManager['createTroopNote']=function(_0x1e4062){const _0x2e2046=_0x44ae36,_0x518609=$dataTroops[_0x1e4062];if(!_0x518609)return'';let _0x48eb96='';_0x48eb96+=_0x518609[_0x2e2046(0x674)];for(const _0x504a30 of _0x518609[_0x2e2046(0x849)]){for(const _0x363e6a of _0x504a30[_0x2e2046(0xb29)]){[0x6c,0x198]['includes'](_0x363e6a[_0x2e2046(0x741)])&&(_0x48eb96+='\x0a',_0x48eb96+=_0x363e6a[_0x2e2046(0x1fa)][0x0]);}}return _0x48eb96;},ConfigManager[_0x44ae36(0x59a)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x44ae36(0xe5)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager['visualHpGauge']=ConfigManager[_0x44ae36(0x8f5)]??!![],VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x670)]=ConfigManager['makeData'],ConfigManager[_0x44ae36(0xb06)]=function(){const _0x204430=_0x44ae36,_0x150b54=VisuMZ[_0x204430(0x851)][_0x204430(0x670)]['call'](this);return _0x150b54[_0x204430(0x59a)]=this[_0x204430(0x59a)],_0x150b54[_0x204430(0xe5)]=this[_0x204430(0xe5)],_0x150b54[_0x204430(0x8f5)]=this[_0x204430(0x8f5)],_0x150b54;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x561)]=ConfigManager[_0x44ae36(0x406)],ConfigManager[_0x44ae36(0x406)]=function(_0x573f15){const _0x305012=_0x44ae36;VisuMZ['BattleCore'][_0x305012(0x561)][_0x305012(0x689)](this,_0x573f15),_0x305012(0x59a)in _0x573f15?this[_0x305012(0x59a)]=_0x573f15[_0x305012(0x59a)]:this[_0x305012(0x59a)]=![],_0x305012(0xe5)in _0x573f15?this[_0x305012(0xe5)]=_0x573f15[_0x305012(0xe5)]:this[_0x305012(0xe5)]=![],'visualHpGauge'in _0x573f15?this[_0x305012(0x8f5)]=_0x573f15[_0x305012(0x8f5)]:this[_0x305012(0x8f5)]=!![];},ImageManager[_0x44ae36(0x167)]=ImageManager[_0x44ae36(0x167)]||0x9,ImageManager[_0x44ae36(0xb99)]=ImageManager[_0x44ae36(0xb99)]||0x6,VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x291)]=BattleManager['setup'],BattleManager['setup']=function(_0x3fd942,_0x3c62c5,_0x5585ec){const _0x2b5269=_0x44ae36;VisuMZ[_0x2b5269(0x851)][_0x2b5269(0x291)][_0x2b5269(0x689)](this,_0x3fd942,_0x3c62c5,_0x5585ec),this[_0x2b5269(0x661)]={};},VisuMZ['BattleCore'][_0x44ae36(0xbe0)]=BattleManager[_0x44ae36(0x443)],BattleManager[_0x44ae36(0x443)]=function(){const _0x1e3a4e=_0x44ae36;VisuMZ[_0x1e3a4e(0x851)][_0x1e3a4e(0xbe0)][_0x1e3a4e(0x689)](this),this[_0x1e3a4e(0x439)]=[];},BattleManager[_0x44ae36(0x84e)]=function(){const _0x4cc551=_0x44ae36;if(!SceneManager[_0x4cc551(0xb75)]())return;const _0x44d720=SceneManager[_0x4cc551(0x97d)]['_statusWindow'];if(_0x44d720)_0x44d720[_0x4cc551(0x3f3)]();},BattleManager[_0x44ae36(0x227)]=function(){const _0x2ae5cc=_0x44ae36;if(BattleManager['isTpb']())return'TPB';return _0x2ae5cc(0xabe);},BattleManager[_0x44ae36(0x87d)]=function(_0x56c316){return _0x56c316=_0x56c316['toUpperCase']()['trim'](),this['battleSys']()===_0x56c316;},BattleManager[_0x44ae36(0x46f)]=function(){const _0x33c0ad=_0x44ae36;return this[_0x33c0ad(0x87d)](_0x33c0ad(0xabe));},BattleManager[_0x44ae36(0x826)]=function(){const _0x5eba0c=_0x44ae36;return this[_0x5eba0c(0x46f)]();},BattleManager[_0x44ae36(0x3da)]=function(){const _0x2adceb=_0x44ae36;return!this[_0x2adceb(0x826)]();},BattleManager[_0x44ae36(0x58c)]=function(){const _0x2bfec9=_0x44ae36;return!this[_0x2bfec9(0x826)]()&&!this['isTickBased']();},BattleManager['getBattlerFromKey']=function(_0x3c5e68){const _0x121a45=_0x44ae36;this[_0x121a45(0x661)]=this[_0x121a45(0x661)]||{};if(this['_battlerKeyCache'][_0x3c5e68]!==undefined)return this[_0x121a45(0x661)][_0x3c5e68];this[_0x121a45(0x661)][_0x3c5e68]=null;const _0x58b087=this[_0x121a45(0x765)](),_0xc7b33a=_0x58b087['find'](_0x4384b4=>_0x4384b4[_0x121a45(0x770)]()===_0x3c5e68);if(_0xc7b33a)this[_0x121a45(0x661)][_0x3c5e68]=_0xc7b33a;return this['_battlerKeyCache'][_0x3c5e68];},Game_BattlerBase[_0x44ae36(0x137)]['battlerKey']=function(){const _0x38c11b=_0x44ae36;return _0x38c11b(0x859)[_0x38c11b(0x4be)](this['isActor']()?_0x38c11b(0x2f8):_0x38c11b(0xbcb),this[_0x38c11b(0x674)]()+'-'+(this[_0x38c11b(0x30c)]()?this[_0x38c11b(0x27f)]():this[_0x38c11b(0x8b4)]()));},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x240)]=function(_0x27f5e0){const _0x4af6d7=_0x44ae36;if(this['_targetBattlerKey']!=='')return;typeof _0x27f5e0===_0x4af6d7(0x555)?this[_0x4af6d7(0x8d4)]=_0x27f5e0['toLowerCase']()[_0x4af6d7(0x9de)]():this[_0x4af6d7(0x8d4)]=_0x27f5e0['battlerKey']();},Game_Action[_0x44ae36(0x137)]['getBattlerKeyTargets']=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x44ae36(0x137)]['getSpecificBattlerKeyTarget']=function(){const _0xcc6631=_0x44ae36,_0x504303=this['_targetBattlerKey']||'',_0x5acaff=BattleManager['getBattlerFromKey'](_0x504303);if(!_0x5acaff)return this[_0xcc6631(0x75c)]();if(!_0x5acaff[_0xcc6631(0x1c1)]())return this[_0xcc6631(0x75c)]();return _0x5acaff;},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x75c)]=function(){const _0x40663b=_0x44ae36,_0x8c8720=this['_targetBattlerKey'];return _0x8c8720[_0x40663b(0x54f)](/ACTOR/i)?this[_0x40663b(0xd9)]()['trueRandomTarget']():this[_0x40663b(0x867)]()[_0x40663b(0x354)]();},BattleManager['selectedBattlers']=function(){const _0x231816=_0x44ae36;return this['allBattleMembers']()[_0x231816(0x1e5)](_0x5c159c=>_0x5c159c['isSelected']());},BattleManager[_0x44ae36(0x538)]=function(_0x54aca6){const _0x15a4c7=_0x44ae36;_0x54aca6===_0x15a4c7(0xb49)&&(this[_0x15a4c7(0x905)]=!![]),$gameParty[_0x15a4c7(0x538)](_0x54aca6),$gameTroop[_0x15a4c7(0x538)](_0x54aca6);},VisuMZ[_0x44ae36(0x851)]['BattleManager_startBattle']=BattleManager[_0x44ae36(0x71e)],BattleManager['startBattle']=function(){const _0x2f376a=_0x44ae36;this['_endBattle']=![],this['_autoBattle']=ConfigManager['autoBattleAtStart'],this[_0x2f376a(0x905)]=![],this['processBattleCoreJS'](_0x2f376a(0x20d)),VisuMZ[_0x2f376a(0x851)][_0x2f376a(0x75f)][_0x2f376a(0x689)](this),this['processBattleCoreJS'](_0x2f376a(0x8c1));},BattleManager[_0x44ae36(0x973)]=function(_0x3e8b5e){const _0x160f08=_0x44ae36,_0x259f4d=VisuMZ[_0x160f08(0x851)][_0x160f08(0xa08)][_0x160f08(0x3ae)];_0x3e8b5e!==_0x160f08(0x320)&&_0x259f4d[_0x160f08(0x149)]&&VisuMZ[_0x160f08(0x851)][_0x160f08(0x759)](_0x259f4d[_0x160f08(0x149)])&&$gameTemp['reserveCommonEvent'](_0x259f4d[_0x160f08(0x149)]);const _0x385c7c=_0x160f08(0xbcf)['format'](_0x3e8b5e);_0x259f4d[_0x385c7c]&&VisuMZ[_0x160f08(0x851)][_0x160f08(0x759)](_0x259f4d[_0x385c7c])&&$gameTemp[_0x160f08(0xab5)](_0x259f4d[_0x385c7c]);},VisuMZ['BattleCore'][_0x44ae36(0x2e1)]=BattleManager['abort'],BattleManager[_0x44ae36(0xa48)]=function(){const _0x4882f7=_0x44ae36;VisuMZ[_0x4882f7(0x851)][_0x4882f7(0x2e1)][_0x4882f7(0x689)](this),SceneManager[_0x4882f7(0xb75)]()&&BattleManager[_0x4882f7(0x4a4)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x558)]=BattleManager[_0x44ae36(0x172)],BattleManager['checkBattleEnd']=function(){const _0x80bdf4=_0x44ae36;if(this[_0x80bdf4(0xb93)]===_0x80bdf4(0x4d9)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x80bdf4(0x851)][_0x80bdf4(0x558)][_0x80bdf4(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x834)]=BattleManager[_0x44ae36(0x16c)],BattleManager[_0x44ae36(0x16c)]=function(){const _0x2f6a4e=_0x44ae36;this['_endingBattle']=!![],this[_0x2f6a4e(0x538)](_0x2f6a4e(0xb49)),VisuMZ[_0x2f6a4e(0x851)][_0x2f6a4e(0x834)][_0x2f6a4e(0x689)](this),this['processPostBattleCommonEvents'](_0x2f6a4e(0xa02));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x9d2)]=BattleManager[_0x44ae36(0x435)],BattleManager['processAbort']=function(){const _0x1739db=_0x44ae36;this[_0x1739db(0x905)]=!![],VisuMZ['BattleCore'][_0x1739db(0x9d2)][_0x1739db(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6ef)]=BattleManager[_0x44ae36(0x95b)],BattleManager[_0x44ae36(0x95b)]=function(){const _0x3e5c02=_0x44ae36;this[_0x3e5c02(0x905)]=!![],this[_0x3e5c02(0x538)](_0x3e5c02(0x3c1)),VisuMZ['BattleCore'][_0x3e5c02(0x6ef)][_0x3e5c02(0x689)](this),this[_0x3e5c02(0x973)](_0x3e5c02(0x153));},VisuMZ['BattleCore'][_0x44ae36(0x77a)]=BattleManager[_0x44ae36(0x335)],BattleManager[_0x44ae36(0x335)]=function(_0x4a32e1){const _0x40d863=_0x44ae36;this[_0x40d863(0x465)]=!![],this['_autoBattle']=![],this['processBattleCoreJS']('PreEndBattleJS'),VisuMZ[_0x40d863(0x851)]['BattleManager_endBattle']['call'](this,_0x4a32e1),this[_0x40d863(0x538)](_0x40d863(0x207));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x854)]=BattleManager[_0x44ae36(0xb33)],BattleManager['startTurn']=function(){const _0x257185=_0x44ae36;if(this['isTurnBased']())this[_0x257185(0x538)]('PreStartTurnJS');VisuMZ[_0x257185(0x851)][_0x257185(0x854)]['call'](this);if(this[_0x257185(0x826)]())this[_0x257185(0x538)](_0x257185(0x92a));},BattleManager[_0x44ae36(0x25b)]=function(){const _0x568b89=_0x44ae36,_0x310bf4=this[_0x568b89(0xb62)],_0x2722cc=_0x310bf4[_0x568b89(0x67b)]();_0x2722cc?(_0x2722cc[_0x568b89(0x233)](),_0x2722cc['isValid']()?(this[_0x568b89(0x37a)](),_0x310bf4['removeCurrentAction']()):(_0x310bf4[_0x568b89(0x4c5)](),this[_0x568b89(0x51c)]())):(this['endAction'](),this['_subject']=null);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1e7)]=BattleManager[_0x44ae36(0x37a)],BattleManager[_0x44ae36(0x37a)]=function(){const _0x49b61b=_0x44ae36,_0x116d6a=this[_0x49b61b(0xb62)][_0x49b61b(0x67b)](),_0x3ba00b=this[_0x49b61b(0xb62)];_0x116d6a&&_0x116d6a[_0x49b61b(0x7a5)]()===_0x3ba00b&&_0x116d6a[_0x49b61b(0x3ce)]('PreStartActionJS'),VisuMZ['BattleCore'][_0x49b61b(0x1e7)][_0x49b61b(0x689)](this),_0x116d6a&&_0x116d6a[_0x49b61b(0x7a5)]()===_0x3ba00b&&_0x116d6a[_0x49b61b(0x3ce)](_0x49b61b(0x46c));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x48d)]=BattleManager['endAction'],BattleManager[_0x44ae36(0x51c)]=function(){const _0x16de2b=_0x44ae36,_0x27fcf5=this[_0x16de2b(0xaca)],_0x2936b5=this[_0x16de2b(0xb62)];_0x27fcf5&&_0x27fcf5!==this[_0x16de2b(0x36b)]&&_0x27fcf5[_0x16de2b(0x7a5)]()===_0x2936b5&&_0x27fcf5[_0x16de2b(0x3ce)](_0x16de2b(0x1d5)),this[_0x16de2b(0xb62)]?VisuMZ[_0x16de2b(0x851)][_0x16de2b(0x48d)]['call'](this):this[_0x16de2b(0xb93)]='turn',_0x27fcf5&&_0x27fcf5!==this[_0x16de2b(0x36b)]&&_0x27fcf5['subject']()===_0x2936b5&&_0x27fcf5[_0x16de2b(0x3ce)]('PostEndActionJS'),this[_0x16de2b(0x214)](this['allBattleMembers']()),this[_0x16de2b(0x36b)]=this[_0x16de2b(0xaca)];},BattleManager[_0x44ae36(0x214)]=function(_0x520b1a){const _0x5896c1=_0x44ae36;for(const _0x4ac0dd of _0x520b1a){if(!_0x4ac0dd)continue;if(!_0x4ac0dd[_0x5896c1(0x7ef)]())continue;_0x4ac0dd[_0x5896c1(0x7ef)]()['refreshMotion']();}},BattleManager[_0x44ae36(0xb9f)]=function(){const _0x28a1c7=_0x44ae36;!this[_0x28a1c7(0x551)][_0x28a1c7(0xa5f)]()&&this[_0x28a1c7(0x51c)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xaf5)]=function(){const _0x2d3d5c=_0x44ae36;this['clearResult']();if(Imported[_0x2d3d5c(0x9a3)]){const _0x4ec899=VisuMZ['SkillsStatesCore'][_0x2d3d5c(0xa08)][_0x2d3d5c(0xa86)];_0x4ec899&&_0x4ec899[_0x2d3d5c(0x382)]===![]&&this[_0x2d3d5c(0x6f6)](0x1);}else this[_0x2d3d5c(0x6f6)](0x1);this[_0x2d3d5c(0xbce)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x11a)]=BattleManager[_0x44ae36(0xb95)],BattleManager[_0x44ae36(0xb95)]=function(_0x72132c,_0xfba75b){const _0x55dfd1=_0x44ae36;this['_bypassCanCounterCheck']=!![],VisuMZ['BattleCore']['BattleManager_invokeCounterAttack'][_0x55dfd1(0x689)](this,_0x72132c,_0xfba75b),this[_0x55dfd1(0x2f9)]=undefined;},BattleManager['makeEscapeRatio']=function(){const _0x419883=_0x44ae36;this[_0x419883(0x319)]=VisuMZ[_0x419883(0x851)]['Settings'][_0x419883(0x3ae)][_0x419883(0x85f)][_0x419883(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x2ad)]=BattleManager[_0x44ae36(0x2f3)],BattleManager[_0x44ae36(0x2f3)]=function(){const _0xdf9810=_0x44ae36;this['processBattleCoreJS'](_0xdf9810(0x4a2)),BattleManager[_0xdf9810(0x4b4)][_0xdf9810(0x490)](),VisuMZ[_0xdf9810(0x851)]['BattleManager_onEscapeSuccess'][_0xdf9810(0x689)](this),this[_0xdf9810(0x973)](_0xdf9810(0x94c));},VisuMZ['BattleCore']['BattleManager_onEscapeFailure']=BattleManager[_0x44ae36(0x6e8)],BattleManager[_0x44ae36(0x6e8)]=function(){const _0x471c61=_0x44ae36;this['processBattleCoreJS'](_0x471c61(0x1ca));const _0x1b121b=this[_0x471c61(0x319)];VisuMZ[_0x471c61(0x851)]['BattleManager_onEscapeFailure'][_0x471c61(0x689)](this),this[_0x471c61(0x319)]=_0x1b121b+VisuMZ[_0x471c61(0x851)][_0x471c61(0xa08)][_0x471c61(0x3ae)][_0x471c61(0x6c5)][_0x471c61(0x689)](this),this[_0x471c61(0x772)]=![],this[_0x471c61(0x973)](_0x471c61(0x320));},BattleManager[_0x44ae36(0x9bf)]=function(){const _0x5dd0cd=_0x44ae36;let _0x5d7851=![];if(this[_0x5dd0cd(0x38a)]())for(const _0x211e0b of $gameTroop[_0x5dd0cd(0x613)]()){this['_logWindow'][_0x5dd0cd(0xa04)]('addText',TextManager[_0x5dd0cd(0x50b)][_0x5dd0cd(0x4be)](_0x211e0b)),this['_logWindow'][_0x5dd0cd(0xa04)](_0x5dd0cd(0x26f)),_0x5d7851=!![];}if(this[_0x5dd0cd(0xb5b)])this[_0x5dd0cd(0x551)][_0x5dd0cd(0xa04)](_0x5dd0cd(0x91d),TextManager['preemptive'][_0x5dd0cd(0x4be)]($gameParty[_0x5dd0cd(0x674)]())),this[_0x5dd0cd(0x551)][_0x5dd0cd(0xa04)](_0x5dd0cd(0x26f));else this[_0x5dd0cd(0x5e0)]&&(this[_0x5dd0cd(0x551)]['push'](_0x5dd0cd(0x91d),TextManager[_0x5dd0cd(0x5c4)][_0x5dd0cd(0x4be)]($gameParty[_0x5dd0cd(0x674)]())),this['_logWindow']['push'](_0x5dd0cd(0x26f)));_0x5d7851&&(this[_0x5dd0cd(0x551)][_0x5dd0cd(0xa04)](_0x5dd0cd(0x26f)),this[_0x5dd0cd(0x551)]['push'](_0x5dd0cd(0x87b))),this['isTpb']()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x44ae36(0x38a)]=function(){const _0x49e490=_0x44ae36;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x49e490(0x851)][_0x49e490(0xa08)][_0x49e490(0x2e0)][_0x49e490(0xb90)];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x946)]=BattleManager['startInput'],BattleManager[_0x44ae36(0x95c)]=function(){const _0x23724a=_0x44ae36;VisuMZ[_0x23724a(0x851)]['BattleManager_startInput'][_0x23724a(0x689)](this),this[_0x23724a(0x46f)]()&&this[_0x23724a(0x70a)]()&&!this['_surprise']&&$gameParty[_0x23724a(0x897)]()&&this[_0x23724a(0xa18)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x1e14f1=_0x44ae36;return VisuMZ[_0x1e14f1(0x851)][_0x1e14f1(0xa08)][_0x1e14f1(0x8cd)][_0x1e14f1(0x420)];},BattleManager[_0x44ae36(0xac2)]=function(){const _0x1ab0bd=_0x44ae36;this[_0x1ab0bd(0x388)]()&&this['selectNextCommand']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x36c)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x76a)],Scene_Battle[_0x44ae36(0x137)]['startActorCommandSelection']=function(){const _0x5bd68a=_0x44ae36;VisuMZ[_0x5bd68a(0x851)][_0x5bd68a(0x36c)][_0x5bd68a(0x689)](this),BattleManager[_0x5bd68a(0xbfa)]()&&BattleManager[_0x5bd68a(0x655)]&&(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x5bd68a(0x6e9)]());},BattleManager[_0x44ae36(0x3df)]=function(_0x4e9057,_0x1c4eef,_0x2d76ce){const _0x5668cb=_0x44ae36;if(!_0x2d76ce)return;if(!_0x4e9057)return;if(!_0x1c4eef)return;const _0x488616=this['_action'];this[_0x5668cb(0xaca)]=new Game_Action(_0x4e9057);if(DataManager['isItem'](_0x2d76ce))this['_action'][_0x5668cb(0xbdf)](_0x2d76ce['id']);if(DataManager[_0x5668cb(0x5d2)](_0x2d76ce))this[_0x5668cb(0xaca)]['setSkill'](_0x2d76ce['id']);if(this[_0x5668cb(0xaca)]['item']())BattleManager[_0x5668cb(0xb1c)](_0x4e9057,_0x1c4eef);this[_0x5668cb(0xaca)]=_0x488616;},BattleManager[_0x44ae36(0xb1a)]=function(_0x264a4a,_0x28754c){const _0x5191f8=_0x44ae36;this[_0x5191f8(0xaca)][_0x5191f8(0x5b9)]=_0x28754c,this[_0x5191f8(0x551)][_0x5191f8(0x97a)](_0x28754c),this[_0x5191f8(0x551)][_0x5191f8(0xa58)](_0x264a4a,this[_0x5191f8(0xaca)]),this[_0x5191f8(0xaca)][_0x5191f8(0xb08)](_0x264a4a),this[_0x5191f8(0x551)][_0x5191f8(0x9fe)](_0x264a4a,_0x264a4a);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xafb)]=BattleManager[_0x44ae36(0x7f0)],BattleManager[_0x44ae36(0x7f0)]=function(){const _0x2de402=_0x44ae36;VisuMZ['BattleCore'][_0x2de402(0xafb)][_0x2de402(0x689)](this),this[_0x2de402(0x91a)]=this['_actionBattlers'][_0x2de402(0x1e5)](_0x407151=>_0x407151&&_0x407151['isAppeared']());},VisuMZ[_0x44ae36(0x851)]['BattleManager_updatePhase']=BattleManager[_0x44ae36(0x9e0)],BattleManager[_0x44ae36(0x9e0)]=function(_0x5278b2){const _0xbf8ae0=_0x44ae36;if(this[_0xbf8ae0(0xb93)]===_0xbf8ae0(0x621))this['updateCustomActionSequence']();else this[_0xbf8ae0(0xb93)]==='forceAction'?this[_0xbf8ae0(0x43a)]():VisuMZ[_0xbf8ae0(0x851)][_0xbf8ae0(0xb82)][_0xbf8ae0(0x689)](this,_0x5278b2);},BattleManager['prepareCustomActionSequence']=function(){const _0x34b444=_0x44ae36;this[_0x34b444(0x113)]=this[_0x34b444(0x955)][_0x34b444(0xb46)](0x0),this['_targetIndex']=0x0,this[_0x34b444(0x5ec)]=this[_0x34b444(0x113)][0x0]||null,this[_0x34b444(0xb93)]='custom';},BattleManager[_0x44ae36(0x31a)]=function(){const _0x3c4a91=_0x44ae36;!this[_0x3c4a91(0x972)]()&&!this[_0x3c4a91(0x551)][_0x3c4a91(0xa5f)]()&&(this[_0x3c4a91(0xb93)]=_0x3c4a91(0x6bf));},BattleManager['forceAction']=function(_0x526dff){const _0x200f15=_0x44ae36;this['_actionBattlers'][_0x200f15(0xac9)](_0x526dff);if(_0x526dff===this[_0x200f15(0xb62)])return;const _0x5886ac=JsonEx[_0x200f15(0x22b)](_0x526dff[_0x200f15(0x67b)]());this[_0x200f15(0x439)][_0x200f15(0xa04)]([_0x526dff,_0x5886ac]);},BattleManager['processForcedAction']=function(){},BattleManager['updateStart']=function(){const _0x283928=_0x44ae36;if(this[_0x283928(0xbfa)]())this[_0x283928(0xb93)]=_0x283928(0x4d9);else this[_0x283928(0x439)]['length']>0x0?this[_0x283928(0xb93)]=_0x283928(0x4d9):this[_0x283928(0x95c)]();},BattleManager[_0x44ae36(0x2f5)]=function(){const _0x147b7e=_0x44ae36,_0x26b094=this[_0x147b7e(0xb62)];_0x26b094&&this[_0x147b7e(0xbfa)]()&&_0x26b094[_0x147b7e(0x978)](_0x147b7e(0xada));for(;;){const _0x18ca8b=this['getNextSubjectFromPool']();if(!_0x18ca8b)return null;if(_0x18ca8b[_0x147b7e(0x97b)]()&&_0x18ca8b[_0x147b7e(0x1c1)]())return _0x18ca8b;}},BattleManager[_0x44ae36(0x2f1)]=function(){const _0x43266d=_0x44ae36;if(this['_forcedBattlers'][_0x43266d(0x2d9)]>0x0){const _0x4e54c2=this[_0x43266d(0x439)][_0x43266d(0x479)](),_0x248665=_0x4e54c2[0x0];return _0x248665[_0x43266d(0xa65)]=_0x248665[_0x43266d(0xa65)]||[],_0x248665['_actions'][0x0]=_0x4e54c2[0x1],_0x248665;}else return this[_0x43266d(0x91a)][_0x43266d(0x479)]();},VisuMZ[_0x44ae36(0x851)]['Game_Battler_forceAction']=Game_Battler['prototype']['forceAction'],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xa00)]=function(_0xcdb798,_0x2f163a){const _0x229cbd=_0x44ae36;VisuMZ['BattleCore'][_0x229cbd(0xbe9)][_0x229cbd(0x689)](this,_0xcdb798,_0x2f163a),this[_0x229cbd(0xa65)][this[_0x229cbd(0xa65)]['length']-0x1][_0x229cbd(0x460)]=!![];},Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0x168)]=function(_0x12d540){const _0x4cf017=_0x44ae36;return this[_0x4cf017(0x2ef)](_0x12d540[0x0],_0x12d540[0x1],_0x6e82f8=>{const _0x161617=_0x4cf017;!_0x6e82f8[_0x161617(0x86a)]()&&(_0x6e82f8['forceAction'](_0x12d540[0x2],_0x12d540[0x3]),BattleManager[_0x161617(0xa00)](_0x6e82f8));}),!![];},VisuMZ['BattleCore'][_0x44ae36(0x6e6)]=Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xb0d)],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xb0d)]=function(){const _0x33db9a=_0x44ae36;VisuMZ[_0x33db9a(0x851)]['Game_Battler_makeSpeed']['call'](this),this[_0x33db9a(0xa65)]['length']<=0x0&&(this[_0x33db9a(0x77d)]=Number[_0x33db9a(0x164)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x2cae4d=_0x44ae36;if(VisuMZ[_0x2cae4d(0x851)][_0x2cae4d(0xa08)][_0x2cae4d(0xff)]['EndBattlePopups']??!![])return![];return SceneManager[_0x2cae4d(0xb75)]()&&this[_0x2cae4d(0x905)];},VisuMZ['BattleCore'][_0x44ae36(0x56a)]=BattleManager['selectNextCommand'],BattleManager[_0x44ae36(0xa18)]=function(){const _0x136de2=_0x44ae36;this[_0x136de2(0xbfa)]()?this[_0x136de2(0x702)]():VisuMZ[_0x136de2(0x851)][_0x136de2(0x56a)][_0x136de2(0x689)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x29bebd=_0x44ae36;if(this[_0x29bebd(0x371)]){if(this[_0x29bebd(0x371)]['selectNextCommand']())return;this[_0x29bebd(0xef)](),this[_0x29bebd(0x835)](),!this['_subject']&&!this['_currentActor']&&SceneManager[_0x29bebd(0x97d)][_0x29bebd(0x9a8)]();}else!this[_0x29bebd(0xb62)]&&this[_0x29bebd(0x7db)]();},BattleManager[_0x44ae36(0x835)]=function(){const _0x1df04b=_0x44ae36;(!this[_0x1df04b(0x388)]()||this[_0x1df04b(0x231)]())&&(this[_0x1df04b(0x633)]&&(!$gameParty[_0x1df04b(0xb63)]()[_0x1df04b(0x76b)](this[_0x1df04b(0x633)])&&(this[_0x1df04b(0x633)]=null)),!this[_0x1df04b(0x633)]?(this[_0x1df04b(0x775)](),this[_0x1df04b(0x371)]=null,this[_0x1df04b(0x772)]=![]):this[_0x1df04b(0x9fc)]());},BattleManager['revertTpbCachedActor']=function(){const _0x53c880=_0x44ae36;!$gameParty['battleMembers']()[_0x53c880(0x76b)](this[_0x53c880(0x633)])&&(this[_0x53c880(0x633)]=null),this[_0x53c880(0x633)]?(this['_currentActor']=this[_0x53c880(0x633)],this['_currentActor'][_0x53c880(0x285)]='charged',this['_inputting']=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x53c880(0x775)](),this[_0x53c880(0x371)]=null,this['_inputting']=![]);},VisuMZ[_0x44ae36(0x851)]['BattleManager_isTpbMainPhase']=BattleManager['isTpbMainPhase'],BattleManager['isTpbMainPhase']=function(){const _0x3a348f=_0x44ae36;return this[_0x3a348f(0xb93)]==='custom'?this[_0x3a348f(0x17d)]():VisuMZ[_0x3a348f(0x851)]['BattleManager_isTpbMainPhase'][_0x3a348f(0x689)](this);},BattleManager[_0x44ae36(0x17d)]=function(){const _0x50514e=_0x44ae36;return this[_0x50514e(0x4f9)]();},VisuMZ[_0x44ae36(0x851)]['BattleManager_cancelActorInput']=BattleManager[_0x44ae36(0x775)],BattleManager[_0x44ae36(0x775)]=function(){const _0x32da9c=_0x44ae36;this[_0x32da9c(0xbfa)]()&&this['_phase']==='battleEnd'&&(this[_0x32da9c(0x371)]=null),VisuMZ['BattleCore'][_0x32da9c(0x374)][_0x32da9c(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['BattleManager_inputtingAction']=BattleManager[_0x44ae36(0x3a8)],BattleManager[_0x44ae36(0x3a8)]=function(){const _0x4d35c0=_0x44ae36,_0x4e649b=this[_0x4d35c0(0x371)];if(_0x4e649b&&!_0x4e649b[_0x4d35c0(0x3a8)]()){const _0x4ab75c=_0x4e649b['_actionInputIndex'];_0x4e649b['_actions'][_0x4ab75c]=new Game_Action(_0x4e649b);}return VisuMZ[_0x4d35c0(0x851)]['BattleManager_inputtingAction'][_0x4d35c0(0x689)](this);},VisuMZ['BattleCore'][_0x44ae36(0x424)]=BattleManager[_0x44ae36(0x7e7)],BattleManager[_0x44ae36(0x7e7)]=function(_0xf4f449){const _0x52cfc2=_0x44ae36;if(this[_0x52cfc2(0xaca)]['isForFriend']())return![];return VisuMZ[_0x52cfc2(0x851)][_0x52cfc2(0x424)][_0x52cfc2(0x689)](this,_0xf4f449);},SceneManager[_0x44ae36(0xb75)]=function(){const _0x36b4c5=_0x44ae36;return this[_0x36b4c5(0x97d)]&&this[_0x36b4c5(0x97d)]['constructor']===Scene_Battle;},SceneManager[_0x44ae36(0xab7)]=function(){const _0x249c16=_0x44ae36;return Spriteset_Battle[_0x249c16(0x137)][_0x249c16(0x9d5)]();},SceneManager[_0x44ae36(0x6f8)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager[_0x44ae36(0x295)]=function(){const _0x363003=_0x44ae36;if(SceneManager[_0x363003(0x450)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x8ec990){const _0x15a494=_0x44ae36;if(!SceneManager[_0x15a494(0xb75)]())return!![];const _0x4b6d4f=[_0x15a494(0x2af),_0x15a494(0x889),_0x15a494(0x303)];return _0x4b6d4f['includes'](_0x8ec990[_0x15a494(0x674)]);},VisuMZ['BattleCore'][_0x44ae36(0x9b3)]=SceneManager[_0x44ae36(0xa04)],SceneManager[_0x44ae36(0xa04)]=function(_0x27e5a2){const _0x483495=_0x44ae36;if(!SceneManager[_0x483495(0x4c2)](_0x27e5a2))return this['displayBattleCoreTransitionErrorMsg'](_0x27e5a2);VisuMZ[_0x483495(0x851)][_0x483495(0x9b3)][_0x483495(0x689)](this,_0x27e5a2);},SceneManager[_0x44ae36(0xa5d)]=function(_0x18d807){const _0x4912b8=_0x44ae36;if(!$gameTemp['isPlaytest']())return;if(this[_0x4912b8(0xaf1)])return;this[_0x4912b8(0xaf1)]=!![];let _0x2a7508='';_0x2a7508+=_0x4912b8(0xaae),_0x2a7508+=_0x4912b8(0xa6d)[_0x4912b8(0x4be)](_0x18d807[_0x4912b8(0x674)]),alert(_0x2a7508);},VisuMZ['BattleCore'][_0x44ae36(0x391)]=Game_Temp[_0x44ae36(0x137)][_0x44ae36(0x58b)],Game_Temp[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(){const _0x36f36c=_0x44ae36;VisuMZ['BattleCore'][_0x36f36c(0x391)][_0x36f36c(0x689)](this),this[_0x36f36c(0x7ea)]=[];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa53)]=Game_Temp[_0x44ae36(0x137)][_0x44ae36(0x140)],Game_Temp[_0x44ae36(0x137)]['requestAnimation']=function(_0x205f1f,_0x5357db,_0x292302){const _0x13674b=_0x44ae36;_0x205f1f=_0x205f1f[_0x13674b(0x1e5)]((_0x160df4,_0x5955a6,_0x2bdcdf)=>_0x2bdcdf['indexOf'](_0x160df4)===_0x5955a6);SceneManager['isSceneBattle']()&&SceneManager['isBattleFlipped']()&&(_0x292302=!_0x292302);VisuMZ[_0x13674b(0x851)][_0x13674b(0xa53)][_0x13674b(0x689)](this,_0x205f1f,_0x5357db,_0x292302);SceneManager[_0x13674b(0xb75)]()&&BattleManager['_spriteset'][_0x13674b(0x9d6)]();for(const _0x45a4c9 of _0x205f1f){_0x45a4c9&&_0x45a4c9[_0x13674b(0x2fe)]&&_0x45a4c9[_0x13674b(0x2fe)]()&&_0x45a4c9[_0x13674b(0x937)]();}},Game_Temp['prototype'][_0x44ae36(0x610)]=function(_0x1a8673){const _0x53a1c9=_0x44ae36;this[_0x53a1c9(0x63c)]=_0x1a8673;},Game_Temp[_0x44ae36(0x137)][_0x44ae36(0xbc7)]=function(){const _0x19ce67=_0x44ae36;return this[_0x19ce67(0x63c)];},Game_Temp[_0x44ae36(0x137)]['clearForcedGameTroopSettingsBattleCore']=function(){const _0x458bc3=_0x44ae36;this[_0x458bc3(0x3ea)]=undefined;},Game_Temp[_0x44ae36(0x137)]['applyForcedGameTroopSettingsBattleCore']=function(_0x2688f6){const _0x3cd13a=_0x44ae36;$gameMap&&$dataMap&&$dataMap[_0x3cd13a(0x903)]&&this[_0x3cd13a(0x904)]($dataMap[_0x3cd13a(0x903)]);const _0x6240a7=$dataTroops[_0x2688f6];if(_0x6240a7){let _0x3c7196=DataManager['createTroopNote'](_0x6240a7['id']);this[_0x3cd13a(0x904)](_0x3c7196);}},Game_Temp['prototype']['parseForcedGameTroopSettingsBattleCore']=function(_0x25276d){const _0x23396b=_0x44ae36;if(!_0x25276d)return;if(_0x25276d[_0x23396b(0x54f)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x5805dd=String(RegExp['$1']);if(_0x5805dd[_0x23396b(0x54f)](/DEFAULT/i))this[_0x23396b(0x3ea)]='default';else{if(_0x5805dd[_0x23396b(0x54f)](/LIST/i))this[_0x23396b(0x3ea)]=_0x23396b(0xb29);else{if(_0x5805dd[_0x23396b(0x54f)](/XP/i))this[_0x23396b(0x3ea)]='xp';else{if(_0x5805dd[_0x23396b(0x54f)](/PORTRAIT/i))this[_0x23396b(0x3ea)]='portrait';else{if(_0x5805dd[_0x23396b(0x54f)](/BORDER/i))this[_0x23396b(0x3ea)]=_0x23396b(0x449);else{if(_0x5805dd[_0x23396b(0x54f)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this[_0x23396b(0x3ea)]=_0x23396b(0x860):this['_forcedBattleLayout']=_0x23396b(0x199);else _0x5805dd[_0x23396b(0x54f)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x23396b(0x647)]?this[_0x23396b(0x3ea)]=_0x23396b(0x957):this[_0x23396b(0x3ea)]=_0x23396b(0x199));}}}}}}},VisuMZ['BattleCore'][_0x44ae36(0x6bc)]=Game_Temp[_0x44ae36(0x137)]['requestBalloon'],Game_Temp['prototype'][_0x44ae36(0xbc8)]=function(_0x55dc07,_0x42906b){const _0x31c7fa=_0x44ae36;SceneManager[_0x31c7fa(0xb75)]()?this[_0x31c7fa(0x5ac)](_0x55dc07,_0x42906b):VisuMZ[_0x31c7fa(0x851)][_0x31c7fa(0x6bc)]['call'](this,_0x55dc07,_0x42906b);},Game_Temp[_0x44ae36(0x137)]['requestBattleBalloon']=function(_0x38ca20,_0x1de63a){const _0x46ed87=_0x44ae36,_0x54fcd1={'target':_0x38ca20,'balloonId':_0x1de63a};this[_0x46ed87(0x7ea)]=this[_0x46ed87(0x7ea)]||[],this[_0x46ed87(0x7ea)][_0x46ed87(0xa04)](_0x54fcd1);},Game_Temp['prototype']['retrieveBattleBalloon']=function(){const _0x4ca2e9=_0x44ae36;return this[_0x4ca2e9(0x7ea)]=this['_battleBalloonQueue']||[],this[_0x4ca2e9(0x7ea)][_0x4ca2e9(0x479)]();},Game_Temp[_0x44ae36(0x137)][_0x44ae36(0x156)]=function(){const _0x498d82=_0x44ae36;this[_0x498d82(0x7ea)]=[];},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x68e)]=function(){const _0x2f5a2e=_0x44ae36;this[_0x2f5a2e(0xb16)]===undefined&&(this[_0x2f5a2e(0xb16)]=[]);for(const _0x234486 of this[_0x2f5a2e(0xb16)]){!_0x234486[_0x2f5a2e(0xa4d)]()&&this[_0x2f5a2e(0x944)](_0x234486);}this[_0x2f5a2e(0x502)]();},Spriteset_Battle['prototype'][_0x44ae36(0x502)]=function(){for(;;){const _0x224731=$gameTemp['retrieveBattleBalloon']();if(_0x224731)this['createBattleBalloon'](_0x224731);else break;}},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x656)]=function(_0x5644da){const _0x4d1b3a=_0x44ae36,_0x8c2ec3=this[_0x4d1b3a(0x914)](_0x5644da['target']);if(_0x8c2ec3){let _0xe85033=null;Imported[_0x4d1b3a(0x6d6)]&&Array[_0x4d1b3a(0x797)](_0x5644da[_0x4d1b3a(0x8bb)])?_0xe85033=new Sprite_IconBalloon():_0xe85033=new Sprite_Balloon(),_0xe85033[_0x4d1b3a(0x13a)]=_0x5644da[_0x4d1b3a(0xbcd)],_0xe85033[_0x4d1b3a(0x5ec)]=_0x8c2ec3,_0xe85033[_0x4d1b3a(0x5ec)][_0x4d1b3a(0xa25)]=_0x8c2ec3,_0xe85033[_0x4d1b3a(0x93c)](_0x8c2ec3,_0x5644da['balloonId']),BattleManager[_0x4d1b3a(0x73f)](_0xe85033),this[_0x4d1b3a(0xb16)]['push'](_0xe85033);}},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x944)]=function(_0x43f5da){const _0x5055f7=_0x44ae36;this[_0x5055f7(0xb16)]['remove'](_0x43f5da),BattleManager[_0x5055f7(0x915)](_0x43f5da),_0x43f5da[_0x5055f7(0x492)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x11e)]=function(_0x113d2e,_0x12d974){},Sprite_Battler[_0x44ae36(0x137)]['isSpriteVS8dir']=function(){return![];},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x5e4)]=function(){const _0x576bb0=_0x44ae36;return this['_battleBalloonSprites']=this['_battleBalloonSprites']||[],this['_battleBalloonSprites'][_0x576bb0(0x2d9)]>0x0;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x97f)]=Game_System['prototype']['initialize'],Game_System[_0x44ae36(0x137)]['initialize']=function(){const _0x14f4e7=_0x44ae36;VisuMZ['BattleCore'][_0x14f4e7(0x97f)][_0x14f4e7(0x689)](this),this[_0x14f4e7(0x322)]();},Game_System['prototype'][_0x44ae36(0x322)]=function(){const _0x132760=_0x44ae36;this[_0x132760(0x71d)]=this['_defeatedEnemies']||[];},Game_System[_0x44ae36(0x137)][_0x44ae36(0xae5)]=function(){const _0x4a79b0=_0x44ae36;if(this['_defeatedEnemies']===undefined)this[_0x4a79b0(0x322)]();return this[_0x4a79b0(0x71d)];},Game_System[_0x44ae36(0x137)][_0x44ae36(0x5e9)]=function(_0xe078c1){const _0x1a60ae=_0x44ae36;if(this[_0x1a60ae(0x71d)]===undefined)this[_0x1a60ae(0x322)]();if(!_0xe078c1)return;if(this[_0x1a60ae(0x71d)]['includes'](_0xe078c1))return;this[_0x1a60ae(0x71d)]['push'](_0xe078c1),this[_0x1a60ae(0x71d)][_0x1a60ae(0x7be)]((_0x263a1a,_0x5e29b0)=>_0x263a1a-_0x5e29b0);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x9d3)]=Game_BattlerBase[_0x44ae36(0x137)]['addNewState'],Game_BattlerBase[_0x44ae36(0x137)]['addNewState']=function(_0x13e816){const _0x43af5a=_0x44ae36,_0x4ee8f6=this[_0x43af5a(0x1c1)](),_0x7103b3=this[_0x43af5a(0x1b9)]();VisuMZ['BattleCore'][_0x43af5a(0x9d3)][_0x43af5a(0x689)](this,_0x13e816),this[_0x43af5a(0x2fe)]()&&_0x4ee8f6&&this[_0x43af5a(0xb6d)]()&&(this[_0x43af5a(0xa4b)]=!this['hasBeenDefeatedBefore'](),$gameSystem['registerDefeatedEnemy'](this[_0x43af5a(0xa2f)]())),SceneManager[_0x43af5a(0xb75)]()&&_0x7103b3!==this[_0x43af5a(0x1b9)]()&&(this[_0x43af5a(0x7ef)]()&&this['battler']()[_0x43af5a(0x543)]());},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x9bb)]=function(){const _0x51e25c=_0x44ae36;return $gameSystem[_0x51e25c(0xae5)]()[_0x51e25c(0x76b)](this[_0x51e25c(0x1a2)]);},VisuMZ[_0x44ae36(0x851)]['Game_BattlerBase_eraseState']=Game_BattlerBase['prototype'][_0x44ae36(0xb26)],Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0xb26)]=function(_0xa38b88){const _0x477a31=_0x44ae36;VisuMZ[_0x477a31(0x851)][_0x477a31(0x1c5)][_0x477a31(0x689)](this,_0xa38b88),this[_0x477a31(0x2fe)]()&&_0xa38b88===this[_0x477a31(0x102)]()&&this[_0x477a31(0x1c1)]()&&(this[_0x477a31(0xa4b)]=![]),!this[_0x477a31(0xba8)]&&!this['_tempBattler']&&SceneManager[_0x477a31(0xb75)]()&&this[_0x477a31(0xe3)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x134)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x87b)],Game_Action['prototype'][_0x44ae36(0x87b)]=function(){const _0x1281a2=_0x44ae36;VisuMZ['BattleCore'][_0x1281a2(0x134)][_0x1281a2(0x689)](this),this[_0x1281a2(0xadb)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x1281a2(0x199),this[_0x1281a2(0x44c)]();},Game_Action['prototype'][_0x44ae36(0x44c)]=function(){const _0x18072a=_0x44ae36;this[_0x18072a(0x8d4)]='';},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6df)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x184)],Game_Action[_0x44ae36(0x137)]['setSubject']=function(_0x370aec){const _0x490944=_0x44ae36;VisuMZ[_0x490944(0x851)][_0x490944(0x6df)][_0x490944(0x689)](this,_0x370aec),this['clearTargetBattlerKey']();},VisuMZ['BattleCore']['Game_Action_setSkill']=Game_Action['prototype'][_0x44ae36(0x17a)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x17a)]=function(_0x591ca4){const _0x3f784f=_0x44ae36;VisuMZ[_0x3f784f(0x851)][_0x3f784f(0x195)]['call'](this,_0x591ca4),this[_0x3f784f(0x44c)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x25d)]=Game_Action[_0x44ae36(0x137)]['setItem'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0xbdf)]=function(_0x59b50f){const _0x45ba4c=_0x44ae36;VisuMZ['BattleCore'][_0x45ba4c(0x25d)][_0x45ba4c(0x689)](this,_0x59b50f),this[_0x45ba4c(0x44c)]();},Game_Action['prototype'][_0x44ae36(0x529)]=function(_0x26ba09,_0x498acc){const _0xf45f56=_0x44ae36;return VisuMZ[_0xf45f56(0x851)]['Settings']['Damage'][_0xf45f56(0x1a6)]['call'](this,_0x26ba09,_0x498acc);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x4da)]=function(_0x226e30,_0x2bc213){const _0x14089a=_0x44ae36;return VisuMZ['BattleCore'][_0x14089a(0xa08)][_0x14089a(0xff)][_0x14089a(0x193)][_0x14089a(0x689)](this,_0x226e30,_0x2bc213);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x6da)]=function(_0x1690a7,_0x497356){const _0x50c7cc=_0x44ae36;return VisuMZ[_0x50c7cc(0x851)]['Settings'][_0x50c7cc(0xff)][_0x50c7cc(0x7f5)][_0x50c7cc(0x689)](this,_0x1690a7,_0x497356);},VisuMZ[_0x44ae36(0x851)]['Game_Action_itemHit']=Game_Action['prototype'][_0x44ae36(0xbc1)],Game_Action['prototype']['itemHit']=function(_0x162316){const _0x44a6bb=_0x44ae36,_0x381c08=this[_0x44a6bb(0x4ec)]()[_0x44a6bb(0x903)];if(_0x381c08[_0x44a6bb(0x54f)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x381c08[_0x44a6bb(0x54f)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x5c0e3c=VisuMZ[_0x44a6bb(0x851)][_0x44a6bb(0x5db)][_0x44a6bb(0x689)](this,_0x162316);return _0x5c0e3c=this[_0x44a6bb(0xbdd)]['hitRate']*_0x5c0e3c+this['_multipliers']['hitFlat'],$gameParty['inBattle']()&&(_0x5c0e3c=this[_0x44a6bb(0xbea)](_0x5c0e3c,_0x162316)),_0x5c0e3c;}}},VisuMZ['BattleCore'][_0x44ae36(0x755)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0xb14)],Game_Action['prototype'][_0x44ae36(0xb14)]=function(_0x2d6c1f){const _0x10ad67=_0x44ae36;this[_0x10ad67(0x321)]=!![],VisuMZ[_0x10ad67(0x851)][_0x10ad67(0x755)][_0x10ad67(0x689)](this,_0x2d6c1f),this['_bypass_applyBattleCoreHitRateJS']=undefined;},Game_Action[_0x44ae36(0x137)]['declareGlobalVariables']=function(_0x2f0c99){const _0x5e0c1f=_0x44ae36;window['action']=this,window['a']=this[_0x5e0c1f(0x7a5)](),window['b']=_0x2f0c99,window[_0x5e0c1f(0x786)]=this[_0x5e0c1f(0x7a5)](),window['target']=_0x2f0c99,window['obj']=this[_0x5e0c1f(0x4ec)](),window[_0x5e0c1f(0x10b)]=this[_0x5e0c1f(0x4ec)](),window[_0x5e0c1f(0x4ec)]=this[_0x5e0c1f(0x4ec)]();},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x1b5)]=function(_0x1583cc){const _0x3006b7=_0x44ae36;window[_0x3006b7(0x6bf)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x3006b7(0x786)]=undefined,window[_0x3006b7(0xbcd)]=undefined,window[_0x3006b7(0x1a0)]=undefined,window['skill']=undefined,window[_0x3006b7(0x4ec)]=undefined;},Game_Action['prototype'][_0x44ae36(0xbea)]=function(_0x34cd67,_0x26b170){const _0x2c1890=_0x44ae36;if(this[_0x2c1890(0x321)])return _0x34cd67;this[_0x2c1890(0x954)](_0x26b170);if(this[_0x2c1890(0x4ec)]()){let _0x16cc1d=VisuMZ[_0x2c1890(0x851)][_0x2c1890(0x554)](this['item'](),_0x2c1890(0x5ce));VisuMZ[_0x2c1890(0x851)]['JS'][_0x16cc1d]&&(_0x34cd67=VisuMZ[_0x2c1890(0x851)]['JS'][_0x16cc1d][_0x2c1890(0x689)](this,this[_0x2c1890(0x7a5)](),_0x26b170,this['item'](),_0x34cd67));}for(const _0x108ffa of this['subject']()[_0x2c1890(0x96e)]()){if(!_0x108ffa)continue;key=VisuMZ[_0x2c1890(0x851)]['createKeyJS'](_0x108ffa,_0x2c1890(0x774)),VisuMZ[_0x2c1890(0x851)]['JS'][key]&&(_0x34cd67=VisuMZ['BattleCore']['JS'][key][_0x2c1890(0x689)](this,this[_0x2c1890(0x7a5)](),_0x26b170,this['item'](),_0x34cd67));}for(const _0x42a7ab of _0x26b170[_0x2c1890(0x96e)]()){if(!_0x42a7ab)continue;key=VisuMZ['BattleCore'][_0x2c1890(0x554)](_0x42a7ab,_0x2c1890(0x16f)),VisuMZ[_0x2c1890(0x851)]['JS'][key]&&(_0x34cd67=VisuMZ[_0x2c1890(0x851)]['JS'][key][_0x2c1890(0x689)](this,this['subject'](),_0x26b170,this[_0x2c1890(0x4ec)](),_0x34cd67));}return this[_0x2c1890(0x1b5)](_0x26b170),_0x34cd67;},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x50c)]=function(_0x3a2620){const _0x411278=_0x44ae36;if(!this['item']()['damage'][_0x411278(0x38e)])return 0x0;let _0x316e30=VisuMZ[_0x411278(0x851)][_0x411278(0xa08)][_0x411278(0xff)]['CriticalHitRateJS']['call'](this,_0x3a2620);return _0x316e30=this['_multipliers'][_0x411278(0x5c2)]*_0x316e30+this[_0x411278(0xbdd)][_0x411278(0xae6)],$gameParty[_0x411278(0x720)]()&&(_0x316e30=this[_0x411278(0x667)](_0x316e30,_0x3a2620)),_0x316e30;},Game_Action[_0x44ae36(0x137)]['applyBattleCoreCriticalHitRateJS']=function(_0x572d43,_0xcfeffa){const _0x2d3441=_0x44ae36;this[_0x2d3441(0x954)](_0xcfeffa),window[_0x2d3441(0x5c9)]=_0x572d43;{const _0x2beb4e=this[_0x2d3441(0x7a5)]()['traitObjects']();for(const _0x71cb77 of _0x2beb4e){if(!_0x71cb77)continue;if(_0x71cb77[_0x2d3441(0x903)][_0x2d3441(0x54f)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x1dc57f=String(RegExp['$1']);try{eval(_0x1dc57f);}catch(_0x336ad7){if($gameTemp[_0x2d3441(0x2ac)]())console[_0x2d3441(0x82c)](_0x336ad7);}}}}{const _0x50764c=_0xcfeffa[_0x2d3441(0x96e)]();for(const _0x2bdf02 of _0x50764c){if(!_0x2bdf02)continue;if(_0x2bdf02['note']['match'](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x201957=String(RegExp['$1']);try{eval(_0x201957);}catch(_0x1568d4){if($gameTemp['isPlaytest']())console[_0x2d3441(0x82c)](_0x1568d4);}}}}return _0x572d43=window[_0x2d3441(0x5c9)],this[_0x2d3441(0x1b5)](_0xcfeffa),_0x572d43;},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x667)]=function(_0x33ec92,_0x1893ec){const _0x25fed4=_0x44ae36;this['declareGlobalVariables'](_0x1893ec);for(const _0x4acf75 of this[_0x25fed4(0x7a5)]()[_0x25fed4(0x96e)]()){if(!_0x4acf75)continue;key=VisuMZ[_0x25fed4(0x851)]['createKeyJS'](_0x4acf75,_0x25fed4(0xaab)),VisuMZ['BattleCore']['JS'][key]&&(_0x33ec92=VisuMZ[_0x25fed4(0x851)]['JS'][key][_0x25fed4(0x689)](this,this[_0x25fed4(0x7a5)](),_0x1893ec,this[_0x25fed4(0x4ec)](),_0x33ec92));}for(const _0x556b34 of _0x1893ec[_0x25fed4(0x96e)]()){if(!_0x556b34)continue;key=VisuMZ[_0x25fed4(0x851)][_0x25fed4(0x554)](_0x556b34,'jsCritRateAsTarget'),VisuMZ['BattleCore']['JS'][key]&&(_0x33ec92=VisuMZ[_0x25fed4(0x851)]['JS'][key][_0x25fed4(0x689)](this,this[_0x25fed4(0x7a5)](),_0x1893ec,this[_0x25fed4(0x4ec)](),_0x33ec92));}return this['clearGlobalVariables'](_0x1893ec),_0x33ec92;},Game_Action['prototype']['applyCritical']=function(_0x2f0a68){const _0x2d5ba7=_0x44ae36;return _0x2f0a68=VisuMZ[_0x2d5ba7(0x851)][_0x2d5ba7(0xa08)][_0x2d5ba7(0xff)][_0x2d5ba7(0x182)][_0x2d5ba7(0x689)](this,_0x2f0a68),_0x2f0a68=this['_multipliers'][_0x2d5ba7(0x1da)]*_0x2f0a68+this[_0x2d5ba7(0xbdd)][_0x2d5ba7(0x6c4)],_0x2f0a68;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x74b)]=Game_Action[_0x44ae36(0x137)]['evalDamageFormula'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x2ed)]=function(_0x61d06d){const _0x306f57=_0x44ae36;if(this[_0x306f57(0x2d4)]!=='default')return this[_0x306f57(0x155)](_0x61d06d);else return DataManager[_0x306f57(0x876)](this[_0x306f57(0x4ec)]())===_0x306f57(0x61a)?VisuMZ[_0x306f57(0x851)][_0x306f57(0x74b)][_0x306f57(0x689)](this,_0x61d06d):this[_0x306f57(0x350)](_0x61d06d);},Game_Action[_0x44ae36(0x137)]['setCustomDamageFormula']=function(_0x5a94ae){this['_customDamageFormula']=_0x5a94ae;},Game_Action['prototype'][_0x44ae36(0x155)]=function(_0xbf81a3){const _0x39a57d=_0x44ae36,_0x58c2b8=this[_0x39a57d(0x4ec)](),_0x3aa997=_0x58c2b8[_0x39a57d(0x971)]['formula'];_0x58c2b8[_0x39a57d(0x971)][_0x39a57d(0x84d)]=this[_0x39a57d(0x2d4)];let _0xd35cc5=VisuMZ[_0x39a57d(0x851)]['Game_Action_evalDamageFormula'][_0x39a57d(0x689)](this,_0xbf81a3);return _0x58c2b8[_0x39a57d(0x971)][_0x39a57d(0x84d)]=_0x3aa997,_0xd35cc5;},Game_Action[_0x44ae36(0x137)]['damageStyle']=function(){const _0x270462=_0x44ae36;if(this['item']()['note'][_0x270462(0x54f)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x26a97a=String(RegExp['$1'])['toUpperCase']()[_0x270462(0x9de)]();return _0x26a97a;}return'MANUAL';},Game_Action[_0x44ae36(0x137)]['evalDamageFormulaBattleCore']=function(_0x369504){const _0x5e2acc=_0x44ae36,_0x2f48da=DataManager[_0x5e2acc(0x876)](this[_0x5e2acc(0x4ec)]()),_0x202d55=VisuMZ[_0x5e2acc(0x639)][_0x2f48da];try{return _0x202d55[_0x5e2acc(0x148)][_0x5e2acc(0x689)](this,_0x369504);}catch(_0x529f4b){if($gameTemp['isPlaytest']())console[_0x5e2acc(0x82c)](_0x529f4b);return VisuMZ[_0x5e2acc(0x851)][_0x5e2acc(0x74b)][_0x5e2acc(0x689)](this);}},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x8da)]=function(_0x48f3ec,_0x372084){const _0x336d64=_0x44ae36;if(this[_0x336d64(0x8f1)]())return _0x372084;const _0x51fdb8=this['subject'](),_0x4c946b=_0x48f3ec;let _0x4d3244=[],_0x90a27=[];_0x4d3244[_0x336d64(0xa04)](this[_0x336d64(0xadb)][_0x336d64(0x3d9)],this[_0x336d64(0xadb)][_0x336d64(0x42f)]),_0x90a27[_0x336d64(0xa04)](this[_0x336d64(0xadb)][_0x336d64(0xa0f)],this[_0x336d64(0xadb)][_0x336d64(0x7b2)]);const _0x26b79e=this[_0x336d64(0x72d)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x1b241a=this[_0x336d64(0x72d)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x10101c=this[_0x336d64(0x72d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x50c654=this[_0x336d64(0x72d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4d3244=_0x4d3244[_0x336d64(0x738)](_0x4c946b[_0x336d64(0x96e)]()[_0x336d64(0x6e5)](_0x2bbaec=>_0x2bbaec&&_0x2bbaec[_0x336d64(0x903)]['match'](_0x26b79e)?Number(RegExp['$1']):0x0)),_0x90a27=_0x90a27[_0x336d64(0x738)](_0x4c946b['traitObjects']()['map'](_0x140f43=>_0x140f43&&_0x140f43[_0x336d64(0x903)][_0x336d64(0x54f)](_0x1b241a)?Number(RegExp['$1'])/0x64:0x0)),_0x4d3244=_0x4d3244['concat'](_0x51fdb8['traitObjects']()[_0x336d64(0x6e5)](_0x557e32=>_0x557e32&&_0x557e32[_0x336d64(0x903)][_0x336d64(0x54f)](_0x10101c)?Number(RegExp['$1']):0x0)),_0x90a27=_0x90a27['concat'](_0x51fdb8['traitObjects']()[_0x336d64(0x6e5)](_0x1becbd=>_0x1becbd&&_0x1becbd['note'][_0x336d64(0x54f)](_0x50c654)?Number(RegExp['$1'])/0x64:0x0)),this[_0x336d64(0x4ec)]()['note']['match'](_0x10101c)&&_0x4d3244[_0x336d64(0xa04)](Number(RegExp['$1'])),this[_0x336d64(0x4ec)]()[_0x336d64(0x903)][_0x336d64(0x54f)](_0x50c654)&&_0x90a27['push'](Number(RegExp['$1'])),_0x372084=_0x4d3244[_0x336d64(0x165)]((_0x53d599,_0x29329d)=>_0x53d599-_0x29329d,_0x372084),_0x372084>0x0&&(_0x372084=_0x90a27[_0x336d64(0x165)]((_0x3a8a3b,_0x37b916)=>_0x3a8a3b*(0x1-_0x37b916),_0x372084)),_0x372084;},VisuMZ['BattleCore'][_0x44ae36(0x80c)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x10a)],Game_Action[_0x44ae36(0x137)]['executeDamage']=function(_0x5bfffb,_0x398677){const _0x2b5b1e=_0x44ae36;_0x398677=_0x398677*this[_0x2b5b1e(0xbdd)][_0x2b5b1e(0x816)],_0x398677+=this['_multipliers']['damageFlat']*(_0x398677>=0x0?0x1:-0x1),_0x398677=this[_0x2b5b1e(0x8d3)](_0x2b5b1e(0xa07),_0x5bfffb,_0x398677,![]),_0x398677=this[_0x2b5b1e(0x666)](_0x398677),_0x398677>0x0?_0x398677=Math[_0x2b5b1e(0xb2f)](_0x398677):_0x398677=Math[_0x2b5b1e(0xb78)](_0x398677),this[_0x2b5b1e(0x563)]=_0x398677,this[_0x2b5b1e(0x5f4)]=this[_0x2b5b1e(0x5f4)]||0x0,this[_0x2b5b1e(0x5f4)]+=_0x398677,VisuMZ[_0x2b5b1e(0x851)][_0x2b5b1e(0x80c)][_0x2b5b1e(0x689)](this,_0x5bfffb,_0x398677),this[_0x2b5b1e(0x8d3)](_0x2b5b1e(0x2ce),_0x5bfffb,_0x398677,!![]);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x666)]=function(_0x1de404){const _0x85312d=_0x44ae36;if(this[_0x85312d(0x7d8)]())return _0x1de404;return _0x1de404=this['applySoftDamageCap'](_0x1de404),_0x1de404=this['applyHardDamageCap'](_0x1de404),_0x1de404;},Game_Action[_0x44ae36(0x137)]['isBypassDamageCap']=function(){const _0x37f896=_0x44ae36,_0x5033ec=/<BYPASS DAMAGE CAP>/i;if(this['item']()['note'][_0x37f896(0x54f)](_0x5033ec))return!![];if(this[_0x37f896(0x7a5)]()[_0x37f896(0x96e)]()[_0x37f896(0x39c)](_0x517fdf=>_0x517fdf&&_0x517fdf[_0x37f896(0x903)][_0x37f896(0x54f)](_0x5033ec)))return!![];return!VisuMZ[_0x37f896(0x851)]['Settings'][_0x37f896(0xff)]['EnableDamageCap'];},Game_Action[_0x44ae36(0x137)]['applySoftDamageCap']=function(_0x156054){const _0x4794f5=_0x44ae36;if(!VisuMZ['BattleCore'][_0x4794f5(0xa08)][_0x4794f5(0xff)][_0x4794f5(0x455)])return _0x156054;const _0x1bef83=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x4794f5(0x4ec)]()['note'][_0x4794f5(0x54f)](_0x1bef83))return _0x156054;if(this[_0x4794f5(0x7a5)]()[_0x4794f5(0x96e)]()[_0x4794f5(0x39c)](_0x3feba8=>_0x3feba8&&_0x3feba8[_0x4794f5(0x903)][_0x4794f5(0x54f)](_0x1bef83)))return _0x156054;const _0x3aa383=_0x156054<0x0?-0x1:0x1;_0x156054=Math[_0x4794f5(0x8d7)](_0x156054);let _0x485743=this[_0x4794f5(0x7a5)]()[_0x4794f5(0x1fc)]();this[_0x4794f5(0x4ec)]()[_0x4794f5(0x903)][_0x4794f5(0x54f)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x485743+=Number(RegExp['$1'])/0x64);_0x485743=_0x485743[_0x4794f5(0xf1)](0.01,0x1);const _0xbe75=this[_0x4794f5(0xa33)](),_0x2a281c=_0x485743*_0xbe75;if(_0x156054>_0x2a281c&&_0xbe75>_0x2a281c){_0x156054-=_0x2a281c;const _0x143ffb=VisuMZ[_0x4794f5(0x851)][_0x4794f5(0xa08)][_0x4794f5(0xff)][_0x4794f5(0x33b)],_0x25e1ba=Math[_0x4794f5(0x131)](0x1-_0x156054/((_0xbe75-_0x2a281c)*_0x143ffb+_0x156054),0.01);_0x156054*=_0x25e1ba,_0x156054+=_0x2a281c;}return _0x156054*_0x3aa383;},Game_Action['prototype'][_0x44ae36(0xa33)]=function(){const _0x3e394c=_0x44ae36;return this[_0x3e394c(0x4ec)]()[_0x3e394c(0x903)][_0x3e394c(0x54f)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x3e394c(0x7a5)]()[_0x3e394c(0x3e5)]();},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x8f7)]=function(_0x339bba){const _0x17caf3=_0x44ae36;let _0x92484a=this[_0x17caf3(0xa33)]();return _0x339bba[_0x17caf3(0xf1)](-_0x92484a,_0x92484a);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x243)]=function(){const _0x1f70db=_0x44ae36;if(!this['item']())return![];if(!$gameParty[_0x1f70db(0x720)]())return![];return(this[_0x1f70db(0x4ec)]()[_0x1f70db(0x903)]||'')[_0x1f70db(0x54f)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x8b2)]=function(_0x461ab5){const _0xff4626=_0x44ae36;if(this[_0xff4626(0x243)]()){let _0x2dbd2f=BattleManager[_0xff4626(0x955)];_0x461ab5/=_0x2dbd2f[_0xff4626(0x2d9)],this[_0xff4626(0x3d5)]()&&(_0x461ab5*=this[_0xff4626(0x7a5)]()[_0xff4626(0x1b6)]()+0x1),_0x461ab5=_0x461ab5>0x0?Math[_0xff4626(0xb2f)](_0x461ab5):Math['floor'](_0x461ab5);}return _0x461ab5;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1bb)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x529)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x529)]=function(_0x2ee599,_0x2196eb){const _0x46b427=_0x44ae36;let _0x406f5d=VisuMZ['BattleCore'][_0x46b427(0x1bb)][_0x46b427(0x689)](this,_0x2ee599,_0x2196eb);return this[_0x46b427(0x8b2)](_0x406f5d);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x5f7)]=function(_0x2dae1c,_0x4b5f0a){const _0xe87d46=_0x44ae36;let _0x3e04f3=(_0x2dae1c[_0xe87d46(0xafd)]*_0x4b5f0a[_0xe87d46(0x7a3)]+_0x4b5f0a[_0xe87d46(0xbeb)])*_0x2dae1c[_0xe87d46(0xadf)];_0x3e04f3=this[_0xe87d46(0x8b2)](_0x3e04f3),this[_0xe87d46(0xbd5)]()&&(_0x3e04f3*=this[_0xe87d46(0x7a5)]()[_0xe87d46(0x821)]),_0x3e04f3=Math['floor'](_0x3e04f3),_0x3e04f3!==0x0&&(_0x2dae1c[_0xe87d46(0xbb7)](_0x3e04f3),this[_0xe87d46(0x296)](_0x2dae1c));},Game_Action[_0x44ae36(0x137)]['itemEffectRecoverMp']=function(_0x112914,_0x51852d){const _0x555884=_0x44ae36;let _0x5ce9dd=(_0x112914[_0x555884(0x9e6)]*_0x51852d[_0x555884(0x7a3)]+_0x51852d[_0x555884(0xbeb)])*_0x112914['rec'];_0x5ce9dd=this[_0x555884(0x8b2)](_0x5ce9dd),this[_0x555884(0xbd5)]()&&(_0x5ce9dd*=this[_0x555884(0x7a5)]()[_0x555884(0x821)]),_0x5ce9dd=Math['floor'](_0x5ce9dd),_0x5ce9dd!==0x0&&(_0x112914[_0x555884(0x235)](_0x5ce9dd),this[_0x555884(0x296)](_0x112914));},Game_Action['prototype'][_0x44ae36(0x9f5)]=function(_0x2211cd,_0x13bf74){const _0x4f0d5e=_0x44ae36;let _0x5964f8=Math[_0x4f0d5e(0xb78)](_0x13bf74[_0x4f0d5e(0x7a3)]);_0x5964f8=this['disperseDamage'](_0x5964f8),_0x5964f8!==0x0&&(_0x2211cd[_0x4f0d5e(0x60e)](_0x5964f8),this[_0x4f0d5e(0x296)](_0x2211cd));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x53c)]=Game_Action['prototype']['apply'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0xb08)]=function(_0xd15b08){const _0x2105a3=_0x44ae36;if(_0xd15b08&&_0xd15b08[_0x2105a3(0x2fe)]())_0xd15b08['resetNameTempVisibility']();this['applyBattleCoreJS'](_0x2105a3(0x42b),_0xd15b08,0x0,!![]),VisuMZ[_0x2105a3(0x851)]['Game_Action_apply'][_0x2105a3(0x689)](this,_0xd15b08),this['applyBattleCoreJS']('PostApply%1JS',_0xd15b08,this[_0x2105a3(0x563)]||0x0,!![]),this[_0x2105a3(0x576)](_0xd15b08);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x8d3)]=function(_0x128fb2,_0xf9a5b7,_0x17ca76,_0x15a1ec){const _0x22ae7e=_0x44ae36;if(this[_0x22ae7e(0x5f0)]||this[_0x22ae7e(0xba8)])return;_0x17ca76=_0x17ca76||0x0;const _0x117236=_0x17ca76,_0x6ba19d=VisuMZ[_0x22ae7e(0x851)]['Settings'][_0x22ae7e(0x3ae)],_0x2ea253=_0x128fb2[_0x22ae7e(0x4be)]('');if(_0x6ba19d[_0x2ea253]){_0x17ca76=_0x6ba19d[_0x2ea253]['call'](this,_0x17ca76,_0xf9a5b7);if(_0x15a1ec)_0x17ca76=_0x117236;}let _0x4c5640=VisuMZ[_0x22ae7e(0x851)]['createKeyJS'](this[_0x22ae7e(0x4ec)](),_0x128fb2[_0x22ae7e(0x4be)](''));if(VisuMZ['BattleCore']['JS'][_0x4c5640]){_0x17ca76=VisuMZ[_0x22ae7e(0x851)]['JS'][_0x4c5640][_0x22ae7e(0x689)](this,this[_0x22ae7e(0x7a5)](),_0xf9a5b7,this[_0x22ae7e(0x4ec)](),_0x17ca76);if(_0x15a1ec)_0x17ca76=_0x117236;}for(const _0x58a11d of this[_0x22ae7e(0x7a5)]()[_0x22ae7e(0x96e)]()){if(!_0x58a11d)continue;_0x4c5640=VisuMZ[_0x22ae7e(0x851)]['createKeyJS'](_0x58a11d,_0x128fb2[_0x22ae7e(0x4be)](_0x22ae7e(0x98f)));if(VisuMZ[_0x22ae7e(0x851)]['JS'][_0x4c5640]){_0x17ca76=VisuMZ[_0x22ae7e(0x851)]['JS'][_0x4c5640][_0x22ae7e(0x689)](this,this[_0x22ae7e(0x7a5)](),_0xf9a5b7,_0x58a11d,_0x17ca76);if(_0x15a1ec)_0x17ca76=_0x117236;}}for(const _0x33f0ce of _0xf9a5b7[_0x22ae7e(0x96e)]()){if(!_0x33f0ce)continue;_0x4c5640=VisuMZ[_0x22ae7e(0x851)]['createKeyJS'](_0x33f0ce,_0x128fb2['format']('AsTarget'));if(VisuMZ[_0x22ae7e(0x851)]['JS'][_0x4c5640]){_0x17ca76=VisuMZ['BattleCore']['JS'][_0x4c5640][_0x22ae7e(0x689)](this,this[_0x22ae7e(0x7a5)](),_0xf9a5b7,_0x33f0ce,_0x17ca76);if(_0x15a1ec)_0x17ca76=_0x117236;}}return _0x17ca76;},Game_Action[_0x44ae36(0x137)]['actionBattleCoreJS']=function(_0x5076c9){const _0x5d1a18=_0x44ae36,_0x491ee3=this[_0x5d1a18(0x5f4)]||0x0,_0x102626=VisuMZ['BattleCore'][_0x5d1a18(0xa08)][_0x5d1a18(0x3ae)],_0x53eed3=_0x5076c9[_0x5d1a18(0x4be)]('');_0x102626[_0x53eed3]&&_0x102626[_0x53eed3]['call'](this,_0x491ee3);let _0x2bd93f=VisuMZ[_0x5d1a18(0x851)]['createKeyJS'](this[_0x5d1a18(0x4ec)](),_0x5076c9);VisuMZ[_0x5d1a18(0x851)]['JS'][_0x2bd93f]&&VisuMZ[_0x5d1a18(0x851)]['JS'][_0x2bd93f]['call'](this,this[_0x5d1a18(0x7a5)](),this[_0x5d1a18(0x7a5)](),this[_0x5d1a18(0x4ec)](),_0x491ee3);for(const _0x276d18 of this[_0x5d1a18(0x7a5)]()[_0x5d1a18(0x96e)]()){if(!_0x276d18)continue;_0x2bd93f=VisuMZ['BattleCore'][_0x5d1a18(0x554)](_0x276d18,_0x5076c9),VisuMZ[_0x5d1a18(0x851)]['JS'][_0x2bd93f]&&VisuMZ[_0x5d1a18(0x851)]['JS'][_0x2bd93f][_0x5d1a18(0x689)](this,this[_0x5d1a18(0x7a5)](),this[_0x5d1a18(0x7a5)](),_0x276d18,_0x491ee3);}},Game_Action[_0x44ae36(0x137)][_0x44ae36(0xaf7)]=function(){const _0x42cf88=_0x44ae36;return VisuMZ['BattleCore']['Settings'][_0x42cf88(0x3ae)][_0x42cf88(0x7a6)][_0x42cf88(0x689)](this);},Game_Action['prototype'][_0x44ae36(0x258)]=function(){const _0x225d7d=_0x44ae36;return VisuMZ['BattleCore']['Settings']['Mechanics'][_0x225d7d(0x9b5)];},Game_Action['prototype'][_0x44ae36(0x2e8)]=function(){const _0x47ce20=_0x44ae36;if(this[_0x47ce20(0x8d4)]===_0x47ce20(0x909))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this[_0x47ce20(0x4ec)]())return![];return this[_0x47ce20(0x4ec)]()['note'][_0x47ce20(0x54f)](/<JS TARGETS>/i);},Game_Action[_0x44ae36(0x137)]['isBattleCoreTargetScope']=function(){const _0x595308=_0x44ae36;if(this[_0x595308(0x8d4)]===_0x595308(0x909))return![];if(this[_0x595308(0x8d4)]===_0x595308(0x82d))return![];if(!this[_0x595308(0x67e)]&&this[_0x595308(0x7a5)]()['isConfused']())return![];if(this['isCustomBattleScope']())return!![];if(!this['item']())return![];return typeof this[_0x595308(0x4ec)]()[_0x595308(0xaa1)]===_0x595308(0x555);},VisuMZ[_0x44ae36(0x851)]['Game_Action_isForOpponent']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x74e)],Game_Action['prototype']['isForOpponent']=function(){const _0x213942=_0x44ae36;if(this[_0x213942(0x8d4)]===_0x213942(0x909))return![];if(this[_0x213942(0x8d4)]===_0x213942(0x82d))return!![];return this[_0x213942(0x742)]()&&!this[_0x213942(0x2e8)]()?this[_0x213942(0x1f6)]():VisuMZ['BattleCore']['Game_Action_isForOpponent']['call'](this);},Game_Action[_0x44ae36(0x137)]['isForOpponentBattleCore']=function(){const _0x3f77aa=_0x44ae36,_0x5a73e1=String(this['item']()[_0x3f77aa(0xaa1)]);if(_0x5a73e1['match'](/ANY/i))return!![];return _0x5a73e1['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x92f)]=Game_Action[_0x44ae36(0x137)]['isForFriend'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x242)]=function(){const _0x101f3a=_0x44ae36;if(this[_0x101f3a(0x8d4)]===_0x101f3a(0x909))return!![];if(this[_0x101f3a(0x8d4)]===_0x101f3a(0x82d))return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x101f3a(0x159)]():VisuMZ['BattleCore']['Game_Action_isForFriend']['call'](this);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x159)]=function(){const _0x173bea=_0x44ae36,_0x34600a=String(this[_0x173bea(0x4ec)]()['scope']);return _0x34600a[_0x173bea(0x54f)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0xa0a)]=function(){const _0x47fa53=_0x44ae36;if(this[_0x47fa53(0x742)]()&&!this[_0x47fa53(0x2e8)]()){const _0x2ab6dd=String(this[_0x47fa53(0x4ec)]()[_0x47fa53(0xaa1)]);return _0x2ab6dd[_0x47fa53(0x54f)](/(?:ENEMY|FOE)/i)&&_0x2ab6dd[_0x47fa53(0x54f)](/OR/i)&&_0x2ab6dd['match'](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x44ae36(0x137)]['isForAnyoneFocusFriends']=function(){const _0x1a38d8=_0x44ae36;if(this['isForAnyone']()){const _0x4d6b9f=String(this[_0x1a38d8(0x4ec)]()[_0x1a38d8(0xaa1)]);if(_0x4d6b9f[_0x1a38d8(0x54f)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x2dc)]=function(){const _0x5472f6=_0x44ae36;if(this[_0x5472f6(0xa0a)]()){const _0x565414=String(this[_0x5472f6(0x4ec)]()['scope']);if(_0x565414[_0x5472f6(0x54f)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x2f0)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x72f)],Game_Action[_0x44ae36(0x137)]['isForAliveFriend']=function(){const _0x5a5360=_0x44ae36;if(this[_0x5a5360(0x8d4)]===_0x5a5360(0x909))return!![];return this[_0x5a5360(0x742)]()&&!this['isCustomBattleScope']()?this[_0x5a5360(0x367)]():VisuMZ[_0x5a5360(0x851)]['Game_Action_isForAliveFriend'][_0x5a5360(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['Game_Action_isForDeadFriend']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x217)],Game_Action[_0x44ae36(0x137)]['isForDeadFriend']=function(){const _0xd0a1ba=_0x44ae36;if(this['_targetBattlerKey']===_0xd0a1ba(0x909))return VisuMZ[_0xd0a1ba(0x851)][_0xd0a1ba(0x57d)][_0xd0a1ba(0x689)](this);return VisuMZ[_0xd0a1ba(0x851)][_0xd0a1ba(0x57d)][_0xd0a1ba(0x689)](this);},Game_Action[_0x44ae36(0x137)]['isForAliveFriendBattleCore']=function(){const _0x22fe2c=_0x44ae36;if(this[_0x22fe2c(0xa0a)]())return!![];return![];},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x638)]=function(){const _0x488b25=_0x44ae36;return this[_0x488b25(0x4ec)]()&&this['item']()[_0x488b25(0x903)][_0x488b25(0x54f)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xb9a)]=Game_Action[_0x44ae36(0x137)]['isForOne'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0xdd)]=function(){const _0x1190ab=_0x44ae36;if(this[_0x1190ab(0x8d4)]===_0x1190ab(0x909))return![];if(this['_targetBattlerKey']===_0x1190ab(0x82d))return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x1190ab(0x405)]():VisuMZ[_0x1190ab(0x851)]['Game_Action_isForOne'][_0x1190ab(0x689)](this);},Game_Action[_0x44ae36(0x137)]['isForOneBattleCore']=function(){const _0x250db9=_0x44ae36;if(this[_0x250db9(0xa0a)]())return!![];return![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xb56)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x352)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x352)]=function(){const _0xc7a1f2=_0x44ae36;if(this['_targetBattlerKey']===_0xc7a1f2(0x909))return![];if(this['_targetBattlerKey']===_0xc7a1f2(0x82d))return![];return this[_0xc7a1f2(0x742)]()&&!this[_0xc7a1f2(0x2e8)]()?this[_0xc7a1f2(0x78f)]():VisuMZ[_0xc7a1f2(0x851)][_0xc7a1f2(0xb56)][_0xc7a1f2(0x689)](this);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x78f)]=function(){const _0x1f9543=_0x44ae36,_0x2739ae=String(this['item']()[_0x1f9543(0xaa1)]);return _0x2739ae[_0x1f9543(0x54f)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x9e1)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x695)],Game_Action['prototype'][_0x44ae36(0x695)]=function(){const _0x1b6a78=_0x44ae36;if(this[_0x1b6a78(0x8d4)]===_0x1b6a78(0x909))return!![];if(this['_targetBattlerKey']===_0x1b6a78(0x82d))return!![];return VisuMZ[_0x1b6a78(0x851)][_0x1b6a78(0x9e1)][_0x1b6a78(0x689)](this);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x6e4)]=function(){const _0x185d54=_0x44ae36;if(!this[_0x185d54(0x4ec)]())return![];if(this[_0x185d54(0x217)]())return![];return(this[_0x185d54(0x4ec)]()[_0x185d54(0x903)]||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x598)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0xa4e)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0xa4e)]=function(_0x4cae8f){const _0x5578dc=_0x44ae36;if(this[_0x5578dc(0x638)]()&&_0x4cae8f===this[_0x5578dc(0x7a5)]())return![];return VisuMZ[_0x5578dc(0x851)][_0x5578dc(0x598)]['call'](this,_0x4cae8f);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6f9)]=Game_Action['prototype']['itemTargetCandidates'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x6ee)]=function(){const _0xd2734d=_0x44ae36,_0x2fbd41=VisuMZ[_0xd2734d(0x851)][_0xd2734d(0x6f9)][_0xd2734d(0x689)](this);if(this[_0xd2734d(0x638)]())_0x2fbd41[_0xd2734d(0xac9)](this[_0xd2734d(0x7a5)]());return _0x2fbd41;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xb2b)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x2a9)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x2a9)]=function(){const _0x20dc1a=_0x44ae36;return this[_0x20dc1a(0x742)]()&&!this['isCustomBattleScope']()?this[_0x20dc1a(0xa6a)]():VisuMZ[_0x20dc1a(0x851)][_0x20dc1a(0xb2b)][_0x20dc1a(0x689)](this);},Game_Action['prototype'][_0x44ae36(0xa6a)]=function(){const _0x28c034=_0x44ae36,_0x255e0f=String(this[_0x28c034(0x4ec)]()['scope']);if(_0x255e0f[_0x28c034(0x54f)](/RANDOM/i))return![];if(_0x255e0f[_0x28c034(0x54f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x255e0f['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x255e0f[_0x28c034(0x54f)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x255e0f[_0x28c034(0x54f)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x28c034(0x851)][_0x28c034(0xb2b)][_0x28c034(0x689)](this);},VisuMZ['BattleCore'][_0x44ae36(0x7df)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x870)],Game_Action[_0x44ae36(0x137)]['makeTargets']=function(){const _0x3ca024=_0x44ae36;let _0x38f13b=[];return this[_0x3ca024(0x742)]()?this[_0x3ca024(0x2e8)]()?_0x38f13b=this['makeTargetsBattleCoreJS']():_0x38f13b=this[_0x3ca024(0xb19)]():_0x38f13b=VisuMZ[_0x3ca024(0x851)][_0x3ca024(0x7df)][_0x3ca024(0x689)](this),_0x38f13b=this['applyTargetFilters'](_0x38f13b),_0x38f13b;},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x631)]=function(){const _0x5224b5=_0x44ae36;return this['subject']()['isActor']()&&!this['subject']()[_0x5224b5(0x330)]();},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x680)]=function(){const _0x48d7dc=_0x44ae36,_0x2d9b66=VisuMZ[_0x48d7dc(0x851)]['createKeyJS'](this[_0x48d7dc(0x4ec)](),_0x48d7dc(0x158));if(VisuMZ['BattleCore']['JS'][_0x2d9b66]){targets=VisuMZ[_0x48d7dc(0x851)][_0x48d7dc(0x7df)][_0x48d7dc(0x689)](this);const _0x17e303=VisuMZ[_0x48d7dc(0x851)][_0x48d7dc(0x554)](this[_0x48d7dc(0x4ec)](),'Targets');return targets=VisuMZ[_0x48d7dc(0x851)]['JS'][_0x17e303]['call'](this,this['subject'](),targets),this[_0x48d7dc(0xbfe)](targets);}return this['makeTargetsBattleCore']();},Game_Action[_0x44ae36(0x137)][_0x44ae36(0xb19)]=function(){const _0x287727=_0x44ae36;let _0x33f3f9=[];const _0x12041e=String(this[_0x287727(0x4ec)]()['scope']);if(this['isForAnyoneFocusOpponents']())return this[_0x287727(0x631)]()?(_0x33f3f9=this['getBattlerKeyTargets'](),this[_0x287727(0xbfe)](_0x33f3f9)):(this[_0x287727(0x98c)]=-0x1,_0x33f3f9[_0x287727(0xa04)](...this[_0x287727(0x64d)]()),this[_0x287727(0xbfe)](_0x33f3f9));if(this[_0x287727(0xa43)]()){if(this[_0x287727(0x631)]())return _0x33f3f9=this[_0x287727(0x73e)](),this[_0x287727(0xbfe)](_0x33f3f9);else{if(Imported[_0x287727(0x299)]){if(VisuMZ[_0x287727(0x152)][_0x287727(0x722)]<1.19){let _0x5b8e26='';_0x5b8e26+=_0x287727(0x29c),_0x5b8e26+=_0x287727(0x3fe),_0x5b8e26+=_0x287727(0xa5b),alert(_0x5b8e26),SceneManager[_0x287727(0x804)]();}}return this[_0x287727(0x98c)]=-0x1,_0x33f3f9[_0x287727(0xa04)](...this[_0x287727(0x698)]()),this[_0x287727(0xbfe)](_0x33f3f9);}}if(_0x12041e[_0x287727(0x54f)](/(\d+) RANDOM ANY/i)){let _0x3549f4=Number(RegExp['$1']);while(_0x3549f4--){const _0x71cfb4=Math[_0x287727(0x812)](0x2)===0x0?this[_0x287727(0x867)]():this[_0x287727(0xd9)]();_0x33f3f9[_0x287727(0xa04)](_0x71cfb4[_0x287727(0x354)]());}return this[_0x287727(0xbfe)](_0x33f3f9);}if(_0x12041e['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x425782=Number(RegExp['$1']);while(_0x425782--){_0x33f3f9[_0x287727(0xa04)](this['opponentsUnit']()[_0x287727(0x354)]());}return this[_0x287727(0xbfe)](_0x33f3f9);}if(_0x12041e[_0x287727(0x54f)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x8f3d9f=Number(RegExp['$1']);while(_0x8f3d9f--){_0x33f3f9[_0x287727(0xa04)](this[_0x287727(0xd9)]()[_0x287727(0x354)]());}return this[_0x287727(0xbfe)](_0x33f3f9);}if(_0x12041e[_0x287727(0x54f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x33f3f9['push'](...this[_0x287727(0xd9)]()['aliveMembers']()['filter'](_0x526b30=>_0x526b30!==this[_0x287727(0x7a5)]())),this[_0x287727(0xbfe)](_0x33f3f9);return VisuMZ['BattleCore']['Game_Action_makeTargets']['call'](this);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x7cc)]=function(_0x4a1d63){const _0x13287e=_0x44ae36,_0x353840=[];for(let _0x3943a1=0x0;_0x3943a1<this[_0x13287e(0x67f)]();_0x3943a1++){_0x353840[_0x13287e(0xa04)](_0x4a1d63['trueRandomTarget']());}return _0x353840;},Game_Action['prototype']['applyTargetFilters']=function(_0x4c14c4){const _0xb24500=_0x44ae36;if(!this[_0xb24500(0x4ec)]())return _0x4c14c4;const _0x25cc3a=this[_0xb24500(0x4ec)]()[_0xb24500(0x903)];if(this[_0xb24500(0x638)]()){this[_0xb24500(0x695)]()&&_0x4c14c4[_0xb24500(0xac9)](this[_0xb24500(0x7a5)]());if(_0x4c14c4[_0xb24500(0x76b)](this[_0xb24500(0x7a5)]())){const _0xb68663=this['friendsUnit']()['aliveMembers']()[_0xb24500(0xac9)](this['subject']());if(_0xb68663[_0xb24500(0x2d9)]>0x0){_0xb68663['sort']((_0x4c372a,_0x13a00c)=>_0x4c372a[_0xb24500(0x7c7)]()-_0x13a00c['hpRate']());while(_0x4c14c4['includes'](this[_0xb24500(0x7a5)]())){const _0x451a9d=_0x4c14c4[_0xb24500(0x83c)](this['subject']());_0x4c14c4[_0x451a9d]=_0xb68663[Math[_0xb24500(0x812)](_0xb68663['length'])];}}else _0x4c14c4[_0xb24500(0xac9)](this[_0xb24500(0x7a5)]());}}return _0x4c14c4;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x57f)]=Game_Action[_0x44ae36(0x137)]['itemEffectAddAttackState'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x34b)]=function(_0x4ceb88,_0x129c29){const _0xefc2f0=_0x44ae36;VisuMZ['BattleCore'][_0xefc2f0(0x57f)][_0xefc2f0(0x689)](this,_0x4ceb88,_0x129c29);if(!_0x4ceb88[_0xefc2f0(0x3ed)]())return;for(const _0x3bc694 of this['subject']()[_0xefc2f0(0x419)]()){if(_0x3bc694===_0x4ceb88['deathStateId']()){let _0x130832=_0x129c29[_0xefc2f0(0x7a3)];_0x130832*=_0x4ceb88[_0xefc2f0(0xbc0)](_0x3bc694),_0x130832*=this[_0xefc2f0(0x7a5)]()[_0xefc2f0(0x963)](_0x3bc694),_0x130832*=this[_0xefc2f0(0x88d)](_0x4ceb88),Math[_0xefc2f0(0x38d)]()<_0x130832&&(_0x4ceb88[_0xefc2f0(0x5b6)]=!![],this[_0xefc2f0(0x296)](_0x4ceb88));}}},VisuMZ[_0x44ae36(0x851)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x12b)],Game_Action['prototype'][_0x44ae36(0x12b)]=function(_0x47aaaf,_0x3bd546){const _0x5953f7=_0x44ae36;VisuMZ[_0x5953f7(0x851)]['Game_Action_itemEffectAddNormalState']['call'](this,_0x47aaaf,_0x3bd546);if(!_0x47aaaf[_0x5953f7(0x3ed)]())return;if(_0x3bd546['dataId']!==_0x47aaaf[_0x5953f7(0x102)]())return;let _0x5893cd=_0x3bd546[_0x5953f7(0x7a3)];!this[_0x5953f7(0x8f1)]()&&(_0x5893cd*=_0x47aaaf[_0x5953f7(0xbc0)](_0x3bd546[_0x5953f7(0x7a2)]),_0x5893cd*=this[_0x5953f7(0x88d)](_0x47aaaf)),Math['random']()<_0x5893cd&&(_0x47aaaf[_0x5953f7(0x5b6)]=!![],this['makeSuccess'](_0x47aaaf));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x61b)]=Game_Action[_0x44ae36(0x137)]['applyGlobal'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x4c0)]=function(){const _0x252414=_0x44ae36;VisuMZ['BattleCore'][_0x252414(0x61b)][_0x252414(0x689)](this),this['applyGlobalCommonEventNotetags'](),this[_0x252414(0x23f)]();},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x8a0)]=function(){const _0x111d8c=_0x44ae36;if(!SceneManager[_0x111d8c(0xb75)]())return;const _0x35bd0b=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x412eef=this[_0x111d8c(0x4ec)]()['note'][_0x111d8c(0x54f)](_0x35bd0b);if(_0x412eef)for(const _0x313558 of _0x412eef){if(!_0x313558)continue;_0x313558['match'](_0x35bd0b);const _0x5ac438=String(RegExp['$1'])[_0x111d8c(0x8c4)](',')[_0x111d8c(0x6e5)](_0x3e7b00=>String(_0x3e7b00)[_0x111d8c(0x9de)]()),_0x3a3c27=_0x5ac438['map'](_0x2dc64d=>DataManager[_0x111d8c(0x356)](_0x2dc64d));for(const _0x2c5e40 of _0x3a3c27){const _0x3cbbf3=$dataCommonEvents[_0x2c5e40];_0x3cbbf3&&$gameTemp[_0x111d8c(0xab5)](_0x2c5e40);}}},DataManager[_0x44ae36(0x356)]=function(_0x437ba5){const _0x3a72b0=_0x44ae36;_0x437ba5=_0x437ba5[_0x3a72b0(0xaf2)]()[_0x3a72b0(0x9de)](),this[_0x3a72b0(0x2a7)]=this[_0x3a72b0(0x2a7)]||{};if(this['_commonEventIDs'][_0x437ba5])return this['_commonEventIDs'][_0x437ba5];for(const _0x116480 of $dataCommonEvents){if(!_0x116480)continue;let _0x257429=_0x116480[_0x3a72b0(0x674)];_0x257429=_0x257429[_0x3a72b0(0xae9)](/\x1I\[(\d+)\]/gi,''),_0x257429=_0x257429[_0x3a72b0(0xae9)](/\\I\[(\d+)\]/gi,''),this[_0x3a72b0(0x2a7)][_0x257429[_0x3a72b0(0xaf2)]()[_0x3a72b0(0x9de)]()]=_0x116480['id'];}return this[_0x3a72b0(0x2a7)][_0x437ba5]||0x0;},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x23f)]=function(){const _0x121c8f=_0x44ae36;if(!SceneManager[_0x121c8f(0xb75)]())return;const _0x4b1e8a=VisuMZ['BattleCore'][_0x121c8f(0xa08)][_0x121c8f(0x3ae)];_0x4b1e8a[_0x121c8f(0x96c)]&&$gameSwitches['setValue'](_0x4b1e8a[_0x121c8f(0x96c)],![]),_0x4b1e8a[_0x121c8f(0x9a9)]&&$gameSwitches[_0x121c8f(0xa0c)](_0x4b1e8a[_0x121c8f(0x9a9)],![]),_0x4b1e8a[_0x121c8f(0x59e)]&&$gameVariables[_0x121c8f(0xa0c)](_0x4b1e8a[_0x121c8f(0x59e)],0x0),_0x4b1e8a[_0x121c8f(0x72c)]&&$gameVariables['setValue'](_0x4b1e8a[_0x121c8f(0x72c)],0x0);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x576)]=function(_0x2b6da4){const _0x1ce912=_0x44ae36;if(!SceneManager[_0x1ce912(0xb75)]())return;if(!_0x2b6da4)return;const _0xe2a816=_0x2b6da4['result'](),_0xa44c67=VisuMZ[_0x1ce912(0x851)][_0x1ce912(0xa08)][_0x1ce912(0x3ae)];_0xa44c67['SwitchCritical']&&_0xe2a816[_0x1ce912(0x38e)]&&$gameSwitches[_0x1ce912(0xa0c)](_0xa44c67[_0x1ce912(0x96c)],!![]);_0xa44c67['SwitchMissEvade']&&(_0xe2a816['missed']||_0xe2a816['evaded'])&&$gameSwitches[_0x1ce912(0xa0c)](_0xa44c67['SwitchMissEvade'],!![]);if(_0xa44c67['VariableDmg']){let _0x83e9d4=$gameVariables[_0x1ce912(0x92b)](_0xa44c67[_0x1ce912(0x59e)]);_0xe2a816[_0x1ce912(0x3ac)]>0x0&&(_0x83e9d4+=Math[_0x1ce912(0x8d7)](_0xe2a816['hpDamage'])),$gameVariables[_0x1ce912(0xa0c)](_0xa44c67['VariableDmg'],_0x83e9d4);}if(_0xa44c67[_0x1ce912(0x72c)]){let _0x88374f=$gameVariables[_0x1ce912(0x92b)](_0xa44c67['VariableHeal']);_0xe2a816[_0x1ce912(0x3ac)]<0x0&&(_0x88374f+=Math[_0x1ce912(0x8d7)](_0xe2a816[_0x1ce912(0x3ac)])),$gameVariables['setValue'](_0xa44c67[_0x1ce912(0x72c)],_0x88374f);}},VisuMZ[_0x44ae36(0x851)]['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x44ae36(0x851)]['Game_Action_executeHpDamage']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x6e2)],Game_Action['prototype'][_0x44ae36(0x6e2)]=function(_0x2303fd,_0x8c1e2f){const _0x20f975=_0x44ae36;VisuMZ['BattleCore']['Game_Action_executeHpDamage'][_0x20f975(0x689)](this,_0x2303fd,_0x8c1e2f);!this[_0x20f975(0xab9)]()&&_0x2303fd&&_0x2303fd[_0x20f975(0x70f)]()[_0x20f975(0x3ac)]>0x0&&this[_0x20f975(0x373)]('HP',_0x2303fd,_0x2303fd['result']()['hpDamage']);if(_0x2303fd){this[_0x20f975(0x17c)]=this['_executeHpDamage']||{};const _0x5480cc=_0x2303fd[_0x20f975(0x770)]();this[_0x20f975(0x17c)][_0x5480cc]=_0x8c1e2f;}},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x5d8)]=function(_0x4531c9){const _0x3eca84=_0x44ae36;this[_0x3eca84(0x17c)]=this[_0x3eca84(0x17c)]||{};const _0x550acd=_0x4531c9['battlerKey']();return this[_0x3eca84(0x17c)][_0x550acd]||0x0;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa60)]=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x726)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x726)]=function(_0x8ac52d,_0x26b3b8){const _0x1308cc=_0x44ae36;VisuMZ[_0x1308cc(0x851)][_0x1308cc(0xa60)][_0x1308cc(0x689)](this,_0x8ac52d,_0x26b3b8),!this[_0x1308cc(0xab9)]()&&_0x8ac52d&&_0x8ac52d['result']()[_0x1308cc(0xa56)]>0x0&&this[_0x1308cc(0x373)]('MP',_0x8ac52d,_0x8ac52d[_0x1308cc(0x70f)]()[_0x1308cc(0xa56)]);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x373)]=function(_0x3c720d,_0x4437f7,_0x526188){const _0x5c3a53=_0x44ae36;_0x3c720d=_0x3c720d[_0x5c3a53(0xaf2)]()[_0x5c3a53(0x9de)]();const _0x5b488e=this['lifeStealRate'](_0x3c720d,_0x4437f7);if(_0x5b488e<=0x0)return;const _0x4bd5de=Math['round'](_0x526188*_0x5b488e);if(_0x4bd5de<=0x0)return;let _0x1022f9=this[_0x5c3a53(0x7a5)]();if(this[_0x5c3a53(0x5b9)])_0x1022f9=this[_0x5c3a53(0x5b9)];const _0x541354=_0x4437f7[_0x5c3a53(0x58d)](_0x3c720d)?-0x1:0x1;if(_0x3c720d==='HP')_0x1022f9[_0x5c3a53(0xbb7)](_0x541354*_0x4bd5de);if(_0x3c720d==='MP')_0x1022f9[_0x5c3a53(0x235)](_0x541354*_0x4bd5de);},Game_Action[_0x44ae36(0x137)][_0x44ae36(0xa35)]=function(_0x1b8581,_0x707a32){const _0x4ea085=_0x44ae36;if(this['isCancelLifeSteal'](_0x1b8581))return 0x0;if(this['subject']()[_0x4ea085(0x336)](_0x1b8581))return 0x0;if(_0x707a32['isGuardLifeSteal'](_0x1b8581))return 0x0;let _0x1cd9d0=0x0;return _0x1cd9d0+=this[_0x4ea085(0x714)](_0x1b8581),_0x1cd9d0+=this[_0x4ea085(0x7a5)]()[_0x4ea085(0xa35)](_0x1b8581,this[_0x4ea085(0x4ec)]()[_0x4ea085(0x33a)]),_0x1cd9d0['clamp'](0x0,0x1);},Game_Action['prototype']['isCancelLifeSteal']=function(_0xfc3083){const _0x2a0a1f=_0x44ae36;_0xfc3083=_0xfc3083['toUpperCase']()['trim']();const _0x2b60e2=VisuMZ[_0x2a0a1f(0x851)]['LifeStealRegExp'],_0x1490ef=this[_0x2a0a1f(0x4ec)]()['note']||'';if(_0x1490ef[_0x2a0a1f(0x54f)](_0x2b60e2[_0x2a0a1f(0x528)]))return!![];if(_0xfc3083==='HP'&&_0x1490ef[_0x2a0a1f(0x54f)](_0x2b60e2[_0x2a0a1f(0x334)]))return!![];if(_0xfc3083==='MP'&&_0x1490ef[_0x2a0a1f(0x54f)](_0x2b60e2[_0x2a0a1f(0x7dc)]))return!![];return![];},Game_Action[_0x44ae36(0x137)][_0x44ae36(0x714)]=function(_0x191cf3){const _0x2dabfb=_0x44ae36,_0x215136=VisuMZ[_0x2dabfb(0x851)][_0x2dabfb(0x13b)],_0xaa65f=this['item']()[_0x2dabfb(0x903)]||'';_0x191cf3=_0x191cf3[_0x2dabfb(0xaf2)]()['trim']();const _0x46b78f=_0xaa65f[_0x2dabfb(0x54f)](_0x215136['lifeSteaItem']);if(_0x46b78f)for(const _0x1a44e4 of _0x46b78f){_0x1a44e4['match'](_0x215136['lifeSteaItem']);const _0x50b3b9=String(RegExp['$1'])[_0x2dabfb(0xaf2)]()[_0x2dabfb(0x9de)](),_0x299b70=Number(RegExp['$2'])*0.01;if(_0x50b3b9!==_0x191cf3)continue;return _0x299b70;}return 0x0;},Game_BattlerBase[_0x44ae36(0x137)]['lifeStealRate']=function(_0x130384,_0x4156c2){const _0x5099d5=_0x44ae36,_0xfd8ef5=VisuMZ[_0x5099d5(0x851)][_0x5099d5(0x13b)];let _0x3c7156=0x0;_0x130384=_0x130384[_0x5099d5(0xaf2)]()['trim']();for(const _0x596a3d of this['traitObjects']()){if(!_0x596a3d)continue;const _0x55309e=_0x596a3d['note']||'',_0x2bc727=_0x55309e['match'](_0xfd8ef5[_0x5099d5(0x29f)]);if(_0x2bc727)for(const _0x3b940a of _0x2bc727){_0x3b940a[_0x5099d5(0x54f)](_0xfd8ef5[_0x5099d5(0x29f)]);const _0x54282e=String(RegExp['$1'])['toUpperCase']()['trim'](),_0x4aebf3=String(RegExp['$2']),_0x304c2b=Number(RegExp['$3'])*0.01;if(_0x54282e!==_0x130384)continue;if(_0x4156c2===Game_Action['HITTYPE_CERTAIN']&&_0x4aebf3['match'](/CERTAIN/i))_0x3c7156+=_0x304c2b;else{if(_0x4156c2===Game_Action[_0x5099d5(0x747)]&&_0x4aebf3[_0x5099d5(0x54f)](/PHYS/i))_0x3c7156+=_0x304c2b;else _0x4156c2===Game_Action[_0x5099d5(0x413)]&&_0x4aebf3[_0x5099d5(0x54f)](/MAGIC/i)&&(_0x3c7156+=_0x304c2b);}}}return _0x3c7156;},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x336)]=function(_0x19aa89){const _0x15d7f2=_0x44ae36;_0x19aa89=_0x19aa89[_0x15d7f2(0xaf2)]()[_0x15d7f2(0x9de)]();const _0x2723cd=VisuMZ[_0x15d7f2(0x851)][_0x15d7f2(0x13b)];for(const _0x3af8a6 of this['traitObjects']()){if(!_0x3af8a6)continue;const _0x4b25ea=_0x3af8a6[_0x15d7f2(0x903)]||'';if(_0x4b25ea[_0x15d7f2(0x54f)](_0x2723cd['disarmLifeSteal']))return!![];if(_0x19aa89==='HP'&&_0x4b25ea[_0x15d7f2(0x54f)](_0x2723cd[_0x15d7f2(0x1ab)]))return!![];if(_0x19aa89==='MP'&&_0x4b25ea[_0x15d7f2(0x54f)](_0x2723cd[_0x15d7f2(0x9ad)]))return!![];}return![];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x58d)]=function(_0x1fbd94){const _0x11cd5f=_0x44ae36;_0x1fbd94=_0x1fbd94['toUpperCase']()['trim']();const _0x3bd934=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0x100b47 of this[_0x11cd5f(0x96e)]()){if(!_0x100b47)continue;const _0x13f159=_0x100b47[_0x11cd5f(0x903)]||'';if(_0x13f159[_0x11cd5f(0x54f)](_0x3bd934[_0x11cd5f(0x47e)]))return!![];if(_0x1fbd94==='HP'&&_0x13f159[_0x11cd5f(0x54f)](_0x3bd934['negativeHpLifeSteal']))return!![];if(_0x1fbd94==='MP'&&_0x13f159['match'](_0x3bd934[_0x11cd5f(0x81d)]))return!![];}return![];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0xa3f)]=function(_0x33fa5f){const _0x3cc1e1=_0x44ae36;_0x33fa5f=_0x33fa5f[_0x3cc1e1(0xaf2)]()[_0x3cc1e1(0x9de)]();const _0x374e41=VisuMZ['BattleCore'][_0x3cc1e1(0x13b)];for(const _0x319a62 of this[_0x3cc1e1(0x96e)]()){if(!_0x319a62)continue;const _0x35b1f5=_0x319a62[_0x3cc1e1(0x903)]||'';if(_0x35b1f5[_0x3cc1e1(0x54f)](_0x374e41[_0x3cc1e1(0x590)]))return!![];if(_0x33fa5f==='HP'&&_0x35b1f5['match'](_0x374e41['guardHpLifeSteal']))return!![];if(_0x33fa5f==='MP'&&_0x35b1f5[_0x3cc1e1(0x54f)](_0x374e41[_0x3cc1e1(0x9f6)]))return!![];}return![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x516)]=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x443)],Game_BattlerBase[_0x44ae36(0x137)]['initMembers']=function(){const _0x15c7cd=_0x44ae36;VisuMZ[_0x15c7cd(0x851)][_0x15c7cd(0x516)][_0x15c7cd(0x689)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype'][_0x44ae36(0xb85)]=function(){this['_immortal']=![];},VisuMZ[_0x44ae36(0x851)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x749)],Game_BattlerBase[_0x44ae36(0x137)]['refresh']=function(){const _0x5598c2=_0x44ae36;this[_0x5598c2(0x48b)]={},VisuMZ[_0x5598c2(0x851)][_0x5598c2(0xade)][_0x5598c2(0x689)](this);},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x750)]=function(_0x151e4f){const _0x1d8398=_0x44ae36;return this[_0x1d8398(0x48b)]=this[_0x1d8398(0x48b)]||{},this[_0x1d8398(0x48b)][_0x151e4f]!==undefined;},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x3e5)]=function(){const _0x172c60=_0x44ae36;if(this[_0x172c60(0x48b)][_0x172c60(0x3e5)]!==undefined)return this[_0x172c60(0x48b)][_0x172c60(0x3e5)];const _0xed66f0=/<DAMAGE CAP:[ ](\d+)>/i,_0x1a294d=this[_0x172c60(0x96e)]()[_0x172c60(0x6e5)](_0x85c34f=>_0x85c34f&&_0x85c34f[_0x172c60(0x903)][_0x172c60(0x54f)](_0xed66f0)?Number(RegExp['$1']):0x0);let _0x23cd63=_0x1a294d['length']>0x0?Math[_0x172c60(0x131)](..._0x1a294d):0x0;if(_0x23cd63<=0x0)_0x23cd63=VisuMZ['BattleCore'][_0x172c60(0xa08)][_0x172c60(0xff)][_0x172c60(0x215)];return this[_0x172c60(0x48b)]['hardDamageCap']=_0x23cd63,this[_0x172c60(0x48b)][_0x172c60(0x3e5)];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x1fc)]=function(){const _0x2aa652=_0x44ae36;if(this['_cache']['softDamageCap']!==undefined)return this[_0x2aa652(0x48b)][_0x2aa652(0x8a5)];let _0x3dfa9d=VisuMZ[_0x2aa652(0x851)][_0x2aa652(0xa08)][_0x2aa652(0xff)][_0x2aa652(0xbde)];const _0x1322b2=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x1f6631=this[_0x2aa652(0x96e)]()['map'](_0x112397=>_0x112397&&_0x112397[_0x2aa652(0x903)][_0x2aa652(0x54f)](_0x1322b2)?Number(RegExp['$1'])/0x64:0x0);return _0x3dfa9d=_0x1f6631['reduce']((_0x25c61f,_0x17b7d8)=>_0x25c61f+_0x17b7d8,_0x3dfa9d),this['_cache'][_0x2aa652(0x8a5)]=_0x3dfa9d,this[_0x2aa652(0x48b)]['softDamageCap'][_0x2aa652(0xf1)](0.01,0x1);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xbfb)]=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0xa3d)],Game_BattlerBase['prototype']['die']=function(){const _0x317db2=_0x44ae36;VisuMZ['BattleCore'][_0x317db2(0xbfb)]['call'](this),SceneManager[_0x317db2(0xb75)]()&&(this[_0x317db2(0x7f4)](_0x317db2(0x100)),this['_performDamageMotion']=undefined);},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x7ef)]=function(){const _0x5e5b9a=_0x44ae36;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x5e5b9a(0x97d)][_0x5e5b9a(0x4b4)])return null;return SceneManager['_scene'][_0x5e5b9a(0x4b4)][_0x5e5b9a(0x914)](this);},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0xd7)]=function(){const _0x3787dd=_0x44ae36;return VisuMZ[_0x3787dd(0x851)][_0x3787dd(0xa08)]['Actor']['AnchorX'];},Game_BattlerBase[_0x44ae36(0x137)]['svBattlerAnchorY']=function(){const _0x2178ab=_0x44ae36;return VisuMZ['BattleCore'][_0x2178ab(0xa08)][_0x2178ab(0x908)][_0x2178ab(0x7b8)];},Game_BattlerBase['prototype'][_0x44ae36(0xb0b)]=function(){const _0x5d489e=_0x44ae36;return this[_0x5d489e(0x30c)]&&this[_0x5d489e(0x30c)]()?VisuMZ[_0x5d489e(0x851)][_0x5d489e(0xa08)][_0x5d489e(0x908)][_0x5d489e(0x11c)]:VisuMZ[_0x5d489e(0x851)][_0x5d489e(0xa08)][_0x5d489e(0x2e0)]['Shadow'];},Game_BattlerBase[_0x44ae36(0x137)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x132)]=function(){return 0x0;},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x565)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x44ae36(0xa62)]=function(_0x3637d4){const _0x3cd2aa=_0x44ae36;if(!_0x3637d4)return 0x0;let _0x563ec7=0x0;const _0x1923e9=_0x3637d4[_0x3cd2aa(0x903)];return _0x1923e9[_0x3cd2aa(0x54f)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x563ec7+=Number(RegExp['$1'])),_0x1923e9[_0x3cd2aa(0x54f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x563ec7+=Number(RegExp['$1'])),_0x563ec7;},Game_BattlerBase[_0x44ae36(0x137)]['createBattleUIOffsetY']=function(_0x40e11c){const _0x5b750c=_0x44ae36;if(!_0x40e11c)return 0x0;let _0x2b3fab=0x0;const _0x5cd7d6=_0x40e11c['note'];return _0x5cd7d6[_0x5b750c(0x54f)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x2b3fab+=Number(RegExp['$1'])),_0x5cd7d6[_0x5b750c(0x54f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x2b3fab+=Number(RegExp['$2'])),_0x2b3fab;},VisuMZ[_0x44ae36(0x851)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x4e7)],Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x4e7)]=function(_0x25bcc8){const _0x2f45c2=_0x44ae36;if(_0x25bcc8===this[_0x2f45c2(0x102)]()&&this[_0x2f45c2(0x3ed)]())return!![];return VisuMZ['BattleCore'][_0x2f45c2(0x557)][_0x2f45c2(0x689)](this,_0x25bcc8);},Game_BattlerBase[_0x44ae36(0x137)]['isImmortal']=function(){const _0x2578b2=_0x44ae36;return this[_0x2578b2(0x513)];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x570)]=function(_0x483757){const _0x573471=_0x44ae36;_0x483757?this[_0x573471(0x301)]():this[_0x573471(0x43b)]();},Game_BattlerBase[_0x44ae36(0x137)]['addImmortal']=function(){const _0x26d6e0=_0x44ae36;if(this[_0x26d6e0(0xb6d)]())return;this['_immortal']=!![],this[_0x26d6e0(0x5b6)]=![];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x43b)]=function(){const _0x1b58c0=_0x44ae36,_0x33d3bf=this[_0x1b58c0(0x1c1)]();this[_0x1b58c0(0x513)]=![],_0x33d3bf&&this['_deathStateApplied']&&this[_0x1b58c0(0xa3d)](),this['_deathStateApplied']=![],this[_0x1b58c0(0x749)](),this[_0x1b58c0(0xb6d)]()&&_0x33d3bf&&(this[_0x1b58c0(0x228)](),this[_0x1b58c0(0xe3)]());},VisuMZ[_0x44ae36(0x851)]['Game_Action_numRepeats']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x715)],Game_Action['prototype'][_0x44ae36(0x715)]=function(){const _0x5db546=_0x44ae36;return this[_0x5db546(0x4ec)]()?VisuMZ[_0x5db546(0x851)]['Game_Action_numRepeats'][_0x5db546(0x689)](this):0x0;},VisuMZ[_0x44ae36(0x851)]['Game_Action_setAttack']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0xb3d)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0xb3d)]=function(){const _0x50738a=_0x44ae36;if(this['subject']()&&this['subject']()['canAttack']())VisuMZ[_0x50738a(0x851)][_0x50738a(0x305)]['call'](this);else BattleManager[_0x50738a(0x2f9)]?VisuMZ[_0x50738a(0x851)][_0x50738a(0x305)][_0x50738a(0x689)](this):this[_0x50738a(0x87b)]();},VisuMZ[_0x44ae36(0x851)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x44ae36(0x137)]['canAttack'],Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x898)]=function(){const _0x3ec0d0=_0x44ae36;if(!this[_0x3ec0d0(0x49e)]())return![];return VisuMZ['BattleCore'][_0x3ec0d0(0x478)][_0x3ec0d0(0x689)](this);},Game_BattlerBase['prototype'][_0x44ae36(0x49e)]=function(){const _0x2d75d5=_0x44ae36;for(const _0xb8efc3 of this[_0x2d75d5(0x96e)]()){if(!_0xb8efc3)continue;if(_0xb8efc3[_0x2d75d5(0x903)][_0x2d75d5(0x54f)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x739)]=Game_Action['prototype']['setGuard'],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x4a0)]=function(){const _0x320ef0=_0x44ae36;this[_0x320ef0(0x7a5)]()['canGuard']()&&VisuMZ['BattleCore'][_0x320ef0(0x739)][_0x320ef0(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xd4)]=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x6fc)],Game_BattlerBase[_0x44ae36(0x137)]['canGuard']=function(){const _0x170efe=_0x44ae36;if(!this['canGuardBattleCore']())return![];return VisuMZ['BattleCore'][_0x170efe(0xd4)]['call'](this);},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x7a9)]=function(){const _0x584313=_0x44ae36;for(const _0xbfa90b of this[_0x584313(0x96e)]()){if(!_0xbfa90b)continue;if(_0xbfa90b[_0x584313(0x903)][_0x584313(0x54f)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x600)]=function(){const _0x2d6659=_0x44ae36;for(const _0x2ec6eb of this[_0x2d6659(0x96e)]()){if(!_0x2ec6eb)continue;if(_0x2ec6eb[_0x2d6659(0x903)][_0x2d6659(0x54f)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x44ae36(0x851)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0xbec)],Game_BattlerBase['prototype'][_0x44ae36(0xbec)]=function(_0x257cee){const _0x100350=_0x44ae36;if(_0x257cee&&_0x257cee['note'][_0x100350(0x54f)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x2a229a=this[_0x100350(0xd9)]()[_0x100350(0xbad)]();if(_0x2a229a['length']===0x1&&_0x2a229a[0x0]===this)return![];}return VisuMZ[_0x100350(0x851)][_0x100350(0x6d8)][_0x100350(0x689)](this,_0x257cee);},Game_Battler['prototype'][_0x44ae36(0x258)]=function(){const _0x141902=_0x44ae36;return VisuMZ[_0x141902(0x851)][_0x141902(0xa08)][_0x141902(0x3ae)][_0x141902(0x9b5)];},VisuMZ['BattleCore']['Game_Battler_regenerateAll']=Game_Battler['prototype'][_0x44ae36(0x4f4)],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x4f4)]=function(){const _0x215c98=_0x44ae36;if(SceneManager['isSceneBattle']()){if(BattleManager['isTpb']()){if(this[_0x215c98(0x5f2)]()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager[_0x215c98(0xb75)]()&&BattleManager[_0x215c98(0xbfa)]()&&this[_0x215c98(0x2e7)]===Graphics['frameCount'])return;this[_0x215c98(0x2e7)]=Graphics[_0x215c98(0x266)],SceneManager[_0x215c98(0xb75)]()&&this[_0x215c98(0x538)]('PreRegenerateJS'),VisuMZ['BattleCore']['Game_Battler_regenerateAll'][_0x215c98(0x689)](this),SceneManager['isSceneBattle']()&&(this[_0x215c98(0x22e)](),this[_0x215c98(0x538)](_0x215c98(0x824)));},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x22e)]=function(){const _0x2d3241=_0x44ae36;if(SceneManager['isSceneBattle']())for(const _0x4c3252 of this[_0x2d3241(0x96e)]()){if(!_0x4c3252)continue;this[_0x2d3241(0xb31)](_0x4c3252);}},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xb31)]=function(_0x8015e5){const _0x2eca45=_0x44ae36;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x2eca45(0xb75)]())return;if(this[_0x2eca45(0xb6d)]())return;if(this[_0x2eca45(0x641)]())return;if(_0x8015e5[_0x2eca45(0x903)][_0x2eca45(0x54f)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x1df449=Number(RegExp['$1']);$gameTemp[_0x2eca45(0x464)]([this],_0x1df449,![],![]);}},VisuMZ[_0x44ae36(0x851)]['Game_Battler_startTpbTurn']=Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xa54)],Game_Battler['prototype']['startTpbTurn']=function(){const _0x58b247=_0x44ae36;this[_0x58b247(0x538)]('PreStartTurnJS'),VisuMZ[_0x58b247(0x851)][_0x58b247(0x840)]['call'](this),this['processBattleCoreJS'](_0x58b247(0x92a));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xad1)]=Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x7cd)],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x7cd)]=function(){const _0x515fe6=_0x44ae36;this['processBattleCoreJS'](_0x515fe6(0x913)),VisuMZ['BattleCore'][_0x515fe6(0xad1)][_0x515fe6(0x689)](this),VisuMZ[_0x515fe6(0x851)][_0x515fe6(0xa08)][_0x515fe6(0x3ae)][_0x515fe6(0x35d)]&&this[_0x515fe6(0xbce)](),this[_0x515fe6(0x538)](_0x515fe6(0x8c7));},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x538)]=function(_0x451306){const _0x1aceda=_0x44ae36;if(this[_0x1aceda(0x5f0)]||this[_0x1aceda(0xba8)])return;const _0x2cb497=VisuMZ[_0x1aceda(0x851)]['Settings'][_0x1aceda(0x3ae)];if(_0x2cb497[_0x451306])_0x2cb497[_0x451306]['call'](this);for(const _0x1386ee of this[_0x1aceda(0x96e)]()){if(!_0x1386ee)continue;key=VisuMZ['BattleCore'][_0x1aceda(0x554)](_0x1386ee,_0x451306),VisuMZ[_0x1aceda(0x851)]['JS'][key]&&VisuMZ[_0x1aceda(0x851)]['JS'][key][_0x1aceda(0x689)](this,this,this,_0x1386ee,0x0);}},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xa68)]=function(){const _0x3ca0a4=_0x44ae36;return VisuMZ[_0x3ca0a4(0x851)][_0x3ca0a4(0xa08)]['Actor'][_0x3ca0a4(0x38f)]||![];},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x78d)]=function(){const _0x1bf1a9=_0x44ae36;if(this['isWaiting']()){if(this[_0x1bf1a9(0xa68)]()){if(this[_0x1bf1a9(0xa65)]['some'](_0x55b02e=>_0x55b02e[_0x1bf1a9(0x4ec)]()&&_0x55b02e[_0x1bf1a9(0x60c)]()))return!![];}else{if(this[_0x1bf1a9(0xa65)][_0x1bf1a9(0x39c)](_0x3fc627=>_0x3fc627[_0x1bf1a9(0x4ec)]()&&_0x3fc627[_0x1bf1a9(0x8c0)]()))return!![];}}if(BattleManager[_0x1bf1a9(0xbfa)]()&&this[_0x1bf1a9(0x285)]==='casting')return this['chantStyle']()?this[_0x1bf1a9(0x67b)]()&&this[_0x1bf1a9(0x67b)]()[_0x1bf1a9(0x4ec)]()&&this[_0x1bf1a9(0x67b)]()[_0x1bf1a9(0x60c)]():this['currentAction']()&&this[_0x1bf1a9(0x67b)]()['item']()&&this[_0x1bf1a9(0x67b)]()[_0x1bf1a9(0x8c0)]();return![];},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x690)]=function(){const _0x24df82=_0x44ae36;if(BattleManager[_0x24df82(0xbfa)]()&&this[_0x24df82(0x285)]==='casting')return this[_0x24df82(0xa68)]()?this[_0x24df82(0x67b)]()&&this[_0x24df82(0x67b)]()['item']()&&!this[_0x24df82(0x67b)]()['isMagical']():this[_0x24df82(0x67b)]()&&this[_0x24df82(0x67b)]()[_0x24df82(0x4ec)]()&&!this[_0x24df82(0x67b)]()[_0x24df82(0x8c0)]();return![];},VisuMZ['BattleCore'][_0x44ae36(0x5dd)]=Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x1fb)],Game_Battler[_0x44ae36(0x137)]['clearDamagePopup']=function(){const _0x37bf44=_0x44ae36;VisuMZ['BattleCore'][_0x37bf44(0x5dd)][_0x37bf44(0x689)](this),this[_0x37bf44(0x141)]=[];},Game_Battler[_0x44ae36(0x137)]['isDamagePopupRequested']=function(){const _0x4e3cf8=_0x44ae36;if(!this['_damagePopupArray'])this[_0x4e3cf8(0x1fb)]();return this['_damagePopupArray'][_0x4e3cf8(0x2d9)]>0x0;},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xa8d)]=function(){const _0x3dec0b=_0x44ae36;if(!SceneManager[_0x3dec0b(0xb75)]())return;if(BattleManager[_0x3dec0b(0x3cf)]())return;if(!this['_damagePopupArray'])this[_0x3dec0b(0x1fb)]();this[_0x3dec0b(0x353)]();const _0x298c37=this[_0x3dec0b(0x7ef)]();if(_0x298c37)_0x298c37[_0x3dec0b(0x7e9)]();},Game_Battler['prototype'][_0x44ae36(0x353)]=function(){const _0xae5077=_0x44ae36,_0x2da13b=this[_0xae5077(0x70f)]();if(_0x2da13b[_0xae5077(0x53a)]||_0x2da13b[_0xae5077(0x107)]){const _0x23bdbb=JsonEx[_0xae5077(0x22b)](_0x2da13b);_0x23bdbb['hpAffected']=![],_0x23bdbb[_0xae5077(0xa56)]=0x0,this['_damagePopupArray'][_0xae5077(0xa04)](_0x23bdbb);if(!_0x2da13b['hpDamage']&&!_0x2da13b[_0xae5077(0xa56)])return;}if(_0x2da13b[_0xae5077(0x733)]){const _0x1a9141=JsonEx[_0xae5077(0x22b)](_0x2da13b);_0x1a9141['missed']=![],_0x1a9141[_0xae5077(0x107)]=![],_0x1a9141[_0xae5077(0xa56)]=0x0,this[_0xae5077(0x141)][_0xae5077(0xa04)](_0x1a9141);}if(_0x2da13b[_0xae5077(0xa56)]!==0x0){const _0x34732c=JsonEx[_0xae5077(0x22b)](_0x2da13b);_0x34732c[_0xae5077(0x53a)]=![],_0x34732c[_0xae5077(0x107)]=![],_0x34732c[_0xae5077(0x733)]=![],this['_damagePopupArray']['push'](_0x34732c);}},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x2b0)]=function(){const _0x5403fa=_0x44ae36;if(!this[_0x5403fa(0x141)])this['clearDamagePopup']();return VisuMZ[_0x5403fa(0x851)][_0x5403fa(0xa08)][_0x5403fa(0xff)][_0x5403fa(0x230)]?this[_0x5403fa(0x141)][_0x5403fa(0x479)]():this[_0x5403fa(0x141)][_0x5403fa(0x5ee)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xac3)]=function(_0x3d38f2,_0x46a981){const _0x4c239f=_0x44ae36;if(!SceneManager[_0x4c239f(0xb75)]())return;if(BattleManager[_0x4c239f(0x3cf)]())return;if(!this[_0x4c239f(0x7ef)]())return;if(_0x3d38f2[_0x4c239f(0x2d9)]<=0x0)return;_0x46a981=_0x46a981||{},_0x46a981[_0x4c239f(0x481)]=_0x46a981[_0x4c239f(0x481)]||_0x4c239f(0xb9b),_0x46a981[_0x4c239f(0x7e5)]=_0x46a981[_0x4c239f(0x7e5)]||[0x0,0x0,0x0,0x0],_0x46a981[_0x4c239f(0x2df)]=_0x46a981[_0x4c239f(0x2df)]||0x0,this[_0x4c239f(0x7ef)]()['setupTextPopup'](_0x3d38f2,_0x46a981);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x95d)]=function(_0x434c40,_0x4937d7,_0x3c5dd7){const _0x55fa26=_0x44ae36;if(!SceneManager[_0x55fa26(0xb75)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['battler']())return;if(_0x4937d7[_0x55fa26(0x2d9)]<=0x0)return;_0x3c5dd7=_0x3c5dd7||{},_0x3c5dd7[_0x55fa26(0x481)]=_0x3c5dd7[_0x55fa26(0x481)]||_0x55fa26(0xb9b),_0x3c5dd7['flashColor']=_0x3c5dd7[_0x55fa26(0x7e5)]||[0x0,0x0,0x0,0x0],_0x3c5dd7[_0x55fa26(0x2df)]=_0x3c5dd7[_0x55fa26(0x2df)]||0x0,this[_0x55fa26(0x7ef)]()[_0x55fa26(0x95d)](_0x434c40,_0x4937d7,_0x3c5dd7);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x582)]=function(){const _0xcc0571=_0x44ae36;if(this[_0xcc0571(0x641)]())return![];if(this[_0xcc0571(0x1c1)]()&&this['isAppeared']())return!![];if(this[_0xcc0571(0x2fe)]()&&this[_0xcc0571(0x87e)]()){if(this[_0xcc0571(0xb6d)]()&&this[_0xcc0571(0x5cf)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x432)]=Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x7fe)],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x7fe)]=function(){const _0x2ef150=_0x44ae36;VisuMZ[_0x2ef150(0x851)][_0x2ef150(0x432)][_0x2ef150(0x689)](this),this[_0x2ef150(0x815)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x20b)]=function(){return!![];},Game_Battler['prototype'][_0x44ae36(0x6a8)]=function(){return![];},VisuMZ['BattleCore'][_0x44ae36(0xb39)]=Game_Battler['prototype']['onBattleStart'],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x2e9)]=function(_0x5a88d8){const _0x4d7ae1=_0x44ae36;VisuMZ[_0x4d7ae1(0x851)]['Game_Battler_onBattleStart'][_0x4d7ae1(0x689)](this,_0x5a88d8),this[_0x4d7ae1(0x627)](_0x5a88d8),this[_0x4d7ae1(0x1fb)]();},Game_Battler[_0x44ae36(0x137)]['onBattleStartBattleCore']=function(_0x3901c2){this['setBattlerFlip'](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ['BattleCore'][_0x44ae36(0xa9c)]=Game_Battler['prototype'][_0x44ae36(0x2a3)],Game_Battler[_0x44ae36(0x137)]['onBattleEnd']=function(){const _0x30e2ef=_0x44ae36;VisuMZ[_0x30e2ef(0x851)][_0x30e2ef(0xa9c)][_0x30e2ef(0x689)](this),this[_0x30e2ef(0xa97)]();},Game_Battler[_0x44ae36(0x137)]['onBattleEndBattleCore']=function(){const _0x21f901=_0x44ae36;this[_0x21f901(0x69a)]=undefined,this[_0x21f901(0x8c5)]=undefined;},VisuMZ['BattleCore'][_0x44ae36(0x40c)]=Game_Battler[_0x44ae36(0x137)]['performActionStart'],Game_Battler[_0x44ae36(0x137)]['performActionStart']=function(_0x357514){const _0xa259ab=_0x44ae36;VisuMZ[_0xa259ab(0x851)][_0xa259ab(0x40c)][_0xa259ab(0x689)](this,_0x357514);if(!_0x357514[_0xa259ab(0x3f5)]()){const _0x2f6f1b=this[_0xa259ab(0x7ef)]();_0x2f6f1b&&_0x2f6f1b[_0xa259ab(0x79c)]();}this[_0xa259ab(0x5b8)](![]);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x365)]=function(){const _0x189a2f=_0x44ae36;this[_0x189a2f(0x5df)]=undefined;const _0x27d0ab=this[_0x189a2f(0x1e8)];this[_0x189a2f(0x1e8)]=![];if(BattleManager['isActiveTpb']()&&this[_0x189a2f(0x6e3)]()){const _0x7079c6=this['battler']();if(_0x7079c6&&_0x27d0ab)_0x7079c6['stepForward']();return;}const _0x19cb48=this[_0x189a2f(0x7ef)]();if(_0x19cb48)_0x19cb48[_0x189a2f(0x7fa)]();this[_0x189a2f(0x5b8)](![]),this[_0x189a2f(0xe3)]();},Game_Battler['prototype'][_0x44ae36(0x80b)]=function(_0x2c9997){const _0x47d83e=_0x44ae36;if(_0x2c9997[_0x47d83e(0x3d5)]())this[_0x47d83e(0x200)]();else{if(_0x2c9997[_0x47d83e(0x3f5)]())this[_0x47d83e(0x7f4)]('guard');else{if(_0x2c9997['isMagical']())this[_0x47d83e(0x7f4)](_0x47d83e(0xb27));else{if(_0x2c9997[_0x47d83e(0x5d2)]())[0x1,0x2,0x5,0x6]['includes'](_0x2c9997[_0x47d83e(0x4ec)]()[_0x47d83e(0x971)]['type'])?this[_0x47d83e(0x200)]():this[_0x47d83e(0x7f4)](_0x47d83e(0x10b));else _0x2c9997[_0x47d83e(0xbd5)]()&&this['requestMotion'](_0x47d83e(0x4ec));}}}},Game_Battler['prototype'][_0x44ae36(0x6b5)]=function(){const _0x538408=_0x44ae36;return $dataSystem[_0x538408(0x941)][0x0];},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x24b)]=function(){const _0x21afb1=_0x44ae36,_0x5e0546=this[_0x21afb1(0x6b5)]();return _0x5e0546?_0x5e0546[_0x21afb1(0x1cd)]:0x0;},Game_Battler[_0x44ae36(0x137)]['performSubstitute']=function(_0x5b862a){const _0xbfe68=_0x44ae36;if(!$gameSystem[_0xbfe68(0x628)]())return;const _0x32aa23=this[_0xbfe68(0x7ef)](),_0x165396=_0x5b862a[_0xbfe68(0x7ef)]();if(!_0x32aa23||!_0x165396)return;const _0x5b07f3=_0x165396[_0xbfe68(0x358)],_0x27fc70=_0x165396[_0xbfe68(0x5b5)];this['moveBattlerToPoint'](_0x5b07f3,_0x27fc70,0x0,![],_0xbfe68(0x45a),-0x1),_0x32aa23[_0xbfe68(0xbc3)]();const _0xabdaea=VisuMZ['BattleCore'][_0xbfe68(0xa08)][_0xbfe68(0x512)];let _0x2d5d79=(_0x165396[_0xbfe68(0xa20)]+_0x32aa23[_0xbfe68(0xa20)])/0x2;_0x2d5d79*=this[_0xbfe68(0x30c)]()?0x1:-0x1;let _0x270d41=_0xabdaea['StepDistanceY']*(this[_0xbfe68(0x30c)]()?0x1:-0x1);_0x5b862a[_0xbfe68(0x18c)](_0x2d5d79,_0x270d41,0x0,![],_0xbfe68(0x45a)),_0x165396[_0xbfe68(0xbc3)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x7f4)]=function(_0x36f9aa){const _0x28072e=_0x44ae36;if(SceneManager[_0x28072e(0xb75)]()){const _0x308a31=this[_0x28072e(0x7ef)]();_0x308a31&&(_0x308a31[_0x28072e(0x48f)](_0x36f9aa),['swing',_0x28072e(0x201),_0x28072e(0x3b1)]['includes'](_0x36f9aa)&&this[_0x28072e(0xba1)]());}this[_0x28072e(0x815)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xba1)]=function(){},Game_Battler['prototype'][_0x44ae36(0x20e)]=function(_0x489532){const _0x4ffc61=_0x44ae36;if(SceneManager[_0x4ffc61(0xb75)]()){const _0xd9d1a9=this[_0x4ffc61(0x7ef)]();if(_0xd9d1a9)_0xd9d1a9[_0x4ffc61(0x3c5)](_0x489532);}},Game_Battler['prototype']['startAttackWeaponAnimation']=function(){const _0x3d7660=_0x44ae36;if(SceneManager['isSceneBattle']()){const _0x42efe4=this[_0x3d7660(0x24b)]();this[_0x3d7660(0x20e)](_0x42efe4);}},Game_Battler[_0x44ae36(0x137)]['performCastAnimation']=function(_0x4032b9,_0x3dfe08){const _0x660f6c=_0x44ae36;if(!_0x4032b9)return;if(!_0x4032b9[_0x660f6c(0x4ec)]())return;if(_0x4032b9[_0x660f6c(0x3d5)]())return;if(_0x4032b9[_0x660f6c(0x3f5)]())return;if(_0x4032b9[_0x660f6c(0xbd5)]())return;if($gameTemp['_playTestFastMode'])return;let _0x480fac=0x0;const _0x5d5ba9=VisuMZ[_0x660f6c(0x851)][_0x660f6c(0xa08)][_0x660f6c(0x512)],_0x915b0=_0x4032b9[_0x660f6c(0x4ec)]()[_0x660f6c(0x903)];if(_0x915b0[_0x660f6c(0x54f)](/<CAST ANIMATION: (\d+)>/i))_0x480fac=Number(RegExp['$1']);else{if(_0x915b0[_0x660f6c(0x54f)](/<NO CAST ANIMATION>/i))return;else{if(_0x4032b9[_0x660f6c(0x8f1)]())_0x480fac=_0x5d5ba9['CastCertain'];else{if(_0x4032b9[_0x660f6c(0x72d)]())_0x480fac=_0x5d5ba9[_0x660f6c(0x614)];else _0x4032b9[_0x660f6c(0x60c)]()&&(_0x480fac=_0x5d5ba9[_0x660f6c(0x912)]);}}}_0x480fac>0x0&&$gameTemp['requestAnimation']([this],_0x480fac,!!_0x3dfe08);},Game_Battler[_0x44ae36(0x137)]['performReflection']=function(){const _0xfa156e=_0x44ae36;SoundManager[_0xfa156e(0xaa7)]();let _0x411bf9=VisuMZ[_0xfa156e(0x851)][_0xfa156e(0xa08)][_0xfa156e(0x512)][_0xfa156e(0x1f9)];_0x411bf9>0x0&&(Imported[_0xfa156e(0x6c8)]?$gameTemp[_0xfa156e(0x464)]([this],_0x411bf9):$gameTemp['requestAnimation']([this],_0x411bf9));},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x34f)]=function(){const _0x260dc8=_0x44ae36;if(!$gameSystem['isSideView']())return![];if(!BattleManager[_0x260dc8(0x4f9)]())return![];if(!this[_0x260dc8(0x1c1)]())return![];if(this['isInputting']())return!![];if(this[_0x260dc8(0x42a)]())return!![];if(this[_0x260dc8(0x9ec)]>=0x1)return!![];return![];},VisuMZ['BattleCore']['Game_Battler_performDamage']=Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x477)],Game_Battler['prototype'][_0x44ae36(0x477)]=function(){const _0x274518=_0x44ae36;this['isActiveTpbReady']()&&(this[_0x274518(0x5df)]=!![]),VisuMZ[_0x274518(0x851)][_0x274518(0x92c)]['call'](this),this[_0x274518(0x783)](),this[_0x274518(0x1f5)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x150)]=Game_Battler['prototype'][_0x44ae36(0x45e)],Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x45e)]=function(){const _0x4a476f=_0x44ae36;this['isActiveTpbReady']()&&(this[_0x4a476f(0x5df)]=!![]),VisuMZ[_0x4a476f(0x851)][_0x4a476f(0x150)][_0x4a476f(0x689)](this),this[_0x4a476f(0x783)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x822)]=Game_Battler['prototype'][_0x44ae36(0x9bd)],Game_Battler[_0x44ae36(0x137)]['performEvasion']=function(){const _0x376b8c=_0x44ae36;this[_0x376b8c(0x34f)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x376b8c(0x851)][_0x376b8c(0x822)][_0x376b8c(0x689)](this),this[_0x376b8c(0x783)]();},Game_Battler['prototype'][_0x44ae36(0x783)]=function(){const _0x2839e3=_0x44ae36;if(!$gameSystem[_0x2839e3(0x628)]())return;if(this[_0x2839e3(0x1e8)])return;this[_0x2839e3(0x1e8)]=!![];const _0x24fb0c=this[_0x2839e3(0x7ef)]();if(_0x24fb0c)_0x24fb0c[_0x2839e3(0x703)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x1f5)]=function(){const _0x313c4e=_0x44ae36;if(!this[_0x313c4e(0x20b)]())return;const _0x506d4e=VisuMZ[_0x313c4e(0x851)][_0x313c4e(0xa08)][_0x313c4e(0x908)];if(!(_0x506d4e[_0x313c4e(0x5f1)]??![]))return;if(this[_0x313c4e(0x2b3)]<=0x0)return;const _0x2afb71=this[_0x313c4e(0x7ef)]();if(_0x2afb71){const _0x21509e=this[_0x313c4e(0x2b3)],_0x280b0b=(_0x21509e/this[_0x313c4e(0xafd)])['clamp'](0.8,0x1),_0x41cfeb=_0x506d4e[_0x313c4e(0x377)]??0x30,_0x1b3bfc=_0x280b0b*_0x41cfeb;_0x2afb71[_0x313c4e(0xa37)](_0x1b3bfc,_0x280b0b);}},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xe3)]=function(){const _0x5b6457=_0x44ae36;if(this[_0x5b6457(0xb6d)]()&&this['_motionType']!==_0x5b6457(0x100)){this['requestMotion'](_0x5b6457(0x100));return;}if(this['isDead']()&&this[_0x5b6457(0x76d)]===_0x5b6457(0x100))return;if(!!this[_0x5b6457(0x762)])return;if(this[_0x5b6457(0x2fe)]()){if(!this[_0x5b6457(0x2c3)]()&&this!==BattleManager['_subject']){if(this[_0x5b6457(0x7ef)]())this[_0x5b6457(0x7ef)]()['refreshMotion']();}this[_0x5b6457(0x815)]();return;}if(this[_0x5b6457(0x76d)]==='victory')return;if(this[_0x5b6457(0x76d)]==='escape'&&!BattleManager['isInputting']())return;if(this[_0x5b6457(0x76d)]===_0x5b6457(0x8d9)&&!BattleManager[_0x5b6457(0x6e3)]())return;this[_0x5b6457(0x7fe)]();if(BattleManager[_0x5b6457(0x4f9)]()&&this===BattleManager[_0x5b6457(0xb62)])return;if(this['battler']()&&BattleManager[_0x5b6457(0x6e3)]()){this[_0x5b6457(0x7ef)]()['refreshMotion'](),this[_0x5b6457(0x815)]();return;}this[_0x5b6457(0x7ef)]()&&BattleManager['isActiveTpb']()&&this!==BattleManager[_0x5b6457(0xb62)]&&this[_0x5b6457(0x7ef)]()['refreshMotion']();},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x2c3)]=function(){const _0x46d1eb=_0x44ae36;if(!this[_0x46d1eb(0x87e)]())return![];const _0x35c455=this[_0x46d1eb(0x7ef)]();if(!_0x35c455)return![];const _0x2ec2c2=_0x35c455[_0x46d1eb(0x942)];if(!_0x2ec2c2)return![];const _0x1933e0=_0x2ec2c2['_motion'];return _0x1933e0&&!_0x1933e0['loop'];},Game_Battler[_0x44ae36(0x137)]['isBattlerFlipped']=function(){const _0x1ed504=_0x44ae36;return this[_0x1ed504(0x5fe)];},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x5b8)]=function(_0x17e4ac){const _0x4b6b0c=_0x44ae36;if(!$gameSystem[_0x4b6b0c(0x628)]())return;this[_0x4b6b0c(0x5fe)]=_0x17e4ac;const _0x3a3362=this[_0x4b6b0c(0x7ef)]();if(_0x3a3362)_0x3a3362[_0x4b6b0c(0xbf3)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xb2d)]=function(_0x25ec4e,_0x3e618f,_0x5105ea){const _0x1b40af=_0x44ae36;if(!$gameSystem[_0x1b40af(0x628)]())return;const _0x3af1c0=this[_0x1b40af(0x7ef)]();if(!_0x3af1c0)return;if(_0x25ec4e===_0x3af1c0[_0x1b40af(0x358)])return;let _0x10c6ee=![];if(this[_0x1b40af(0x30c)]()){if(_0x25ec4e>_0x3af1c0[_0x1b40af(0x358)])_0x10c6ee=!![];if(_0x25ec4e<_0x3af1c0['_baseX'])_0x10c6ee=![];}else{if(this[_0x1b40af(0x2fe)]()){if(_0x25ec4e>_0x3af1c0[_0x1b40af(0x358)])_0x10c6ee=![];if(_0x25ec4e<_0x3af1c0[_0x1b40af(0x358)])_0x10c6ee=!![];}};this[_0x1b40af(0x5b8)](_0x5105ea?!_0x10c6ee:_0x10c6ee),_0x3af1c0[_0x1b40af(0xbf3)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x18c)]=function(_0x362298,_0x52d37c,_0x42772e,_0x2b1914,_0x3bb366){const _0x1cddc1=_0x44ae36;if(!$gameSystem[_0x1cddc1(0x628)]())return;const _0x2394ae=this['battler']();if(!_0x2394ae)return;if(_0x2b1914)this[_0x1cddc1(0xb2d)](_0x362298+_0x2394ae[_0x1cddc1(0x358)],_0x52d37c+_0x2394ae[_0x1cddc1(0x5b5)],![]);_0x362298+=_0x2394ae['_baseX']-_0x2394ae['_homeX'],_0x52d37c+=_0x2394ae['_baseY']-_0x2394ae['_homeY'],_0x2394ae[_0x1cddc1(0x38b)](_0x362298,_0x52d37c,_0x42772e);if(Imported['VisuMZ_0_CoreEngine'])_0x2394ae[_0x1cddc1(0x678)](_0x3bb366||_0x1cddc1(0x45a));},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x36ccd1,_0x3ba760,_0xe5b491,_0x5dea0f,_0x548d16,_0x4094cb){const _0x3d08f1=_0x44ae36;if(!$gameSystem[_0x3d08f1(0x628)]())return;const _0x53a2e9=this[_0x3d08f1(0x7ef)]();if(!_0x53a2e9)return;if(_0x36ccd1===Infinity||_0x3ba760===Infinity)return;if(isNaN(_0x36ccd1)||isNaN(_0x3ba760))return;_0x4094cb=_0x4094cb||0x0;if(_0x4094cb>0x0){if(_0x53a2e9[_0x3d08f1(0x358)]>_0x36ccd1)_0x36ccd1+=_0x53a2e9['width']/0x2+_0x4094cb;if(_0x53a2e9[_0x3d08f1(0x358)]<_0x36ccd1)_0x36ccd1-=_0x53a2e9[_0x3d08f1(0xa20)]/0x2+_0x4094cb;}if(_0x5dea0f)this['setBattlerFacePoint'](_0x36ccd1,_0x3ba760,![]);_0x36ccd1-=_0x53a2e9['_homeX'],_0x3ba760-=_0x53a2e9['_homeY'],_0x53a2e9[_0x3d08f1(0x38b)](_0x36ccd1,_0x3ba760,_0xe5b491);if(Imported[_0x3d08f1(0x6c8)])_0x53a2e9['setMoveEasingType'](_0x548d16||'Linear');},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x6fe)]=function(_0x52a4c6,_0x367ba9,_0x326296,_0x5140b9,_0x140f90){const _0x2097a2=_0x44ae36;if(!$gameSystem['isSideView']())return;const _0x3f1707=this['battler']();if(!_0x3f1707)return;if(_0x5140b9)this['setBattlerFacePoint'](_0x52a4c6+_0x3f1707[_0x2097a2(0x358)],_0x367ba9+_0x3f1707[_0x2097a2(0x5b5)],![]);_0x52a4c6+=_0x3f1707[_0x2097a2(0x50d)],_0x367ba9+=_0x3f1707[_0x2097a2(0x496)],_0x3f1707[_0x2097a2(0x4e3)](_0x52a4c6,_0x367ba9,_0x326296,_0x140f90),this[_0x2097a2(0x69a)]=_0x52a4c6,this['_forcedHomeY']=_0x367ba9;},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x53f)]=function(_0xfa9ed6,_0x248aad,_0x13eeba,_0x1385fa,_0x449a51,_0x4bfa90){const _0x6bb425=_0x44ae36;if(!$gameSystem[_0x6bb425(0x628)]())return;const _0x4ad608=this[_0x6bb425(0x7ef)]();if(!_0x4ad608)return;_0x4bfa90=_0x4bfa90||0x0;if(_0x4bfa90>0x0){if(_0x4ad608[_0x6bb425(0x358)]>_0xfa9ed6)_0xfa9ed6+=_0x4ad608['width']/0x2+_0x4bfa90;if(_0x4ad608[_0x6bb425(0x358)]<_0xfa9ed6)_0xfa9ed6-=_0x4ad608[_0x6bb425(0xa20)]/0x2+_0x4bfa90;}if(_0x1385fa)this[_0x6bb425(0xb2d)](_0xfa9ed6,_0x248aad,![]);_0x4ad608['startHomeMove'](_0xfa9ed6,_0x248aad,_0x13eeba,_0x449a51),this[_0x6bb425(0x69a)]=_0xfa9ed6,this[_0x6bb425(0x8c5)]=_0x248aad;},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x5b7)]=function(_0x35d2c7,_0x1a7986,_0x1f58f3){const _0x4d6e1=_0x44ae36;if(!$gameSystem[_0x4d6e1(0x628)]())return;const _0x36953b=this[_0x4d6e1(0x7ef)]();if(!_0x36953b)return;_0x36953b[_0x4d6e1(0x41f)](_0x35d2c7,_0x1a7986,_0x1f58f3);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x7c1)]=function(_0x22fc6c,_0x585c50){const _0x555b90=_0x44ae36;if(!$gameSystem[_0x555b90(0x628)]())return;const _0x27ddaf=this[_0x555b90(0x7ef)]();if(!_0x27ddaf)return;_0x27ddaf['startJump'](_0x22fc6c,_0x585c50);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x87c)]=function(_0xd22edb,_0x56da70,_0x5daf4f,_0x182bc1){const _0x501ae6=_0x44ae36;if(!$gameSystem[_0x501ae6(0x628)]())return;const _0x194422=this[_0x501ae6(0x7ef)]();if(!_0x194422)return;_0x194422[_0x501ae6(0x9a7)](_0xd22edb,_0x56da70,_0x5daf4f,_0x182bc1);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x312)]=function(_0x3a3d2c,_0x3929ff,_0x118960,_0x23b436){const _0x545ab7=_0x44ae36;if(!$gameSystem[_0x545ab7(0x628)]())return;const _0x4d75ff=this[_0x545ab7(0x7ef)]();if(!_0x4d75ff)return;this[_0x545ab7(0x30c)]()&&(_0x3a3d2c*=-0x1,_0x3929ff*=-0x1),_0x4d75ff['startSkew'](_0x3a3d2c,_0x3929ff,_0x118960,_0x23b436);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x387)]=function(_0x15ecc4,_0x157701,_0x8d1788,_0x3b623f){const _0x4ae690=_0x44ae36;if(!$gameSystem[_0x4ae690(0x628)]())return;const _0x4247e3=this['battler']();if(!_0x4247e3)return;_0x4247e3['startGrow'](_0x15ecc4,_0x157701,_0x8d1788,_0x3b623f);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x63e)]=function(_0x4fec85,_0x303489,_0x1df03){const _0x3a1069=_0x44ae36;if(!$gameSystem['isSideView']())return;const _0xbd6af0=this['battler']();if(!_0xbd6af0)return;_0xbd6af0[_0x3a1069(0xa47)](_0x4fec85,_0x303489,_0x1df03);},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x815)]=function(){const _0x46cd24=_0x44ae36,_0x39214b=!!this[_0x46cd24(0x762)];this[_0x46cd24(0x762)]=undefined,_0x39214b&&(this[_0x46cd24(0xe3)](),this[_0x46cd24(0x802)]());},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x802)]=function(){const _0x268e4a=_0x44ae36;if(!SceneManager[_0x268e4a(0xb75)]())return;const _0xffe628=this[_0x268e4a(0x7ef)]();if(!_0xffe628)return;let _0x4b58c8=this[_0x268e4a(0x30c)]()?_0xffe628[_0x268e4a(0xa66)]:_0xffe628[_0x268e4a(0x942)]['_weaponSprite'];_0x4b58c8&&_0x4b58c8[_0x268e4a(0x93c)](0x0);},Game_Battler['prototype'][_0x44ae36(0x82f)]=function(_0x6cca77,_0x41e329,_0x2633e5){const _0x516866=_0x44ae36;if(this[_0x516866(0x2fe)]()&&!this['hasSvBattler']())return;let _0x1659be=0x0,_0x51b279=0x0;_0x6cca77['match'](/ATTACK[ ](\d+)/i)&&(_0x51b279=Number(RegExp['$1']),_0x51b279--);if(this['isActor']()){const _0xc0a6aa=this[_0x516866(0x4af)]();_0x1659be=_0xc0a6aa[_0x51b279]?_0xc0a6aa[_0x51b279][_0x516866(0x109)]:0x0;}else this[_0x516866(0x2fe)]()&&(_0x1659be=this[_0x516866(0x83e)]()[_0x516866(0x109)]||0x0);const _0x2e66ea=$dataSystem['attackMotions'][_0x1659be];_0x6cca77[_0x516866(0x54f)](/attack/i)&&(_0x6cca77=[_0x516866(0x201),_0x516866(0xa3a),_0x516866(0x3b1)][_0x2e66ea['type']]||_0x516866(0xa3a)),this[_0x516866(0x762)]={'motionType':_0x6cca77,'weaponImageId':_0x41e329?_0x2e66ea[_0x516866(0x1cd)]:0x0,'pattern':_0x2633e5};},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x51b)]=function(_0x2c3590){const _0xd8c3ec=_0x44ae36;if(!_0x2c3590)return![];return _0x2c3590[_0xd8c3ec(0xd9)]()===this[_0xd8c3ec(0xd9)]();},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0xdb)]=function(_0x30de3a){const _0xdf459f=_0x44ae36;if(!_0x30de3a)return![];return _0x30de3a[_0xdf459f(0x867)]()===this[_0xdf459f(0xd9)]();},Game_Battler['prototype'][_0x44ae36(0xb37)]=function(){return![];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0xb37)]=function(){const _0x3d24d5=_0x44ae36;return this['battlerName']()[_0x3d24d5(0x54f)](/\$/i);},Game_Enemy['prototype'][_0x44ae36(0xb37)]=function(){const _0x49e7d6=_0x44ae36;return this[_0x49e7d6(0x87e)]()&&this[_0x49e7d6(0x1f7)]()[_0x49e7d6(0x54f)](/\$/i);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x624)]=Game_Actor['prototype'][_0x44ae36(0x93c)],Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x93c)]=function(_0x2c6406){const _0x671f73=_0x44ae36;VisuMZ[_0x671f73(0x851)][_0x671f73(0x624)][_0x671f73(0x689)](this,_0x2c6406),this[_0x671f73(0x21d)]();},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x21d)]=function(){const _0x284601=_0x44ae36;this['_battlePortrait']='',this[_0x284601(0x2f8)]()&&this[_0x284601(0x2f8)]()['note'][_0x284601(0x54f)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x284601(0x206)]=String(RegExp['$1']));},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x544)]=function(){const _0x2982ac=_0x44ae36;if(this[_0x2982ac(0x59c)]()!=='')return this[_0x2982ac(0x59c)]();else{if(Imported[_0x2982ac(0x791)]&&this[_0x2982ac(0x59b)]()!=='')return this[_0x2982ac(0x59b)]();}return'';},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x59c)]=function(){if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this['_battlePortrait'];},Game_Actor[_0x44ae36(0x137)]['setBattlePortrait']=function(_0x38ab81){const _0x595550=_0x44ae36;if(this[_0x595550(0x206)]===undefined)this[_0x595550(0x21d)]();this[_0x595550(0x206)]=_0x38ab81;if(SceneManager[_0x595550(0xb75)]()&&$gameParty['battleMembers']()[_0x595550(0x76b)](this)){const _0xb48065=SceneManager['_scene']['_statusWindow'];_0xb48065&&_0xb48065['refreshActorPortrait'](this);}},Game_Actor['prototype']['isSpriteVisible']=function(){return!![];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x330)]=function(){const _0x3f38d9=_0x44ae36;if(!this['isConfused']()&&BattleManager[_0x3f38d9(0x789)])return!![];return Game_Battler[_0x3f38d9(0x137)][_0x3f38d9(0x330)][_0x3f38d9(0x689)](this);},VisuMZ['BattleCore'][_0x44ae36(0x91e)]=Game_Actor[_0x44ae36(0x137)]['makeActionList'],Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x5ad)]=function(){const _0x391434=_0x44ae36;if(BattleManager[_0x391434(0x789)]&&!ConfigManager[_0x391434(0xe5)])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x391434(0x851)][_0x391434(0x91e)][_0x391434(0x689)](this);;}},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x503)]=function(){const _0x1d5bbc=_0x44ae36,_0x158b08=[],_0x5bf661=new Game_Action(this);return _0x5bf661[_0x1d5bbc(0xb3d)](),_0x158b08[_0x1d5bbc(0xa04)](_0x5bf661),_0x158b08;},Game_Actor[_0x44ae36(0x137)]['battleCommands']=function(){const _0x462511=_0x44ae36;return this[_0x462511(0xab8)]()[_0x462511(0x903)][_0x462511(0x54f)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x462511(0x8c4)](/[\r\n]+/):VisuMZ[_0x462511(0x851)]['Settings'][_0x462511(0x886)]['BattleCmdList'];},Game_Actor[_0x44ae36(0x137)]['svBattlerAnchorX']=function(){const _0x228eb3=_0x44ae36;if(this[_0x228eb3(0x48b)]['svAnchorX']!==undefined)return this[_0x228eb3(0x48b)][_0x228eb3(0x246)];return this[_0x228eb3(0x2f8)]()['note'][_0x228eb3(0x54f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x228eb3(0x48b)]['svAnchorX']=eval(RegExp['$1']),this['_cache'][_0x228eb3(0x734)]=eval(RegExp['$2'])):this[_0x228eb3(0x48b)][_0x228eb3(0x246)]=Game_Battler[_0x228eb3(0x137)][_0x228eb3(0xd7)][_0x228eb3(0x689)](this),this[_0x228eb3(0x48b)][_0x228eb3(0x246)];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x4d1)]=function(){const _0x13b678=_0x44ae36;if(this['_cache'][_0x13b678(0x734)]!==undefined)return this[_0x13b678(0x48b)]['svAnchorY'];return this['actor']()['note'][_0x13b678(0x54f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x13b678(0x48b)][_0x13b678(0x246)]=eval(RegExp['$1']),this[_0x13b678(0x48b)][_0x13b678(0x734)]=eval(RegExp['$2'])):this[_0x13b678(0x48b)][_0x13b678(0x734)]=Game_Battler[_0x13b678(0x137)][_0x13b678(0x4d1)][_0x13b678(0x689)](this),this[_0x13b678(0x48b)]['svAnchorY'];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0xb0b)]=function(){const _0x170991=_0x44ae36;if(this[_0x170991(0x48b)]['svShadow']!==undefined)return this[_0x170991(0x48b)][_0x170991(0x417)];if(this['actor']()[_0x170991(0x903)][_0x170991(0x54f)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x170991(0x417)]=!![];else this[_0x170991(0x2f8)]()[_0x170991(0x903)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x170991(0x48b)][_0x170991(0x417)]=![]:this[_0x170991(0x48b)][_0x170991(0x417)]=Game_Battler[_0x170991(0x137)][_0x170991(0xb0b)][_0x170991(0x689)](this);return this['_cache'][_0x170991(0x417)];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x933)]=function(){const _0x34bd2c=_0x44ae36;return VisuMZ[_0x34bd2c(0x851)][_0x34bd2c(0xa08)][_0x34bd2c(0x908)][_0x34bd2c(0x525)];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0xba1)]=function(){const _0x7a4a9=_0x44ae36,_0x36cc08=this[_0x7a4a9(0x4af)](),_0x11a366=_0x36cc08[0x0]?_0x36cc08[0x0][_0x7a4a9(0x109)]:0x0,_0x5b6204=$dataSystem[_0x7a4a9(0x941)][_0x11a366];_0x5b6204&&this[_0x7a4a9(0x20e)](_0x5b6204[_0x7a4a9(0x1cd)]);},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x23a)]=function(_0x147101){const _0x11c33b=_0x44ae36;Game_Battler[_0x11c33b(0x137)]['performAction'][_0x11c33b(0x689)](this,_0x147101),this['performActionMotions'](_0x147101);},Game_Actor['prototype']['getAttackMotion']=function(){const _0xded9ae=_0x44ae36,_0x438586=this[_0xded9ae(0x4af)](),_0x372210=_0x438586[0x0]?_0x438586[0x0][_0xded9ae(0x109)]:0x0;return $dataSystem[_0xded9ae(0x941)][_0x372210];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x4a1)]=function(_0x59af19){const _0x1453cc=_0x44ae36;_0x59af19=_0x59af19||0x1,_0x59af19--;const _0x5e0881=this[_0x1453cc(0x4af)]();return _0x5e0881[_0x59af19]?_0x5e0881[_0x59af19][_0x1453cc(0xa94)]:0x0;},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x7fc)]=function(_0x142004){const _0x372d88=_0x44ae36;_0x142004=_0x142004||0x1,_0x142004--;const _0x254699=this[_0x372d88(0x4af)](),_0x130c53=_0x254699[_0x142004]?_0x254699[_0x142004][_0x372d88(0x109)]:0x0;return $dataSystem[_0x372d88(0x941)][_0x130c53];},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0xb81)]=function(_0x3f3bd6){const _0x561cee=_0x44ae36;_0x3f3bd6=_0x3f3bd6||0x1,_0x3f3bd6--;const _0xe3fd3f=this[_0x561cee(0x4af)](),_0x1847a2=_0xe3fd3f[_0x3f3bd6]?_0xe3fd3f[_0x3f3bd6][_0x561cee(0x109)]:0x0,_0x3f6df7=$dataSystem[_0x561cee(0x941)][_0x1847a2];if(_0x3f6df7){if(_0x3f6df7[_0x561cee(0x4d5)]===0x0)this[_0x561cee(0x7f4)](_0x561cee(0x201));else{if(_0x3f6df7[_0x561cee(0x4d5)]===0x1)this[_0x561cee(0x7f4)](_0x561cee(0xa3a));else _0x3f6df7['type']===0x2&&this[_0x561cee(0x7f4)](_0x561cee(0x3b1));}this[_0x561cee(0x20e)](_0x3f6df7[_0x561cee(0x1cd)]);}},Game_Battler[_0x44ae36(0x137)]['setActiveWeaponSlot']=function(_0xd6d0e5){const _0x149da1=_0x44ae36;if(this[_0x149da1(0x30c)]()){const _0x2f17f1=this[_0x149da1(0x4af)]();if(_0x2f17f1[_0x149da1(0x2d9)]>0x0){const _0x439146=_0x2f17f1[_0xd6d0e5];if(_0x439146)_0xd6d0e5=this[_0x149da1(0x35e)]()[_0x149da1(0x83c)](_0x439146);}}this[_0x149da1(0x129)]=_0xd6d0e5||0x0,this[_0x149da1(0x48b)]={};},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x8d8)]=function(){const _0x592b3d=_0x44ae36;this['_activeWeaponSlot']=this[_0x592b3d(0x129)]||0x0,this['_activeWeaponSlot']++,this['_cache']={};},Game_Battler[_0x44ae36(0x137)][_0x44ae36(0x50f)]=function(){const _0x30d99e=_0x44ae36;this[_0x30d99e(0x129)]=undefined,this[_0x30d99e(0x48b)]={};},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x34c)]=Game_Actor[_0x44ae36(0x137)]['equips'],Game_Actor[_0x44ae36(0x137)]['equips']=function(){const _0x2e22ab=_0x44ae36;let _0x2f49f3=VisuMZ['BattleCore'][_0x2e22ab(0x34c)][_0x2e22ab(0x689)](this);if(this[_0x2e22ab(0xb57)])return _0x2f49f3;if(this['_activeWeaponSlot']!==undefined){this[_0x2e22ab(0xb57)]=!![];const _0x14042f=this[_0x2e22ab(0x7d4)]();for(let _0x24e1ac=0x0;_0x24e1ac<_0x14042f[_0x2e22ab(0x2d9)];_0x24e1ac++){_0x14042f[_0x24e1ac]===0x1&&this[_0x2e22ab(0x129)]!==_0x24e1ac&&(_0x2f49f3[_0x24e1ac]=null);}this[_0x2e22ab(0xb57)]=undefined;}return _0x2f49f3;},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x724)]=function(_0x37473e){const _0x2aef04=_0x44ae36;return _0x37473e[_0x2aef04(0x30c)]()?_0x37473e['weapons']()[_0x2aef04(0x2d9)]||0x1:0x1;},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x2b6)]=function(_0xe29f1f,_0x51e469){const _0x47ce6e=_0x44ae36;_0xe29f1f&&_0xe29f1f[_0x47ce6e(0x30c)]()&&_0xe29f1f[_0x47ce6e(0xb87)](_0x51e469),this[_0x47ce6e(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)]['clearActiveWeaponSet']=function(_0x590ce3){const _0x3b6646=_0x44ae36;_0x590ce3&&_0x590ce3[_0x3b6646(0x30c)]()&&_0x590ce3[_0x3b6646(0x50f)](),this[_0x3b6646(0x55b)]();},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x132)]=function(){const _0x94f586=_0x44ae36;let _0x57a859='battleUIOffsetX';if(this[_0x94f586(0x750)](_0x57a859))return this['_cache'][_0x57a859];return this[_0x94f586(0x48b)][_0x57a859]=this[_0x94f586(0xa62)](this[_0x94f586(0x2f8)]()),this['_cache'][_0x57a859];},Game_Actor['prototype'][_0x44ae36(0x565)]=function(){const _0x2f9c24=_0x44ae36;let _0x3fddcf='battleUIOffsetY';if(this[_0x2f9c24(0x750)](_0x3fddcf))return this[_0x2f9c24(0x48b)][_0x3fddcf];return this[_0x2f9c24(0x48b)][_0x3fddcf]=this[_0x2f9c24(0x67c)](this[_0x2f9c24(0x2f8)]()),this[_0x2f9c24(0x48b)][_0x3fddcf];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x803)]=Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x93c)],Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x93c)]=function(_0x5bd4ef,_0x3d5ad3,_0x30d2da){const _0x26839c=_0x44ae36;_0x5bd4ef=DataManager[_0x26839c(0x25c)](_0x5bd4ef),VisuMZ[_0x26839c(0x851)][_0x26839c(0x803)][_0x26839c(0x689)](this,_0x5bd4ef,_0x3d5ad3,_0x30d2da),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x26839c(0x6a2)](),this[_0x26839c(0xb9c)](),this['setupBattleCoreData'](),this[_0x26839c(0x265)](),Imported[_0x26839c(0x6d9)]&&this[_0x26839c(0x6f5)]();},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0xb9c)]=function(){const _0x3b7f0b=_0x44ae36,_0x426675=VisuMZ[_0x3b7f0b(0x851)][_0x3b7f0b(0xa08)]['Enemy'];this[_0x3b7f0b(0x894)]=_0x426675[_0x3b7f0b(0x3af)],this[_0x3b7f0b(0x83b)]={},this[_0x3b7f0b(0x937)]();},Game_Enemy[_0x44ae36(0x137)]['setupBattleCoreData']=function(){const _0x137b1e=_0x44ae36,_0x1d77c8=VisuMZ[_0x137b1e(0x851)][_0x137b1e(0xa08)]['Enemy'],_0xfe4379=this[_0x137b1e(0xbcb)]()[_0x137b1e(0x903)];this['_svBattlerData']={'name':'','wtypeId':_0x1d77c8['WtypeId'],'collapse':_0x1d77c8[_0x137b1e(0xb36)],'motionIdle':_0x1d77c8['MotionIdle'],'width':_0x1d77c8[_0x137b1e(0x7c8)]||0x40,'height':_0x1d77c8['Height']||0x40,'anchorX':_0x1d77c8[_0x137b1e(0xa52)]||0x0,'anchorY':_0x1d77c8[_0x137b1e(0x7b8)]||0x0,'shadow':_0x1d77c8[_0x137b1e(0x11c)]};_0xfe4379['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x2040eb=this[_0x137b1e(0x83b)];if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW BATTLER: (.*)>/i))_0x2040eb[_0x137b1e(0x674)]=String(RegExp['$1']);else{if(_0xfe4379['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x278357=String(RegExp['$1'])[_0x137b1e(0x8c4)](/[\r\n]+/)[_0x137b1e(0xac9)]('');_0x2040eb[_0x137b1e(0x674)]=DataManager[_0x137b1e(0x4bf)](_0x278357);}}_0xfe4379['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2040eb[_0x137b1e(0x704)]=eval(RegExp['$1']),_0x2040eb[_0x137b1e(0xb5c)]=eval(RegExp['$2']));if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW COLLAPSE>/i))_0x2040eb[_0x137b1e(0x46e)]=!![];else _0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2040eb[_0x137b1e(0x46e)]=![]);if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW SHOW SHADOW>/i))_0x2040eb[_0x137b1e(0x379)]=!![];else _0xfe4379['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2040eb[_0x137b1e(0x379)]=![]);if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2040eb[_0x137b1e(0x3bb)]=String(RegExp['$1'])[_0x137b1e(0x672)]()[_0x137b1e(0x9de)]();else{if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x22e986=String(RegExp['$1'])[_0x137b1e(0x8c4)](/[\r\n]+/)[_0x137b1e(0xac9)]('');_0x2040eb[_0x137b1e(0x3bb)]=DataManager[_0x137b1e(0x4bf)](_0x22e986);}}_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2040eb[_0x137b1e(0xa20)]=Number(RegExp['$1']),_0x2040eb[_0x137b1e(0x745)]=Number(RegExp['$2']));if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW WEAPON: (.*)>/i))_0x2040eb[_0x137b1e(0x109)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0xfe4379[_0x137b1e(0x54f)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x2c78de=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x4e6103=DataManager['processRandomizedData'](_0x2c78de);_0x2040eb[_0x137b1e(0x109)]=DataManager[_0x137b1e(0x110)](_0x4e6103);}}if(Imported[_0x137b1e(0x6d9)]){const _0x23876f=this[_0x137b1e(0x1ae)]();for(const _0x2849f1 of _0x23876f){const _0x45d7c5=this['traitSet'](_0x2849f1)['Name']['toUpperCase']()[_0x137b1e(0x9de)](),_0x537356=_0x2849f1[_0x137b1e(0xaf2)]()[_0x137b1e(0x9de)]();if(_0xfe4379['match'](VisuMZ[_0x137b1e(0x224)][_0x137b1e(0x808)][_0x137b1e(0x473)['format'](_0x537356,_0x45d7c5)]))_0x2040eb[_0x137b1e(0x674)]=String(RegExp['$1']);else{if(_0xfe4379[_0x137b1e(0x54f)](VisuMZ[_0x137b1e(0x224)]['RegExp']['SvBattlerMass-%1-%2'['format'](_0x537356,_0x45d7c5)])){const _0x5994d0=String(RegExp['$1'])[_0x137b1e(0x8c4)](/[\r\n]+/)['remove']('');_0x2040eb[_0x137b1e(0x674)]=DataManager['processRandomizedData'](_0x5994d0);}}if(_0xfe4379['match'](VisuMZ[_0x137b1e(0x224)][_0x137b1e(0x808)]['SvWeaponSolo-%1-%2'[_0x137b1e(0x4be)](_0x537356,_0x45d7c5)]))_0x2040eb[_0x137b1e(0x109)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0xfe4379[_0x137b1e(0x54f)](VisuMZ[_0x137b1e(0x224)][_0x137b1e(0x808)][_0x137b1e(0x8a3)['format'](_0x537356,_0x45d7c5)])){const _0x23bf9d=String(RegExp['$1'])[_0x137b1e(0x8c4)](/[\r\n]+/)[_0x137b1e(0xac9)](''),_0x25705a=DataManager[_0x137b1e(0x4bf)](_0x23bf9d);_0x2040eb[_0x137b1e(0x109)]=DataManager[_0x137b1e(0x110)](_0x25705a);}}if(_0xfe4379[_0x137b1e(0x54f)](VisuMZ[_0x137b1e(0x224)]['RegExp'][_0x137b1e(0xaf0)['format'](_0x537356,_0x45d7c5)]))_0x2040eb[_0x137b1e(0x3bb)]=String(RegExp['$1'])['toLowerCase']()[_0x137b1e(0x9de)]();else{if(_0xfe4379['match'](VisuMZ['ElementStatusCore'][_0x137b1e(0x808)][_0x137b1e(0x699)[_0x137b1e(0x4be)](_0x537356,_0x45d7c5)])){const _0x2b6914=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x137b1e(0xac9)]('');_0x2040eb[_0x137b1e(0x3bb)]=DataManager[_0x137b1e(0x4bf)](_0x2b6914);}}}}},Game_Enemy['prototype'][_0x44ae36(0x79b)]=function(){const _0x16ab17=_0x44ae36;return this[_0x16ab17(0x894)]||0x0;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x1db)]=function(){const _0x586b23=_0x44ae36;return this[_0x586b23(0x79b)]();},Game_Enemy['prototype'][_0x44ae36(0x4a1)]=function(_0x23ab2c){const _0x4a049b=_0x44ae36;return this[_0x4a049b(0x79b)]();},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x20b)]=function(){const _0x5d9f5b=_0x44ae36;if(this[_0x5d9f5b(0xbcb)]()['note'][_0x5d9f5b(0x54f)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x5d9f5b(0x137)][_0x5d9f5b(0x20b)]['call'](this);},Game_Enemy['prototype'][_0x44ae36(0x6a8)]=function(){const _0x2a64f5=_0x44ae36;if(this[_0x2a64f5(0xbcb)]()[_0x2a64f5(0x903)][_0x2a64f5(0x54f)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x3b4)]=function(){const _0x9f2a73=_0x44ae36,_0x199ee4=[];for(const _0x323179 of this['enemy']()[_0x9f2a73(0x8e0)]){const _0x44cc7e=$dataSkills[_0x323179[_0x9f2a73(0x4b7)]];if(_0x44cc7e&&!_0x199ee4['includes'](_0x44cc7e))_0x199ee4[_0x9f2a73(0xa04)](_0x44cc7e);}return _0x199ee4;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x132)]=function(){const _0x5f26b0=_0x44ae36;let _0x102e38=_0x5f26b0(0x132);if(this[_0x5f26b0(0x750)](_0x102e38))return this['_cache'][_0x102e38];return this[_0x5f26b0(0x48b)][_0x102e38]=this[_0x5f26b0(0xa62)](this[_0x5f26b0(0xbcb)]()),this[_0x5f26b0(0x48b)][_0x102e38];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x565)]=function(){const _0x2817e8=_0x44ae36;let _0x223cee=_0x2817e8(0x565);if(this[_0x2817e8(0x750)](_0x223cee))return this['_cache'][_0x223cee];return this[_0x2817e8(0x48b)][_0x223cee]=this[_0x2817e8(0x67c)](this['enemy']()),this[_0x2817e8(0x48b)][_0x223cee];},Game_Enemy[_0x44ae36(0x137)]['svBattlerData']=function(){const _0x48e379=_0x44ae36;if(this[_0x48e379(0x83b)]!==undefined)return this[_0x48e379(0x83b)];return this[_0x48e379(0xb1e)](),this[_0x48e379(0x83b)];},Game_Enemy['prototype']['hasSvBattler']=function(){const _0x403291=_0x44ae36;return this[_0x403291(0x83e)]()[_0x403291(0x674)]!=='';},Game_Enemy['prototype'][_0x44ae36(0x1f7)]=function(){const _0x533584=_0x44ae36;return this[_0x533584(0x83e)]()[_0x533584(0x674)];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x933)]=function(){const _0x55cdfa=_0x44ae36;return this[_0x55cdfa(0x87e)]()?VisuMZ['BattleCore']['Settings'][_0x55cdfa(0x908)][_0x55cdfa(0x525)]:VisuMZ[_0x55cdfa(0x851)][_0x55cdfa(0xa08)][_0x55cdfa(0x2e0)][_0x55cdfa(0x525)];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x23a)]=function(_0x411904){const _0x5f4010=_0x44ae36;Game_Battler[_0x5f4010(0x137)]['performAction'][_0x5f4010(0x689)](this,_0x411904);if(this[_0x5f4010(0x87e)]())this[_0x5f4010(0x80b)](_0x411904);},Game_Enemy[_0x44ae36(0x137)]['performAttack']=function(){const _0x3910c2=_0x44ae36,_0x4605e7=this[_0x3910c2(0x83e)]()[_0x3910c2(0x109)]||0x0,_0x1202b3=$dataSystem['attackMotions'][_0x4605e7];if(_0x1202b3){if(_0x1202b3['type']===0x0)this[_0x3910c2(0x7f4)]('thrust');else{if(_0x1202b3[_0x3910c2(0x4d5)]===0x1)this[_0x3910c2(0x7f4)](_0x3910c2(0xa3a));else _0x1202b3[_0x3910c2(0x4d5)]===0x2&&this['requestMotion'](_0x3910c2(0x3b1));}}},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0xba1)]=function(){const _0x127e34=_0x44ae36,_0x4b5995=this[_0x127e34(0x83e)]()[_0x127e34(0x109)]||0x0,_0xa6236c=$dataSystem['attackMotions'][_0x4b5995];_0xa6236c&&this[_0x127e34(0x20e)](_0xa6236c[_0x127e34(0x1cd)]);},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x6b5)]=function(){const _0x1e958e=_0x44ae36,_0x41dfb0=this[_0x1e958e(0x83e)]()['wtypeId']||0x0;return $dataSystem[_0x1e958e(0x941)][_0x41dfb0];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x7fc)]=function(_0x2436c0){const _0x258faf=_0x44ae36;return this[_0x258faf(0x6b5)]();},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x477)]=function(){const _0x5d8262=_0x44ae36;Game_Battler[_0x5d8262(0x137)]['performDamage'][_0x5d8262(0x689)](this),this[_0x5d8262(0x578)]()&&this['hasSvBattler']()&&this[_0x5d8262(0x7f4)]('damage'),SoundManager[_0x5d8262(0x79a)]();},Game_Enemy['prototype'][_0x44ae36(0x9bd)]=function(){const _0xefcabc=_0x44ae36;Game_Battler['prototype'][_0xefcabc(0x9bd)][_0xefcabc(0x689)](this),this[_0xefcabc(0x7f4)]('evade');},Game_Enemy['prototype'][_0x44ae36(0x257)]=function(){const _0x17758=_0x44ae36;Game_Battler['prototype'][_0x17758(0x257)]['call'](this),this[_0x17758(0x7f4)]('evade');},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x530)]=function(){const _0x9f42fb=_0x44ae36;Game_Battler[_0x9f42fb(0x137)]['performCounter'][_0x9f42fb(0x689)](this),this['performAttack']();},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x5cf)]=function(){const _0x1ffc7e=_0x44ae36;if(this[_0x1ffc7e(0x87e)]()){if(this[_0x1ffc7e(0xa8f)]()>=0x1)return!![];return this['svBattlerData']()['collapse'];}else return!![];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0xd7)]=function(){const _0x16cda0=_0x44ae36;return this[_0x16cda0(0x83e)]()['anchorX'];},Game_Enemy['prototype'][_0x44ae36(0x4d1)]=function(){const _0x4b7949=_0x44ae36;return this[_0x4b7949(0x83e)]()[_0x4b7949(0xb5c)];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0xb0b)]=function(){const _0x4db525=_0x44ae36;return this[_0x4db525(0x83e)]()[_0x4db525(0x379)];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x4e6)]=Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x238)],Game_Enemy['prototype'][_0x44ae36(0x238)]=function(_0x1ed166){const _0x49bca3=_0x44ae36;VisuMZ['BattleCore'][_0x49bca3(0x4e6)][_0x49bca3(0x689)](this,_0x1ed166),this[_0x49bca3(0xb9c)](),this['setupBattleCoreData']();const _0x585dd0=this[_0x49bca3(0x7ef)]();_0x585dd0&&(_0x585dd0[_0x49bca3(0x3bc)]=undefined,_0x585dd0[_0x49bca3(0x37e)](this));},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x937)]=function(){const _0x2f8de8=_0x44ae36,_0xc89069=VisuMZ[_0x2f8de8(0x851)]['Settings'][_0x2f8de8(0x2e0)];this[_0x2f8de8(0x5ab)]=_0xc89069['NameDamageVisibility']??0x0;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0xa17)]=function(){const _0x5f04e6=_0x44ae36;return this[_0x5f04e6(0x5ab)]&&this[_0x5f04e6(0x5ab)]>0x0;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x94f)]=function(){const _0x322b97=_0x44ae36;this[_0x322b97(0x5ab)]&&this[_0x322b97(0x5ab)]>0x0&&this[_0x322b97(0x5ab)]--;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x2e2)]=function(){const _0x3ffa7c=_0x44ae36;this[_0x3ffa7c(0x5ab)]=0x0;},Game_Enemy['prototype'][_0x44ae36(0x265)]=function(){const _0x37a84f=_0x44ae36;this[_0x37a84f(0x902)]();const _0x510a66=this[_0x37a84f(0xbcb)]()[_0x37a84f(0x903)]||'';if(_0x510a66[_0x37a84f(0x54f)](/<ASPECT NAME:[ ](.*)>/i)){const _0x15b13f=String(RegExp['$1']);this['getAspectData']()[_0x37a84f(0x674)]=_0x15b13f[_0x37a84f(0x4be)](this[_0x37a84f(0x12d)]());}_0x510a66[_0x37a84f(0x54f)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x37a84f(0x794)]()['iconIndex']=Number(RegExp['$1'])),_0x510a66[_0x37a84f(0x54f)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x37a84f(0x794)]()[_0x37a84f(0x5bd)]=String(RegExp['$1'])),_0x510a66['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this['getAspectData']()[_0x37a84f(0x709)]=String(RegExp['$1']));},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x902)]=function(){const _0x15b7e0=_0x44ae36,_0x2b8421=VisuMZ['BattleCore'][_0x15b7e0(0xa08)][_0x15b7e0(0x2e0)][_0x15b7e0(0x1dc)]??_0x15b7e0(0x827);this[_0x15b7e0(0xbbb)]={'name':_0x2b8421[_0x15b7e0(0x4be)](this[_0x15b7e0(0x12d)]()),'iconIndex':VisuMZ[_0x15b7e0(0x851)][_0x15b7e0(0xa08)]['Enemy']['AspectIcon']??0x1a,'nameColor':VisuMZ[_0x15b7e0(0x851)]['Settings'][_0x15b7e0(0x2e0)][_0x15b7e0(0x4f0)]??'2','description':''};},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x794)]=function(){const _0x572433=_0x44ae36;if(this[_0x572433(0xbbb)]===undefined)this[_0x572433(0x265)]();return this[_0x572433(0xbbb)];},Game_Enemy['prototype'][_0x44ae36(0x80d)]=function(){const _0xdd5908=_0x44ae36;return(this[_0xdd5908(0x794)]()['description']||'')['length']>0x0;},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x1a3)]=function(){const _0x45b844=_0x44ae36;return VisuMZ[_0x45b844(0x851)][_0x45b844(0xa08)][_0x45b844(0xff)][_0x45b844(0xa89)];},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x1a3)]=function(){const _0x27bac9=_0x44ae36,_0x15fba2=this['enemy']()?this[_0x27bac9(0xbcb)]()[_0x27bac9(0x903)]||'':'';if(_0x15fba2['match'](/<POPUP POSITION: HEAD>/i))return _0x27bac9(0x89d);else{if(_0x15fba2[_0x27bac9(0x54f)](/<POPUP POSITION: CENTER>/i))return'center';else{if(_0x15fba2[_0x27bac9(0x54f)](/<POPUP POSITION: BASE>/i))return'base';}}return Game_BattlerBase[_0x27bac9(0x137)]['damagePopupPosition'][_0x27bac9(0x689)](this);},Game_BattlerBase['prototype'][_0x44ae36(0x945)]=function(){return 0x0;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x945)]=function(){const _0x503280=_0x44ae36,_0x3c24f8=this['enemy']()?this[_0x503280(0xbcb)]()[_0x503280(0x903)]||'':'';if(_0x3c24f8[_0x503280(0x54f)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype']['damagePopupOffsetX']['call'](this);},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x6ba)]=function(){return 0x0;},Game_Enemy[_0x44ae36(0x137)][_0x44ae36(0x6ba)]=function(){const _0x3fbecb=_0x44ae36,_0x3849e3=this[_0x3fbecb(0xbcb)]()?this[_0x3fbecb(0xbcb)]()[_0x3fbecb(0x903)]||'':'';if(_0x3849e3[_0x3fbecb(0x54f)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x3fbecb(0x6ba)]['call'](this);},Game_Unit[_0x44ae36(0x137)]['processBattleCoreJS']=function(_0x327924){const _0x105166=_0x44ae36;for(const _0x937f8 of this['members']()){if(_0x937f8)_0x937f8[_0x105166(0x538)](_0x327924);}},Game_Unit[_0x44ae36(0x137)][_0x44ae36(0x354)]=function(){const _0x247d8d=_0x44ae36,_0x228b32=this['aliveMembers']();return _0x228b32[Math['randomInt'](_0x228b32[_0x247d8d(0x2d9)])];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x447)]=Game_Party[_0x44ae36(0x137)][_0x44ae36(0x671)],Game_Party[_0x44ae36(0x137)][_0x44ae36(0x671)]=function(_0x5cae51){const _0x9b0e21=_0x44ae36;VisuMZ['BattleCore']['Game_Party_addActor'][_0x9b0e21(0x689)](this,_0x5cae51),BattleManager[_0x9b0e21(0x84e)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x7ff)]=Game_Party['prototype'][_0x44ae36(0x343)],Game_Party[_0x44ae36(0x137)][_0x44ae36(0x343)]=function(_0x45e79c){const _0x5ad384=_0x44ae36;VisuMZ[_0x5ad384(0x851)][_0x5ad384(0x7ff)][_0x5ad384(0x689)](this,_0x45e79c),BattleManager['refreshStatusWindow']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa46)]=Game_Troop['prototype']['setup'],Game_Troop[_0x44ae36(0x137)][_0x44ae36(0x93c)]=function(_0x1b0581){const _0x5ad641=_0x44ae36;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x1b0581),VisuMZ[_0x5ad641(0x851)][_0x5ad641(0xa46)]['call'](this,_0x1b0581),this['extendTroopMembers']();},VisuMZ['BattleCore'][_0x44ae36(0xa34)]=Game_Troop[_0x44ae36(0x137)]['expTotal'],Game_Troop[_0x44ae36(0x137)][_0x44ae36(0x4e5)]=function(){const _0x229889=_0x44ae36;let _0x1c5147=VisuMZ[_0x229889(0x851)]['Game_Troop_expTotal'][_0x229889(0x689)](this);return this[_0x229889(0xa57)]&&(_0x1c5147*=this[_0x229889(0xa57)]()),Math[_0x229889(0xb2f)](_0x1c5147);},Game_Troop[_0x44ae36(0x137)][_0x44ae36(0xa57)]=function(){return 0x1;},Game_Troop[_0x44ae36(0x137)][_0x44ae36(0x8cb)]=function(){const _0x23ad8d=_0x44ae36,_0x4358e0=DataManager['createTroopNote'](this[_0x23ad8d(0x223)]()['id']);if(_0x4358e0[_0x23ad8d(0x54f)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x204e8c=RegExp['$1'][_0x23ad8d(0x8c4)](',')['map'](_0x5e90da=>Number(_0x5e90da));this[_0x23ad8d(0x6b8)](),this[_0x23ad8d(0x878)](_0x204e8c);}},Game_Troop[_0x44ae36(0x137)]['checkExtendTroopCompatibility']=function(){const _0x315fba=_0x44ae36;let _0x3b73e9=_0x315fba(0xa0e)+'\x0a';_0x3b73e9+=_0x315fba(0x18d),Imported[_0x315fba(0x625)]&&(VisuMZ[_0x315fba(0x673)][_0x315fba(0x722)]<1.11&&(alert(_0x3b73e9[_0x315fba(0x4be)](_0x315fba(0x423))),SceneManager[_0x315fba(0x804)]())),Imported[_0x315fba(0x6c0)]&&(VisuMZ[_0x315fba(0xbf0)]['version']<1.19&&(alert(_0x3b73e9[_0x315fba(0x4be)](_0x315fba(0x635))),SceneManager[_0x315fba(0x804)]())),Imported[_0x315fba(0x498)]&&(VisuMZ['BattleSystemSTB']['version']<1.15&&(alert(_0x3b73e9[_0x315fba(0x4be)](_0x315fba(0x761))),SceneManager[_0x315fba(0x804)]()));},Game_Troop['prototype'][_0x44ae36(0x878)]=function(_0xedcaf0){const _0x2c8ae5=_0x44ae36;this['_namesCount']={};for(const _0x50e2e2 of this[_0x2c8ae5(0xb30)]()){if(!_0x50e2e2)continue;_0x50e2e2[_0x2c8ae5(0x86b)]('');}for(const _0x36c77e of _0xedcaf0){const _0x3614d0=$dataTroops[_0x36c77e];if(_0x3614d0)this[_0x2c8ae5(0x2bc)](_0x3614d0);}this[_0x2c8ae5(0x6dc)]();},Game_Troop[_0x44ae36(0x137)][_0x44ae36(0x2bc)]=function(_0x567546){const _0x249ce9=_0x44ae36;for(const _0x7f1ff3 of _0x567546[_0x249ce9(0xb30)]){if($dataEnemies[_0x7f1ff3[_0x249ce9(0xa2f)]]){const _0x203121=_0x7f1ff3[_0x249ce9(0xa2f)],_0x565677=_0x7f1ff3['x'],_0x565854=_0x7f1ff3['y'],_0x42c2e9=new Game_Enemy(_0x203121,_0x565677,_0x565854);_0x7f1ff3[_0x249ce9(0xb4b)]&&_0x42c2e9['hide'](),this[_0x249ce9(0xea)][_0x249ce9(0xa04)](_0x42c2e9);}}},VisuMZ[_0x44ae36(0x851)]['Game_Map_setupBattleback']=Game_Map[_0x44ae36(0x137)][_0x44ae36(0xb0c)],Game_Map['prototype'][_0x44ae36(0xb0c)]=function(){const _0x23640b=_0x44ae36;VisuMZ[_0x23640b(0x851)][_0x23640b(0x8f0)][_0x23640b(0x689)](this),this[_0x23640b(0x1c2)]();},Game_Map[_0x44ae36(0x137)][_0x44ae36(0x1c2)]=function(){const _0x4ee68f=_0x44ae36;this[_0x4ee68f(0x256)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x57182d=$dataMap[_0x4ee68f(0x903)];if(!_0x57182d)return;const _0x4c1c9c=_0x57182d[_0x4ee68f(0x54f)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4c1c9c)for(const _0x1bd1a7 of _0x4c1c9c){_0x1bd1a7['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5c58b2=Number(RegExp['$1']),_0x1331f8=Number(RegExp['$2']),_0x2b533c=_0x1331f8===0x1?this['_regionBattleback1']:this[_0x4ee68f(0x263)],_0x4366c6=String(RegExp['$3']);_0x2b533c[_0x5c58b2]=_0x4366c6;}},VisuMZ['BattleCore'][_0x44ae36(0x8b1)]=Game_Map[_0x44ae36(0x137)]['battleback1Name'],Game_Map[_0x44ae36(0x137)]['battleback1Name']=function(){const _0x28ef06=_0x44ae36;if(!BattleManager[_0x28ef06(0x20c)]()){const _0x1c7163=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x28ef06(0x256)]&&this[_0x28ef06(0x256)][_0x1c7163])return this['_regionBattleback1'][_0x1c7163];}return VisuMZ[_0x28ef06(0x851)][_0x28ef06(0x8b1)][_0x28ef06(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x28e)]=Game_Map[_0x44ae36(0x137)]['battleback2Name'],Game_Map[_0x44ae36(0x137)][_0x44ae36(0x121)]=function(){const _0x66e704=_0x44ae36;if(!BattleManager['isBattleTest']()){const _0x17592a=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x66e704(0x256)]&&this['_regionBattleback2'][_0x17592a])return this[_0x66e704(0x263)][_0x17592a];}return VisuMZ[_0x66e704(0x851)][_0x66e704(0x28e)][_0x66e704(0x689)](this);},VisuMZ['BattleCore']['Game_Map_encounterList']=Game_Map[_0x44ae36(0x137)]['encounterList'],Game_Map[_0x44ae36(0x137)][_0x44ae36(0x53b)]=function(){const _0x42a2a4=_0x44ae36;let _0x453739=JsonEx[_0x42a2a4(0x22b)](VisuMZ[_0x42a2a4(0x851)][_0x42a2a4(0x51a)][_0x42a2a4(0x689)](this));return VisuMZ[_0x42a2a4(0x851)][_0x42a2a4(0x86f)](_0x453739);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x86f)]=function(_0x4c7764){const _0xa35456=_0x44ae36;var _0x8ee7f2,_0x93842f,_0x248b68;for(_0x248b68=_0x4c7764[_0xa35456(0x2d9)]-0x1;_0x248b68>0x0;_0x248b68--){_0x8ee7f2=Math[_0xa35456(0xb78)](Math[_0xa35456(0x38d)]()*(_0x248b68+0x1)),_0x93842f=_0x4c7764[_0x248b68],_0x4c7764[_0x248b68]=_0x4c7764[_0x8ee7f2],_0x4c7764[_0x8ee7f2]=_0x93842f;}return _0x4c7764;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x16d)]=Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0x6dd)],Game_Interpreter['prototype'][_0x44ae36(0x6dd)]=function(_0x4313bd){const _0x3113f6=_0x44ae36;return $gameTemp[_0x3113f6(0x610)](this),VisuMZ['BattleCore']['Game_Interpreter_PluginCommand'][_0x3113f6(0x689)](this,_0x4313bd);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x744)]=Game_Interpreter['prototype'][_0x44ae36(0x1d3)],Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0x1d3)]=function(){const _0x22606e=_0x44ae36;if(SceneManager[_0x22606e(0xb75)]())switch(this['_waitMode']){case _0x22606e(0x27c):if(Imported[_0x22606e(0x85a)]){if($gameScreen['battleCameraData']()[_0x22606e(0x1a9)]>0x0)return!![];this[_0x22606e(0x91b)]='';}break;case'battleAnimation':if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0xe4)]())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x494):if(BattleManager[_0x22606e(0x4b4)]['isAnyBattleBalloonPlaying']())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0xb01):if(Imported[_0x22606e(0x85a)]){if($gameScreen[_0x22606e(0x4ca)]()[_0x22606e(0x864)]>0x0)return!![];if($gameScreen[_0x22606e(0x4ca)]()[_0x22606e(0x116)]>0x0)return!![];this['_waitMode']='';}break;case _0x22606e(0x606):if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0x43e)]())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0xaaf):if(BattleManager['_spriteset'][_0x22606e(0xa70)]())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x65b):if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0x885)]())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x41c):if(BattleManager[_0x22606e(0x551)]['isBusy']())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0xa16):if(BattleManager['_spriteset']['isAnyoneMoving']())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x9ab):if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0xaac)]())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x188):if(BattleManager['_spriteset'][_0x22606e(0x418)]())return!![];this[_0x22606e(0x91b)]='';break;case'battleSpriteSkew':if(BattleManager[_0x22606e(0x4b4)]['isAnyoneSkewing']())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x160):if(Imported[_0x22606e(0x376)]){if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0xb4f)]())return!![];this[_0x22606e(0x91b)]='';}break;case'battleSkew':if(Imported[_0x22606e(0x85a)]){if($gameScreen[_0x22606e(0x4ca)]()[_0x22606e(0x2d6)]>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0xa6f)]())return!![];this[_0x22606e(0x91b)]='';break;case _0x22606e(0x35c):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x22606e(0x4ca)]()[_0x22606e(0x634)]>0x0)return!![];this[_0x22606e(0x91b)]='';}break;case _0x22606e(0x45f):if(Imported[_0x22606e(0x21f)]){if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0x36f)]){if(BattleManager[_0x22606e(0x4b4)][_0x22606e(0x36f)]())return!![];this[_0x22606e(0x91b)]=_0x22606e(0xb86);}else this['_waitMode']='';break;}break;case _0x22606e(0xb86):if(Imported[_0x22606e(0x21f)]){if(BattleManager[_0x22606e(0x4b4)]['isAnyoneInjectAnimating']())return!![];this[_0x22606e(0x91b)]='';}break;}return VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode'][_0x22606e(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x5b3)]=Game_Interpreter['prototype']['command301'],Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0xb40)]=function(_0x580694){const _0x952537=_0x44ae36;return!$gameParty[_0x952537(0x720)]()?this['command301_PreBattleEvent'](_0x580694):VisuMZ[_0x952537(0x851)][_0x952537(0x5b3)][_0x952537(0x689)](this,_0x580694);},Game_Interpreter[_0x44ae36(0x137)]['command3011']=function(_0x297526){const _0x10db3f=_0x44ae36;return VisuMZ[_0x10db3f(0x851)][_0x10db3f(0x5b3)][_0x10db3f(0x689)](this,_0x297526),BattleManager[_0x10db3f(0x187)](_0x48f9c5=>{const _0x3e7e1e=_0x10db3f;this[_0x3e7e1e(0x63d)][this['_indent']]=_0x48f9c5;}),!![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x759)]=function(_0xdf9000){const _0x89c5ae=_0x44ae36,_0x42d883=$dataCommonEvents[_0xdf9000];if(!_0x42d883)return![];if(_0x42d883[_0x89c5ae(0xb29)][_0x89c5ae(0x2d9)]<=0x1)return![];return!![];},Game_Interpreter[_0x44ae36(0x137)]['command301_PreBattleEvent']=function(_0x4aefce){const _0x30a319=_0x44ae36,_0x3b7a06=VisuMZ['BattleCore'][_0x30a319(0xa08)][_0x30a319(0x3ae)],_0x26c25c=_0x3b7a06[_0x30a319(0x1c9)],_0x363329=$dataCommonEvents[_0x26c25c];if(_0x363329&&VisuMZ[_0x30a319(0x851)][_0x30a319(0x759)](_0x26c25c)){const _0x26d4c3=this['isOnCurrentMap']()?this[_0x30a319(0x62e)]:0x0,_0xf64f11=_0x363329[_0x30a319(0xb29)];this[_0x30a319(0xad0)](_0xf64f11,_0x26d4c3),this[_0x30a319(0x255)]=JsonEx[_0x30a319(0x22b)](this[_0x30a319(0x255)]);const _0x56322c={'code':0xbc3,'indent':this[_0x30a319(0x29b)],'parameters':JsonEx[_0x30a319(0x22b)](_0x4aefce)};return this[_0x30a319(0x255)]['splice'](this[_0x30a319(0x338)]+0x1,0x0,_0x56322c),!![];}else return VisuMZ[_0x30a319(0x851)][_0x30a319(0x5b3)][_0x30a319(0x689)](this,_0x4aefce);},VisuMZ['BattleCore'][_0x44ae36(0x5a6)]=BattleManager[_0x44ae36(0x5a2)],BattleManager[_0x44ae36(0x5a2)]=function(){const _0x5d3abb=_0x44ae36;VisuMZ[_0x5d3abb(0x851)]['BattleManager_onEncounter'][_0x5d3abb(0x689)](this),this[_0x5d3abb(0x469)]();},BattleManager[_0x44ae36(0x469)]=function(){const _0x20707d=_0x44ae36,_0x84c1dd=VisuMZ[_0x20707d(0x851)]['Settings'][_0x20707d(0x3ae)],_0x4f95bf=_0x84c1dd[_0x20707d(0x1c9)];_0x4f95bf&&VisuMZ['BattleCore'][_0x20707d(0x759)](_0x4f95bf)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp['reserveCommonEvent'](_0x84c1dd[_0x20707d(0x1c9)]),$gameMap[_0x20707d(0x4df)](),$gameMap[_0x20707d(0x4ef)]['_preBattleCommonEvent']=!![]),_0x84c1dd[_0x20707d(0x36a)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xb7c)]=Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x518)],Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x518)]=function(){const _0x5f20d0=_0x44ae36;if(BattleManager[_0x5f20d0(0x81c)])return;VisuMZ[_0x5f20d0(0x851)][_0x5f20d0(0xb7c)][_0x5f20d0(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['Scene_Map_launchBattle']=Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x23d)],Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x23d)]=function(){const _0x172e18=_0x44ae36;BattleManager[_0x172e18(0x81c)]?this[_0x172e18(0x645)]():VisuMZ[_0x172e18(0x851)][_0x172e18(0x507)][_0x172e18(0x689)](this);},Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x645)]=function(){this['_active']=!![];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x8df)]=SceneManager['isSceneChanging'],SceneManager[_0x44ae36(0x7d1)]=function(){const _0x559ec6=_0x44ae36;if(BattleManager[_0x559ec6(0x81c)])return![];return VisuMZ[_0x559ec6(0x851)][_0x559ec6(0x8df)][_0x559ec6(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x541)]=Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0x685)],Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0x685)]=function(){const _0x139771=_0x44ae36;VisuMZ['BattleCore'][_0x139771(0x541)][_0x139771(0x689)](this),this[_0x139771(0x612)]&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x139771(0x97d)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x44ae36(0x137)]['battleCoreResumeLaunchBattle']=function(){const _0x32d210=_0x44ae36;BattleManager[_0x32d210(0x81c)]=undefined,BattleManager[_0x32d210(0x340)]=!![],this[_0x32d210(0x4cd)]();},VisuMZ[_0x44ae36(0x851)]['Scene_Map_initializeAfter']=Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x58b)],Scene_Map[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(){const _0x477e78=_0x44ae36;VisuMZ['BattleCore'][_0x477e78(0x289)][_0x477e78(0x689)](this),BattleManager[_0x477e78(0x340)]&&(this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xd1)]=Scene_Map['prototype'][_0x44ae36(0x58b)],Scene_Map[_0x44ae36(0x137)]['initialize']=function(){const _0x5d0b21=_0x44ae36;VisuMZ[_0x5d0b21(0x851)]['Scene_Map_initialize']['call'](this),$gameTemp[_0x5d0b21(0x357)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x409)]=Scene_ItemBase[_0x44ae36(0x137)]['applyItem'],Scene_ItemBase[_0x44ae36(0x137)][_0x44ae36(0x999)]=function(){const _0x30da2b=_0x44ae36;VisuMZ[_0x30da2b(0x851)]['Scene_ItemBase_applyItem'][_0x30da2b(0x689)](this);if(this[_0x30da2b(0x4ec)]()[_0x30da2b(0x903)][_0x30da2b(0x54f)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x30da2b(0x903)][_0x30da2b(0x54f)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x30da2b(0x9b2)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this['item']())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ['BattleCore'][_0x44ae36(0x832)]=Scene_Options[_0x44ae36(0x137)][_0x44ae36(0xa74)],Scene_Options[_0x44ae36(0x137)]['maxCommands']=function(){const _0x11356c=_0x44ae36;let _0x125b14=VisuMZ[_0x11356c(0x851)]['Scene_Options_maxCommands'][_0x11356c(0x689)](this);const _0x50ae0c=VisuMZ[_0x11356c(0x851)]['Settings'];if(_0x50ae0c['AutoBattle']['AddOption']&&_0x50ae0c[_0x11356c(0xa30)][_0x11356c(0x943)])_0x125b14+=0x2;if(_0x50ae0c[_0x11356c(0x56f)][_0x11356c(0x5cb)]&&_0x50ae0c[_0x11356c(0x56f)][_0x11356c(0x943)])_0x125b14+=0x1;return _0x125b14;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x32f)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x58b)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(){const _0x4bf3dd=_0x44ae36;VisuMZ['BattleCore'][_0x4bf3dd(0x32f)][_0x4bf3dd(0x689)](this),this[_0x4bf3dd(0xa84)]();},VisuMZ['BattleCore'][_0x44ae36(0x7d7)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x58e)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x58e)]=function(){const _0xd54b6a=_0x44ae36;SceneManager[_0xd54b6a(0x6f8)]()?(Scene_Message[_0xd54b6a(0x137)]['start'][_0xd54b6a(0x689)](this),this[_0xd54b6a(0x4b4)]&&this[_0xd54b6a(0x4b4)][_0xd54b6a(0xa8a)](),BattleManager[_0xd54b6a(0x633)]&&BattleManager[_0xd54b6a(0x9fc)]()):(VisuMZ[_0xd54b6a(0x851)]['Scene_Battle_start']['call'](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ['BattleCore'][_0x44ae36(0x17e)]=Scene_Battle['prototype'][_0x44ae36(0x4cd)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x4cd)]=function(){const _0x32963c=_0x44ae36;SceneManager[_0x32963c(0x295)]()?Scene_Message[_0x32963c(0x137)]['stop']['call'](this):VisuMZ[_0x32963c(0x851)][_0x32963c(0x17e)][_0x32963c(0x689)](this);},VisuMZ['BattleCore'][_0x44ae36(0x6ed)]=Scene_Battle['prototype'][_0x44ae36(0x685)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x685)]=function(){const _0x3eb03f=_0x44ae36;SceneManager[_0x3eb03f(0x295)]()?Scene_Message['prototype']['terminate'][_0x3eb03f(0x689)](this):VisuMZ['BattleCore'][_0x3eb03f(0x6ed)][_0x3eb03f(0x689)](this),$gameTemp['clearBattleBalloons'](),this['clearOnceParallelInterpreters']();},Scene_Battle['prototype']['isRightInputMode']=function(){const _0x22df74=_0x44ae36;if(ConfigManager[_0x22df74(0x41b)]&&ConfigManager[_0x22df74(0x78b)]!==undefined)return ConfigManager[_0x22df74(0x78b)];else{if(this[_0x22df74(0x36d)]()===_0x22df74(0x449))return![];else{return Scene_Message[_0x22df74(0x137)][_0x22df74(0x467)][_0x22df74(0x689)](this);;}}},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x2bf)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x2bf)]=function(){const _0x25cbb8=_0x44ae36;VisuMZ[_0x25cbb8(0x851)]['Scene_Battle_createCancelButton'][_0x25cbb8(0x689)](this),this['battleLayoutStyle']()===_0x25cbb8(0x449)&&this[_0x25cbb8(0x7d2)]();},Scene_Battle['prototype'][_0x44ae36(0x34e)]=function(_0x55e10f){const _0x3ac8a5=_0x44ae36;_0x55e10f?(this[_0x3ac8a5(0x252)]['x']=(Graphics[_0x3ac8a5(0xa20)]-Graphics['boxWidth'])/0x2,this['_windowLayer']['y']=(Graphics[_0x3ac8a5(0x745)]-Graphics[_0x3ac8a5(0x7a7)])/0x2):(this['_windowLayer']['x']=Graphics[_0x3ac8a5(0xa20)]*0xa,this['_windowLayer']['y']=Graphics[_0x3ac8a5(0x745)]*0xa);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x866)]=Scene_Battle['prototype']['selectNextCommand'],Scene_Battle[_0x44ae36(0x137)]['selectNextCommand']=function(){const _0x3df1ec=_0x44ae36,_0x198e66=BattleManager[_0x3df1ec(0x2f8)]();VisuMZ[_0x3df1ec(0x851)][_0x3df1ec(0x866)][_0x3df1ec(0x689)](this);if(_0x198e66){if(_0x198e66===BattleManager[_0x3df1ec(0x2f8)]())return;if(_0x198e66===BattleManager[_0x3df1ec(0xb62)])return;if(_0x198e66[_0x3df1ec(0x7ef)]())_0x198e66['battler']()[_0x3df1ec(0x7fa)]();}},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x5a5)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x2cd)],Scene_Battle['prototype'][_0x44ae36(0x2cd)]=function(){const _0x532d90=_0x44ae36,_0x11759b=BattleManager[_0x532d90(0x2f8)]();if(_0x11759b&&_0x11759b[_0x532d90(0x7ef)])_0x11759b[_0x532d90(0x7ef)]()[_0x532d90(0x7fa)]();VisuMZ[_0x532d90(0x851)][_0x532d90(0x5a5)][_0x532d90(0x689)](this);},VisuMZ['BattleCore']['Scene_Battle_createAllWindows']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xbe2)],Scene_Battle['prototype']['createAllWindows']=function(){const _0x23c812=_0x44ae36;this[_0x23c812(0x9d1)](),VisuMZ[_0x23c812(0x851)][_0x23c812(0xa98)]['call'](this),this[_0x23c812(0x77e)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xfd)]=Scene_Battle['prototype']['logWindowRect'],Scene_Battle[_0x44ae36(0x137)]['logWindowRect']=function(){const _0x593397=_0x44ae36;if(VisuMZ[_0x593397(0x851)][_0x593397(0xa08)]['BattleLog'][_0x593397(0x6f0)])return VisuMZ['BattleCore'][_0x593397(0xa08)]['BattleLog'][_0x593397(0x6f0)][_0x593397(0x689)](this);return VisuMZ[_0x593397(0x851)][_0x593397(0xfd)][_0x593397(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa45)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x361)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x361)]=function(){const _0x588a42=_0x44ae36;VisuMZ[_0x588a42(0x851)][_0x588a42(0xa45)][_0x588a42(0x689)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xdc)]=function(){const _0x13304c=_0x44ae36,_0x273add=this[_0x13304c(0x7b4)];_0x273add[_0x13304c(0x705)](_0x13304c(0x90b),this[_0x13304c(0x7f3)][_0x13304c(0x7ab)](this)),_0x273add[_0x13304c(0x705)]('options',this[_0x13304c(0x573)][_0x13304c(0x7ab)](this));const _0x1f1307=this[_0x13304c(0x36d)]();switch(_0x1f1307){case'xp':case _0x13304c(0x984):return this[_0x13304c(0x7b4)][_0x13304c(0x517)](0x1);break;}},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7f3)]=function(){const _0x58d06e=_0x44ae36;BattleManager[_0x58d06e(0x789)]=!![],$gameParty['makeActions'](),this[_0x58d06e(0xa18)](),BattleManager[_0x58d06e(0xbfa)]()&&(BattleManager[_0x58d06e(0x772)]=![]);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x573)]=function(){const _0x200546=_0x44ae36;this[_0x200546(0x1cc)]()?(this[_0x200546(0x369)]=!![],this[_0x200546(0x551)][_0x200546(0xa04)](_0x200546(0x91d),VisuMZ['BattleCore'][_0x200546(0xa08)]['PartyCmd'][_0x200546(0x4e0)])):this['callOptions']();},Scene_Battle['prototype'][_0x44ae36(0x1cc)]=function(){const _0x4d5a61=_0x44ae36;return BattleManager[_0x4d5a61(0x4f9)]();},Scene_Battle[_0x44ae36(0x137)]['callOptions']=function(){const _0x110785=_0x44ae36;this[_0x110785(0x369)]=![],this[_0x110785(0x4b4)][_0x110785(0xa8a)](),this[_0x110785(0x252)][_0x110785(0x7bb)]=![];if(BattleManager[_0x110785(0x20c)]())($dataSystem['battleback1Name']||$dataSystem[_0x110785(0x121)])&&SceneManager['snapForBackground']();else($gameMap[_0x110785(0x3d3)]()||$gameMap['battleback2Name']())&&SceneManager['snapForBackground']();SceneManager['push'](Scene_Options),BattleManager[_0x110785(0xbfa)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x110785(0x2f8)]());},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x9a8)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x9a8)]=function(){const _0x3ff210=_0x44ae36;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess'][_0x3ff210(0x689)](this);if(this[_0x3ff210(0x369)]&&!BattleManager['_subject'])this['callOptions']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1b3)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xa8a)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x1b9af0=_0x44ae36;VisuMZ[_0x1b9af0(0x851)][_0x1b9af0(0x1b3)][_0x1b9af0(0x689)](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x77e)]=function(){const _0x315f5e=_0x44ae36,_0x869c5=this[_0x315f5e(0x19c)]();this[_0x315f5e(0x46b)]=new Window_AutoBattleCancel(_0x869c5),this[_0x315f5e(0x46b)][_0x315f5e(0x5ed)](),this['addChild'](this[_0x315f5e(0x46b)]);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x19c)]=function(){const _0x2e58b2=_0x44ae36;return VisuMZ[_0x2e58b2(0x851)][_0x2e58b2(0xa08)][_0x2e58b2(0xa30)][_0x2e58b2(0x197)][_0x2e58b2(0x689)](this);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xa84)]=function(){const _0x4a9e38=_0x44ae36;this[_0x4a9e38(0x8ef)]=[];},Scene_Battle['prototype'][_0x44ae36(0x805)]=function(){const _0x19a87e=_0x44ae36;if(!this['_onceParallelInterpreters'])return;for(const _0xca86cd of this[_0x19a87e(0x8ef)]){_0xca86cd&&_0xca86cd['update']();}},Scene_Battle[_0x44ae36(0x137)]['playOnceParallelInterpreter']=function(_0x2aa001){const _0x5b2f20=_0x44ae36,_0x45b3f2=$dataCommonEvents[_0x2aa001];if(!_0x45b3f2)return;const _0x3d2fcb=new Game_BattleOnceParallelInterpreter();this[_0x5b2f20(0x52c)](_0x3d2fcb),_0x3d2fcb['setCommonEvent'](_0x2aa001);},Scene_Battle[_0x44ae36(0x137)]['addOnceParallelInterpreter']=function(_0x53fb61){const _0x4bf1d1=_0x44ae36;this[_0x4bf1d1(0x8ef)]=this[_0x4bf1d1(0x8ef)]||[],this[_0x4bf1d1(0x8ef)][_0x4bf1d1(0xa04)](_0x53fb61);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x4d0)]=function(_0x3b475e){const _0x2dac5b=_0x44ae36;this['_onceParallelInterpreters']=this[_0x2dac5b(0x8ef)]||[],this[_0x2dac5b(0x8ef)][_0x2dac5b(0xac9)](_0x3b475e);},Game_Troop[_0x44ae36(0x137)][_0x44ae36(0x415)]=function(){const _0x5b43b2=_0x44ae36;for(const _0x1248f6 of this['troop']()[_0x5b43b2(0x849)]){if(!this['doesPageHaveOnceParallelStart'](_0x1248f6))continue;SceneManager[_0x5b43b2(0x97d)][_0x5b43b2(0x6eb)](_0x1248f6);}},Game_Troop[_0x44ae36(0x137)][_0x44ae36(0x5f9)]=function(_0x5ef8c3){const _0x3d84be=_0x44ae36;if(!_0x5ef8c3)return;for(const _0x1294ee of _0x5ef8c3[_0x3d84be(0xb29)]){if([0x6c,0x198]['includes'](_0x1294ee[_0x3d84be(0x741)])){const _0xd431af=_0x1294ee[_0x3d84be(0x1fa)][0x0];if(_0xd431af[_0x3d84be(0x54f)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x6eb)]=function(_0x5b0b8c){const _0x122e79=_0x44ae36;if(!_0x5b0b8c)return;const _0x48d7ad=new Game_BattleOnceParallelInterpreter();this[_0x122e79(0x52c)](_0x48d7ad),_0x48d7ad[_0x122e79(0x5d1)](_0x5b0b8c);};function Game_BattleOnceParallelInterpreter(){const _0x930913=_0x44ae36;this[_0x930913(0x58b)](...arguments);}Game_BattleOnceParallelInterpreter[_0x44ae36(0x137)]=Object[_0x44ae36(0x318)](Game_Interpreter[_0x44ae36(0x137)]),Game_BattleOnceParallelInterpreter[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x44ae36(0x137)]['setCommonEvent']=function(_0x5b6aa9){const _0x5320e9=_0x44ae36,_0xfd5f8e=$dataCommonEvents[_0x5b6aa9];_0xfd5f8e?this[_0x5320e9(0x93c)](_0xfd5f8e[_0x5320e9(0xb29)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x44ae36(0x137)]['terminate']=function(){const _0x5d2f79=_0x44ae36;if(!SceneManager[_0x5d2f79(0xb75)]())return;SceneManager[_0x5d2f79(0x97d)][_0x5d2f79(0x4d0)](this),Game_Interpreter[_0x5d2f79(0x137)][_0x5d2f79(0x685)][_0x5d2f79(0x689)](this);},Game_BattleOnceParallelInterpreter['prototype']['setTroopPage']=function(_0x41474b){const _0x5c1055=_0x44ae36;_0x41474b?this['setup'](_0x41474b[_0x5c1055(0xb29)],0x0):this['terminate']();},Scene_Battle[_0x44ae36(0x137)]['isPartyCommandWindowDisabled']=function(){const _0x4cee02=_0x44ae36;return VisuMZ[_0x4cee02(0x851)]['Settings'][_0x4cee02(0x8cd)][_0x4cee02(0x348)];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x8ab)]=Scene_Battle[_0x44ae36(0x137)]['startPartyCommandSelection'],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xb00)]=function(){const _0x37ae8d=_0x44ae36;this[_0x37ae8d(0x646)]()?this['onDisabledPartyCommandSelection']():VisuMZ['BattleCore'][_0x37ae8d(0x8ab)][_0x37ae8d(0x689)](this);},Scene_Battle['prototype'][_0x44ae36(0x173)]=function(){const _0x46e82f=_0x44ae36;if(BattleManager['isDTB']())this[_0x46e82f(0xa18)]();else BattleManager[_0x46e82f(0xbfa)]()&&VisuMZ[_0x46e82f(0x851)][_0x46e82f(0x8ab)][_0x46e82f(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6f3)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xbc5)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xbc5)]=function(){const _0x1b6467=_0x44ae36;BattleManager['isTpb']()?(this[_0x1b6467(0xb58)](),this['startActorCommandSelection']()):VisuMZ[_0x1b6467(0x851)][_0x1b6467(0x6f3)][_0x1b6467(0x689)](this);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xb58)]=function(){const _0x1cd782=_0x44ae36;if(!VisuMZ[_0x1cd782(0x851)][_0x1cd782(0x2e4)])return;if(Imported[_0x1cd782(0x6c0)]&&BattleManager['isCTB']())return;const _0x3890bc=$gameParty[_0x1cd782(0xbad)]()[_0x1cd782(0x1e5)](_0x90e9ef=>_0x90e9ef[_0x1cd782(0x247)]()&&_0x90e9ef[_0x1cd782(0x897)]());BattleManager['_currentActor']=_0x3890bc[0x0]||null,BattleManager[_0x1cd782(0x371)]&&BattleManager[_0x1cd782(0x371)]['setActionState'](_0x1cd782(0x1ba));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x157)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x3c7)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x3c7)]=function(){const _0x58ccc3=_0x44ae36;VisuMZ[_0x58ccc3(0x851)][_0x58ccc3(0x157)][_0x58ccc3(0x689)](this);if(!BattleManager[_0x58ccc3(0xbfa)]())BattleManager[_0x58ccc3(0x371)]=null;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6fa)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x8aa)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x8aa)]=function(){const _0x463a9c=_0x44ae36;VisuMZ[_0x463a9c(0x851)][_0x463a9c(0x6fa)][_0x463a9c(0x689)](this),this[_0x463a9c(0x15b)]();},Scene_Battle[_0x44ae36(0x137)]['createActorCommandWindowBattleCore']=function(){const _0x23f73e=_0x44ae36,_0x29b7f8=this['_actorCommandWindow'];_0x29b7f8[_0x23f73e(0x705)](_0x23f73e(0x874),this[_0x23f73e(0x3cc)][_0x23f73e(0x7ab)](this)),_0x29b7f8[_0x23f73e(0x705)](_0x23f73e(0x90b),this[_0x23f73e(0x44b)][_0x23f73e(0x7ab)](this)),_0x29b7f8[_0x23f73e(0x705)](_0x23f73e(0x6b7),this['actorCommandSingleSkill'][_0x23f73e(0x7ab)](this)),BattleManager['isTpb']()&&(this[_0x23f73e(0x646)]()?delete _0x29b7f8[_0x23f73e(0x801)][_0x23f73e(0xbda)]:_0x29b7f8['setHandler']('cancel',this[_0x23f73e(0x6e9)][_0x23f73e(0x7ab)](this)));},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x3cc)]=function(){const _0x14c56c=_0x44ae36;this[_0x14c56c(0x3c7)]();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x44b)]=function(){const _0xddeea2=_0x44ae36;BattleManager[_0xddeea2(0x2f8)]()[_0xddeea2(0x194)](),BattleManager[_0xddeea2(0xef)](),BattleManager['selectNextActor'](),this['changeInputWindow']();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7ae)]=function(){const _0x393f04=_0x44ae36,_0x432df3=BattleManager[_0x393f04(0x3a8)](),_0x1a57eb=this[_0x393f04(0xbc6)][_0x393f04(0x934)]();_0x432df3[_0x393f04(0x17a)](_0x1a57eb),BattleManager[_0x393f04(0x2f8)]()[_0x393f04(0x924)]($dataSkills[_0x1a57eb]),this[_0x393f04(0xfa)]();},Scene_Battle['prototype'][_0x44ae36(0x6e9)]=function(){const _0x2df150=_0x44ae36;this[_0x2df150(0x569)]()?this['performTpbActiveCheckSwitch']():this[_0x2df150(0x763)]();},VisuMZ['BattleCore']['TpbActiveChangeEnabled']=![],Scene_Battle[_0x44ae36(0x137)]['tpbActorSwitchConditionsMet']=function(){const _0x331ec1=_0x44ae36;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x331ec1(0x106)]())return![];else{if(!VisuMZ[_0x331ec1(0x851)][_0x331ec1(0x2e4)])return![];const _0x3477b=$gameParty[_0x331ec1(0xbad)]()[_0x331ec1(0x1e5)](_0x36b8fb=>_0x36b8fb[_0x331ec1(0x247)]()&&_0x36b8fb[_0x331ec1(0x897)]());return _0x3477b[_0x331ec1(0x2d9)]>0x0&&BattleManager[_0x331ec1(0x2f8)]()!==_0x3477b[_0x3477b[_0x331ec1(0x2d9)]-0x1];}},Scene_Battle['prototype']['performTpbActiveCheckSwitch']=function(){const _0x3cf534=_0x44ae36,_0x180f49=BattleManager[_0x3cf534(0x2f8)](),_0x449f61=_0x180f49['battler']();if(_0x449f61)_0x449f61[_0x3cf534(0x7fa)]();const _0x2653a1=$gameParty[_0x3cf534(0xbad)]()['filter'](_0x518d92=>_0x518d92['isTpbCharged']()&&_0x518d92[_0x3cf534(0x897)]()),_0x9d108d=_0x2653a1['indexOf'](_0x180f49),_0x419ae8=_0x2653a1[_0x9d108d+0x1];BattleManager[_0x3cf534(0x371)]=_0x419ae8||null;if(_0x419ae8)_0x419ae8[_0x3cf534(0x978)](_0x3cf534(0x1ba));_0x180f49[_0x3cf534(0x978)]('undecided'),this[_0x3cf534(0x781)]();},Scene_Battle['prototype'][_0x44ae36(0x763)]=function(){const _0x1ef668=_0x44ae36;this['_partyCommandWindow'][_0x1ef668(0x93c)](),this[_0x1ef668(0xbc6)][_0x1ef668(0x1aa)]();if(!VisuMZ[_0x1ef668(0x851)][_0x1ef668(0x2e4)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1ef668(0x106)]())return;if(BattleManager[_0x1ef668(0x371)]){BattleManager['_currentActor'][_0x1ef668(0x978)](_0x1ef668(0xada));const _0x426128=BattleManager[_0x1ef668(0x371)][_0x1ef668(0x7ef)]();if(_0x426128)_0x426128['stepBack']();}BattleManager[_0x1ef668(0x371)]=null;},VisuMZ['BattleCore']['Scene_Battle_createHelpWindow']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x54d)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x54d)]=function(){const _0x6e5626=_0x44ae36;VisuMZ[_0x6e5626(0x851)][_0x6e5626(0x47b)][_0x6e5626(0x689)](this),this[_0x6e5626(0x3c8)]();},Scene_Battle['prototype']['createHelpWindowBattleCore']=function(){const _0x388313=_0x44ae36;this['_actorCommandWindow'][_0x388313(0x521)](this[_0x388313(0xb0f)]),this[_0x388313(0x7b4)][_0x388313(0x521)](this[_0x388313(0xb0f)]);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x9d1)]=function(){const _0x4b76b2=_0x44ae36;if(!VisuMZ[_0x4b76b2(0x851)][_0x4b76b2(0xa08)][_0x4b76b2(0x2e0)]['NameLegacy'])return;this[_0x4b76b2(0x6c7)]=new Sprite(),this[_0x4b76b2(0x6c7)]['x']=this[_0x4b76b2(0x252)]['x'],this['_enemyNameContainer']['y']=this[_0x4b76b2(0x252)]['y'];const _0x57b07d=this[_0x4b76b2(0x8ad)][_0x4b76b2(0x83c)](this[_0x4b76b2(0x252)]);this[_0x4b76b2(0x820)](this[_0x4b76b2(0x6c7)],_0x57b07d);for(let _0x2cade2=0x0;_0x2cade2<0x8;_0x2cade2++){const _0x475d85=new Window_EnemyName(_0x2cade2);this[_0x4b76b2(0x6c7)][_0x4b76b2(0x33d)](_0x475d85);}},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x482)]=Scene_Battle['prototype'][_0x44ae36(0x5aa)],Scene_Battle['prototype'][_0x44ae36(0x5aa)]=function(){const _0x1d2caa=_0x44ae36;VisuMZ[_0x1d2caa(0x851)][_0x1d2caa(0x482)][_0x1d2caa(0x689)](this),this['createMultiTargetWindows']();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x2a4)]=function(){const _0x3c5538=_0x44ae36;this['createMultiTargetWindow'](!![]),this[_0x3c5538(0x4aa)](![]);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xb96)]=function(_0x57ac0f){const _0x56caea=_0x44ae36,_0x2f10d0=Window_BattleMultiTarget[_0x56caea(0xacf)],_0x220bb8=this[_0x56caea(0x6c1)](0x1,!![]);let _0x5f49c5=_0x57ac0f?Graphics[_0x56caea(0x345)]-_0x2f10d0:0x0;_0x5f49c5+=_0x57ac0f?Window_BattleMultiTarget[_0x56caea(0x19b)]:Window_BattleMultiTarget[_0x56caea(0x59d)];const _0x10174d=[_0x56caea(0x957)]['includes'](this[_0x56caea(0x36d)]())?0x0:this[_0x56caea(0x154)][_0x56caea(0x745)];let _0x3dee9b=Graphics[_0x56caea(0x7a7)]-_0x10174d-_0x220bb8;return _0x3dee9b+=_0x57ac0f?Window_BattleMultiTarget[_0x56caea(0x4fa)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x5f49c5,_0x3dee9b,_0x2f10d0,_0x220bb8);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x4aa)]=function(_0x2e4e87){const _0x2cad0c=_0x44ae36,_0x14616e=this['multiTargetWindowRect'](_0x2e4e87),_0x359411=new Window_BattleMultiTarget(_0x14616e,_0x2e4e87);this[_0x2cad0c(0x56c)](_0x359411),_0x2e4e87?this['_actorMultiTargetWindow']=_0x359411:this[_0x2cad0c(0x2bb)]=_0x359411;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x390)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x8e5)],Scene_Battle['prototype'][_0x44ae36(0x8e5)]=function(){const _0x37352e=_0x44ae36;if(this[_0x37352e(0x7b6)])return![];return VisuMZ[_0x37352e(0x851)][_0x37352e(0x390)][_0x37352e(0x689)](this);},VisuMZ['BattleCore']['Scene_Battle_updateCancelButton']=Scene_Battle['prototype'][_0x44ae36(0x7af)],Scene_Battle['prototype'][_0x44ae36(0x7af)]=function(){const _0x1d8bad=_0x44ae36;if(this[_0x1d8bad(0x687)]&&this[_0x1d8bad(0x7b6)]){this[_0x1d8bad(0x687)][_0x1d8bad(0x7bb)]=!![];return;}VisuMZ[_0x1d8bad(0x851)][_0x1d8bad(0x566)][_0x1d8bad(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_isTimeActiveIBS']=Scene_Battle[_0x44ae36(0x137)]['isTimeActive'],Scene_Battle[_0x44ae36(0x137)]['isTimeActive']=function(){const _0x27601d=_0x44ae36;if(this[_0x27601d(0x7b6)])return![];return VisuMZ[_0x27601d(0x851)][_0x27601d(0x648)][_0x27601d(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_createAllWindowsIBS']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xbe2)],Scene_Battle['prototype'][_0x44ae36(0xbe2)]=function(){const _0x4816a9=_0x44ae36;VisuMZ[_0x4816a9(0x851)]['Scene_Battle_createAllWindowsIBS'][_0x4816a9(0x689)](this),this[_0x4816a9(0x626)]();},VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindowIBS']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x361)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x361)]=function(){const _0x1786a6=_0x44ae36;VisuMZ['BattleCore'][_0x1786a6(0x668)][_0x1786a6(0x689)](this);const _0x16ab83=this[_0x1786a6(0x7b4)];_0x16ab83['setHandler'](_0x1786a6(0x15f),this[_0x1786a6(0xa7a)][_0x1786a6(0x7ab)](this,_0x16ab83));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x609)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x8aa)],Scene_Battle['prototype'][_0x44ae36(0x8aa)]=function(){const _0x2d5c19=_0x44ae36;VisuMZ[_0x2d5c19(0x851)]['Scene_Battle_createActorCommandWindowIBS'][_0x2d5c19(0x689)](this);const _0x4bbf91=this[_0x2d5c19(0xbc6)];_0x4bbf91[_0x2d5c19(0x705)]('status',this[_0x2d5c19(0xa7a)]['bind'](this,_0x4bbf91));},Scene_Battle[_0x44ae36(0x137)]['createInBattleStatusWindow']=function(){const _0x18346d=_0x44ae36,_0x5cd266=this[_0x18346d(0x245)](),_0x88ae03=new Window_InBattleStatus(_0x5cd266);this['addWindow'](_0x88ae03),_0x88ae03[_0x18346d(0x5ed)](),_0x88ae03[_0x18346d(0x1aa)](),this['_inBattleStatusWindow']=_0x88ae03;},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x245)]=function(){const _0x363b4d=_0x44ae36;if(VisuMZ[_0x363b4d(0x851)][_0x363b4d(0xa08)]['InBattleStatus'][_0x363b4d(0x75b)])return VisuMZ[_0x363b4d(0x851)]['Settings'][_0x363b4d(0x4e1)]['StatusWindow_RectJS'][_0x363b4d(0x689)](this);const _0x1665c7=Graphics[_0x363b4d(0x345)]>0x3e8?0x78:0x0,_0x47a017=this[_0x363b4d(0xb0f)]['y']+this[_0x363b4d(0xb0f)]['height'],_0x244052=Graphics[_0x363b4d(0x345)]-_0x1665c7*0x2,_0x5eeb1a=Graphics[_0x363b4d(0x7a7)]-_0x47a017-this[_0x363b4d(0x556)]();return new Rectangle(_0x1665c7,_0x47a017,_0x244052,_0x5eeb1a);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xa7a)]=function(_0x4c133e){const _0x164d15=_0x44ae36;this[_0x164d15(0x56c)](this[_0x164d15(0x7f8)]),this['_inBattleStatusMode']=!![],this[_0x164d15(0xb0f)][_0x164d15(0xb98)]();const _0x380f65=['xp','portrait',_0x164d15(0x449),_0x164d15(0x860),_0x164d15(0x957)];let _0xd7d882=_0x380f65[_0x164d15(0x76b)](this[_0x164d15(0x36d)]());_0xd7d882&&(_0x4c133e[_0x164d15(0x5ed)](),_0x4c133e[_0x164d15(0x1aa)]()),this[_0x164d15(0x7f8)][_0x164d15(0x37e)](BattleManager[_0x164d15(0x2f8)]()||$gameParty[_0x164d15(0xb63)]()[0x0]),this['_inBattleStatusWindow'][_0x164d15(0x32e)](_0x4c133e),this[_0x164d15(0x7f8)][_0x164d15(0xb98)](),this[_0x164d15(0x7f8)]['open']();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x2fa)]=function(){const _0x585206=_0x44ae36;this[_0x585206(0x7b6)]=![],this[_0x585206(0xb0f)]['hide']();const _0x2fe119=this[_0x585206(0x7f8)][_0x585206(0xd5)]();_0x2fe119[_0x585206(0xb98)](),_0x2fe119[_0x585206(0xa8e)](),_0x2fe119[_0x585206(0x1ed)](),this[_0x585206(0x7f8)][_0x585206(0x5ed)](),this[_0x585206(0x7f8)]['close']();},Scene_Battle['prototype'][_0x44ae36(0x36d)]=function(){const _0x295601=_0x44ae36;if($gameTemp[_0x295601(0x3ea)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x295601(0x2cf)])return this['_battleLayoutStyle'];return this[_0x295601(0x2cf)]=VisuMZ[_0x295601(0x851)][_0x295601(0xa08)]['BattleLayout'][_0x295601(0x8c9)][_0x295601(0x672)]()['trim'](),this[_0x295601(0x2cf)]===_0x295601(0x860)&&!Imported[_0x295601(0x49b)]&&(this[_0x295601(0x2cf)]='default'),this['_battleLayoutStyle']==='frontview_ui'&&!Imported['VisuMZ_3_FrontviewBattleUI']&&(this[_0x295601(0x2cf)]=_0x295601(0x199)),this['_battleLayoutStyle'];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xbd7)]=Scene_Battle['prototype']['windowAreaHeight'],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x556)]=function(){const _0x2f31bb=_0x44ae36,_0x1f8e08=this[_0x2f31bb(0x36d)]();switch(_0x1f8e08){case'list':return this[_0x2f31bb(0x6c1)](Math['max'](0x1,$gameParty[_0x2f31bb(0x38c)]()),!![]);break;case _0x2f31bb(0x449):return this['calcWindowHeight'](0x4,!![]);break;default:return VisuMZ[_0x2f31bb(0x851)]['Scene_Battle_windowAreaHeight'][_0x2f31bb(0x689)](this);break;}},VisuMZ['BattleCore']['Scene_Battle_helpWindowRect']=Scene_Battle['prototype'][_0x44ae36(0x5c5)],Scene_Battle[_0x44ae36(0x137)]['helpWindowRect']=function(){const _0x54fc44=_0x44ae36,_0x3e2676=this[_0x54fc44(0x36d)]();switch(_0x3e2676){case _0x54fc44(0x449):return this[_0x54fc44(0x9c4)]();break;case _0x54fc44(0x199):case'list':case'xp':case _0x54fc44(0x984):default:return VisuMZ['BattleCore']['Scene_Battle_helpWindowRect'][_0x54fc44(0x689)](this);break;}},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x572)]=function(){const _0x25eb23=_0x44ae36,_0x30d51b=this['battleLayoutStyle']();switch(_0x30d51b){case'xp':case _0x25eb23(0x984):return this[_0x25eb23(0x5c0)]();break;case _0x25eb23(0x449):return this[_0x25eb23(0x5d5)]();break;case _0x25eb23(0x199):case _0x25eb23(0xb29):default:return this[_0x25eb23(0x8ba)]();break;}},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x35b)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x327)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x327)]=function(){const _0x4ed147=_0x44ae36,_0x1bc6e0=this[_0x4ed147(0x36d)]();switch(_0x1bc6e0){case'xp':case _0x4ed147(0x984):return this[_0x4ed147(0x13c)]();break;case _0x4ed147(0x449):return this[_0x4ed147(0x713)]();case'default':case'list':default:return this[_0x4ed147(0x9fd)]();break;}},Scene_Battle['prototype']['partyCommandWindowRectDefaultStyle']=function(){const _0x49c080=_0x44ae36,_0x155ce0=VisuMZ[_0x49c080(0x851)][_0x49c080(0xa08)][_0x49c080(0x844)],_0x41f607=_0x155ce0[_0x49c080(0x75d)]||0xc0,_0x328c44=this['windowAreaHeight'](),_0x209bc3=this['isRightInputMode']()?Graphics[_0x49c080(0x345)]-_0x41f607:0x0,_0x1e6da4=Graphics[_0x49c080(0x7a7)]-_0x328c44;return new Rectangle(_0x209bc3,_0x1e6da4,_0x41f607,_0x328c44);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7d3)]=function(){const _0x29cdcc=_0x44ae36;return this[_0x29cdcc(0x327)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x3fd)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x4d6)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x4d6)]=function(){const _0x246ec4=_0x44ae36;if(this[_0x246ec4(0x7b6)])return;const _0x57bcdb=this['battleLayoutStyle']();switch(_0x57bcdb){case'xp':case _0x246ec4(0x984):case _0x246ec4(0x449):break;case'default':case _0x246ec4(0xb29):default:VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition'][_0x246ec4(0x689)](this);break;}},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x8ba)]=function(){const _0x688c3e=_0x44ae36,_0x3572ce=VisuMZ['BattleCore'][_0x688c3e(0xa08)]['BattleLayout'],_0x18dc29=Window_BattleStatus['prototype'][_0x688c3e(0x9d0)](),_0x5a7ed0=Graphics['boxWidth']-(_0x3572ce['CommandWidth']||0xc0),_0x45597e=this[_0x688c3e(0x556)]()+_0x18dc29,_0x188925=this[_0x688c3e(0x467)]()?0x0:Graphics['boxWidth']-_0x5a7ed0,_0x2edf36=Graphics[_0x688c3e(0x7a7)]-_0x45597e+_0x18dc29;return new Rectangle(_0x188925,_0x2edf36,_0x5a7ed0,_0x45597e);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x5c0)]=function(){const _0x277120=_0x44ae36,_0x339ee7=Window_BattleStatus[_0x277120(0x137)][_0x277120(0x9d0)](),_0x3349b3=Graphics[_0x277120(0x345)],_0x2eb29f=this[_0x277120(0x556)]()+_0x339ee7,_0x3cb48d=0x0,_0x426bb2=Graphics['boxHeight']-_0x2eb29f+_0x339ee7;return new Rectangle(_0x3cb48d,_0x426bb2,_0x3349b3,_0x2eb29f);},Scene_Battle[_0x44ae36(0x137)]['partyCommandWindowRectXPStyle']=function(){const _0x503517=_0x44ae36,_0x344462=Graphics['boxWidth']/0x2,_0xbdcc08=this[_0x503517(0x6c1)](VisuMZ[_0x503517(0x851)]['Settings'][_0x503517(0x844)][_0x503517(0x3ad)],!![]),_0x4cdecc=Math['round']((Graphics[_0x503517(0x345)]-_0x344462)/0x2),_0x4ba44d=Graphics[_0x503517(0x7a7)]-_0xbdcc08-this[_0x503517(0x5c0)]()['height'];return new Rectangle(_0x4cdecc,_0x4ba44d,_0x344462,_0xbdcc08);},Scene_Battle[_0x44ae36(0x137)]['helpWindowRectBorderStyle']=function(){const _0x671175=_0x44ae36,_0x1b4164=Graphics[_0x671175(0xa20)],_0x50eec6=Math[_0x671175(0x875)]((Graphics['boxWidth']-_0x1b4164)/0x2),_0x52d9d2=this['helpAreaHeight'](),_0x2d3c5d=(Graphics[_0x671175(0x745)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x50eec6,_0x2d3c5d,_0x1b4164,_0x52d9d2);},Scene_Battle['prototype'][_0x44ae36(0x5d5)]=function(){const _0x329fb5=_0x44ae36,_0x1fc3ba=Graphics[_0x329fb5(0xa20)],_0x36e05=Math[_0x329fb5(0x875)]((Graphics[_0x329fb5(0x345)]-_0x1fc3ba)/0x2),_0x4cfe88=this[_0x329fb5(0x6c1)](0x4,!![]),_0x113825=Graphics[_0x329fb5(0x7a7)]-_0x4cfe88+(Graphics[_0x329fb5(0x745)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x36e05,_0x113825,_0x1fc3ba,_0x4cfe88);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x713)]=function(){const _0x396189=_0x44ae36,_0x39ea07=Math['floor'](Graphics[_0x396189(0xa20)]/0x3),_0x5f32da=this[_0x396189(0x467)]()?(Graphics[_0x396189(0xa20)]+Graphics[_0x396189(0x345)])/0x2-_0x39ea07:(Graphics[_0x396189(0xa20)]-Graphics['boxWidth'])/-0x2,_0x4984f1=this[_0x396189(0x9c4)](),_0x2354da=_0x4984f1['y']+_0x4984f1['height'],_0x3ac97a=this[_0x396189(0x5d5)](),_0x3611b3=_0x3ac97a['y']-_0x2354da;return new Rectangle(_0x5f32da,_0x2354da,_0x39ea07,_0x3611b3);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xb28)]=function(){const _0x3c8bb2=_0x44ae36,_0x16951b=Math[_0x3c8bb2(0xb2f)](Graphics['width']/0x3),_0x38674c=Math[_0x3c8bb2(0x875)]((Graphics['boxWidth']-_0x16951b)/0x2),_0x14e916=this[_0x3c8bb2(0x713)](),_0x1969fd=_0x14e916['y'],_0x380553=_0x14e916[_0x3c8bb2(0x745)];return new Rectangle(_0x38674c,_0x1969fd,_0x16951b,_0x380553);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7d2)]=function(){const _0x53cc3e=_0x44ae36;this[_0x53cc3e(0x687)]['y']=this[_0x53cc3e(0xb0f)]['y']+this[_0x53cc3e(0xb0f)][_0x53cc3e(0x745)],this[_0x53cc3e(0x467)]()?this[_0x53cc3e(0x36d)]()===_0x53cc3e(0x449)?this[_0x53cc3e(0x687)]['x']=0x8:this[_0x53cc3e(0x687)]['x']=-this['_cancelButton'][_0x53cc3e(0xa20)]-0x4:this[_0x53cc3e(0x687)]['x']=Graphics[_0x53cc3e(0xa20)]-(Graphics[_0x53cc3e(0xa20)]-Graphics[_0x53cc3e(0x345)])/0x2-this[_0x53cc3e(0x687)]['width']-0x4;},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x3e4)],Scene_Battle[_0x44ae36(0x137)]['skillWindowRect']=function(){const _0x2916c2=_0x44ae36;if(this['battleLayoutStyle']()===_0x2916c2(0x449))return this[_0x2916c2(0xb28)]();else return this[_0x2916c2(0x960)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x2916c2(0x851)][_0x2916c2(0x8ce)][_0x2916c2(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x32d)],Scene_Battle['prototype'][_0x44ae36(0x32d)]=function(){const _0x34d032=_0x44ae36;if(this['battleLayoutStyle']()===_0x34d032(0x449))return this[_0x34d032(0xb28)]();else return this[_0x34d032(0x960)]()?this[_0x34d032(0x817)]():VisuMZ[_0x34d032(0x851)][_0x34d032(0xb6e)]['call'](this);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x960)]=function(){const _0x597485=_0x44ae36;return VisuMZ[_0x597485(0x851)]['Settings']['BattleLayout'][_0x597485(0x3b5)];},Scene_Battle['prototype'][_0x44ae36(0x817)]=function(){const _0x33e28e=_0x44ae36,_0x24ba75=Sprite_Button[_0x33e28e(0x137)][_0x33e28e(0x383)]()*0x2+0x4;let _0x416a5d=Graphics[_0x33e28e(0x345)]-_0x24ba75;Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x33e28e(0xa1c)]()&&(_0x416a5d+=_0x24ba75);const _0x2f23c2=this['helpAreaBottom'](),_0x20f674=Graphics[_0x33e28e(0x7a7)]-_0x2f23c2-this[_0x33e28e(0x572)]()['height']+Window_BattleStatus[_0x33e28e(0x137)][_0x33e28e(0x9d0)](),_0x507bae=0x0;return new Rectangle(_0x507bae,_0x2f23c2,_0x416a5d,_0x20f674);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x2b7)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x226)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x226)]=function(){const _0x484855=_0x44ae36;VisuMZ['BattleCore']['Scene_Battle_startActorSelection'][_0x484855(0x689)](this),this[_0x484855(0x9ce)]();},VisuMZ[_0x44ae36(0x851)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x44ae36(0x137)]['startEnemySelection'],Scene_Battle[_0x44ae36(0x137)]['startEnemySelection']=function(){const _0x1360bf=_0x44ae36;VisuMZ['BattleCore']['Scene_Battle_startEnemySelection']['call'](this),this[_0x1360bf(0x9bc)][_0x1360bf(0x8f6)](),this[_0x1360bf(0x9ce)]();},Scene_Battle[_0x44ae36(0x137)]['makeTargetSelectionMoreVisible']=function(){const _0x11e93f=_0x44ae36,_0x3d7d40=this[_0x11e93f(0x36d)]();['xp',_0x11e93f(0x984),_0x11e93f(0x449)][_0x11e93f(0x76b)](_0x3d7d40)&&this[_0x11e93f(0xbc6)][_0x11e93f(0x1aa)](),(_0x3d7d40===_0x11e93f(0x449)||this[_0x11e93f(0x960)]())&&(this['_skillWindow']['close'](),this[_0x11e93f(0xa67)]['close']());},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x87a)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7d9)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7d9)]=function(){const _0x4f1b44=_0x44ae36;VisuMZ[_0x4f1b44(0x851)][_0x4f1b44(0x87a)][_0x4f1b44(0x689)](this),this[_0x4f1b44(0xa8c)]();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x921)]=function(){const _0x29b0fa=_0x44ae36;return['attack',_0x29b0fa(0x8d9),'singleSkill']['includes'](this[_0x29b0fa(0xbc6)]['currentSymbol']());},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x54c)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x92e)],Scene_Battle['prototype'][_0x44ae36(0x92e)]=function(){const _0x4b1de8=_0x44ae36;this[_0x4b1de8(0x921)]()?(this['_statusWindow'][_0x4b1de8(0xb98)](),this[_0x4b1de8(0xad6)][_0x4b1de8(0x5ed)](),this['_actorCommandWindow'][_0x4b1de8(0x1ed)]()):VisuMZ[_0x4b1de8(0x851)][_0x4b1de8(0x54c)][_0x4b1de8(0x689)](this),this[_0x4b1de8(0x7fb)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyOk']=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x11f)],Scene_Battle['prototype'][_0x44ae36(0x11f)]=function(){const _0x30fcc1=_0x44ae36;if(!this['_enemyWindow'][_0x30fcc1(0xbcb)]()){this[_0x30fcc1(0x9bc)][_0x30fcc1(0x1ed)]();return;}const _0x243375=BattleManager['inputtingAction']();_0x243375[_0x30fcc1(0x240)](this[_0x30fcc1(0x9bc)][_0x30fcc1(0xbcb)]()),this['_enemyWindow'][_0x30fcc1(0x75e)](),VisuMZ[_0x30fcc1(0x851)][_0x30fcc1(0x18f)][_0x30fcc1(0x689)](this),this[_0x30fcc1(0xa8c)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x7ec)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x89b)],Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x89b)]=function(){const _0x3875d0=_0x44ae36;this[_0x3875d0(0x921)]()?(this[_0x3875d0(0x154)]['show'](),this[_0x3875d0(0x9bc)][_0x3875d0(0x5ed)](),this['_actorCommandWindow'][_0x3875d0(0x1ed)]()):VisuMZ[_0x3875d0(0x851)][_0x3875d0(0x7ec)][_0x3875d0(0x689)](this),this['cancelTargetSelectionVisibility'](),this[_0x3875d0(0x9bc)][_0x3875d0(0x75e)]();},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xa8c)]=function(){const _0x2aa33a=_0x44ae36,_0x3a8efe=this[_0x2aa33a(0x36d)]();(_0x3a8efe==='border'||this[_0x2aa33a(0x960)]())&&(this[_0x2aa33a(0x884)][_0x2aa33a(0xa8e)](),this[_0x2aa33a(0x884)]['active']&&this[_0x2aa33a(0x884)][_0x2aa33a(0xb98)](),this[_0x2aa33a(0xa67)][_0x2aa33a(0xa8e)](),this['_itemWindow'][_0x2aa33a(0xac7)]&&this[_0x2aa33a(0xa67)][_0x2aa33a(0xb98)]());},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x7fb)]=function(){const _0xce3f44=_0x44ae36,_0x1cafbc=this[_0xce3f44(0x36d)]();['xp',_0xce3f44(0x984),_0xce3f44(0x449)][_0xce3f44(0x76b)](_0x1cafbc)&&this[_0xce3f44(0xbc6)][_0xce3f44(0xa8e)](),this[_0xce3f44(0xa8c)]();},Sprite_Battler['_motionSpeed']=VisuMZ[_0x44ae36(0x851)]['Settings'][_0x44ae36(0x908)]['MotionSpeed'],VisuMZ['BattleCore'][_0x44ae36(0x32a)]=Sprite_Battler[_0x44ae36(0x137)]['initMembers'],Sprite_Battler['prototype'][_0x44ae36(0x443)]=function(){const _0x5d8cf9=_0x44ae36;VisuMZ[_0x5d8cf9(0x851)]['Sprite_Battler_initMembers'][_0x5d8cf9(0x689)](this),this['initMembersBattleCore']();if(this[_0x5d8cf9(0x6ea)]===Sprite_Enemy)this[_0x5d8cf9(0x6c3)]();this[_0x5d8cf9(0x14f)]();},Sprite_Battler['prototype'][_0x44ae36(0xb85)]=function(){const _0x56398d=_0x44ae36;this[_0x56398d(0x358)]=0x0,this['_baseY']=0x0,this[_0x56398d(0x7b1)]=0x0,this[_0x56398d(0x59f)]=0x0,this[_0x56398d(0x1f4)]=0x0,this['_floatWholeDuration']=0x0,this[_0x56398d(0xa39)]=_0x56398d(0x45a),this[_0x56398d(0x4ab)]=0x0,this[_0x56398d(0xa59)]=0x0,this['_jumpDuration']=0x0,this[_0x56398d(0x814)]=0x0,this['_targetOpacity']=0xff,this[_0x56398d(0xa75)]=0x0,this[_0x56398d(0x1b4)]=0x0,this['_opacityEasing']='Linear',this[_0x56398d(0x15c)]=0x0,this['_targetAngle']=0x0,this['_angleDuration']=0x0,this['_angleWholeDuration']=0x0,this[_0x56398d(0x175)]=_0x56398d(0x45a),this[_0x56398d(0x198)]=!![],this['_skewX']=0x0,this[_0x56398d(0x5b1)]=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this[_0x56398d(0x9b7)]=0x0,this['_skewWholeDuration']=0x0,this[_0x56398d(0xb84)]=_0x56398d(0x45a),this[_0x56398d(0xcc)]=0x1,this[_0x56398d(0x758)]=0x1,this[_0x56398d(0x853)]=0x1,this[_0x56398d(0x84f)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this[_0x56398d(0x2de)]=_0x56398d(0x45a),this[_0x56398d(0x9be)]=0x1,this[_0x56398d(0xb4e)]=0x0,this[_0x56398d(0x422)]=0x0,this[_0x56398d(0x523)]=0x0,this['_homeWholeDuration']=0x0,this[_0x56398d(0x766)]='Linear',this[_0x56398d(0x3b7)]=0x0,this[_0x56398d(0x938)]=0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x6c3)]=function(){const _0xed5ac6=_0x44ae36;this[_0xed5ac6(0x6cf)]=new Sprite(),this[_0xed5ac6(0x6cf)][_0xed5ac6(0x2ec)]=ImageManager[_0xed5ac6(0x25e)](_0xed5ac6(0xa4f)),this[_0xed5ac6(0x6cf)][_0xed5ac6(0x2ec)][_0xed5ac6(0x568)]=VisuMZ[_0xed5ac6(0x851)][_0xed5ac6(0xa08)][_0xed5ac6(0x908)][_0xed5ac6(0x525)],this[_0xed5ac6(0x6cf)][_0xed5ac6(0x792)]['x']=0.5,this[_0xed5ac6(0x6cf)]['anchor']['y']=0.5,this[_0xed5ac6(0x6cf)]['y']=-0x2,this[_0xed5ac6(0x6cf)]['visible']=![],this[_0xed5ac6(0x33d)](this[_0xed5ac6(0x6cf)]);},Sprite_Battler['prototype'][_0x44ae36(0x14f)]=function(){const _0xc1aa4d=_0x44ae36;this['_distortionSprite']=new Sprite(),this[_0xc1aa4d(0x7f7)][_0xc1aa4d(0x792)]['x']=0.5,this[_0xc1aa4d(0x7f7)]['anchor']['y']=0.5,this[_0xc1aa4d(0x33d)](this[_0xc1aa4d(0x7f7)]);},Sprite_Battler['prototype'][_0x44ae36(0x67a)]=function(){const _0x449783=_0x44ae36;if(this[_0x449783(0x414)]&&this['getDragonbones']()){Sprite['prototype'][_0x449783(0x67a)][_0x449783(0x689)](this);return;}const _0x453c11=this[_0x449783(0x7f7)];if(!_0x453c11)return;!_0x453c11[_0x449783(0xa9a)]&&_0x453c11[_0x449783(0xbd3)](),_0x453c11[_0x449783(0xa9a)][_0x449783(0xaea)](this[_0x449783(0x6a1)]),_0x453c11[_0x449783(0xa9a)]['setBlendColor'](this[_0x449783(0xb18)]),_0x453c11[_0x449783(0xa9a)][_0x449783(0x969)](this[_0x449783(0x1f3)]);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x505)]=function(){const _0x3536f8=_0x44ae36;if(!this[_0x3536f8(0x7f7)])return;if(this[_0x3536f8(0x6cf)]){const _0x47783c=this[_0x3536f8(0x500)](this['_distortionSprite']);this[_0x3536f8(0x820)](this[_0x3536f8(0x6cf)],_0x47783c),this[_0x3536f8(0x4ac)]();}this[_0x3536f8(0x942)]&&this[_0x3536f8(0x7f7)][_0x3536f8(0x33d)](this['_svBattlerSprite']),this['_weaponSprite']&&this[_0x3536f8(0x7f7)][_0x3536f8(0x33d)](this[_0x3536f8(0xa66)]),this[_0x3536f8(0x9a0)]&&this[_0x3536f8(0x7f7)][_0x3536f8(0x33d)](this[_0x3536f8(0x9a0)]),this[_0x3536f8(0x4d2)]&&this['_distortionSprite']['addChild'](this[_0x3536f8(0x4d2)]),this[_0x3536f8(0x40e)]&&this[_0x3536f8(0x7f7)][_0x3536f8(0x33d)](this[_0x3536f8(0x40e)]);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x4ac)]=function(){const _0x30d0e0=_0x44ae36;if(!this['_shadowSprite'])return;if(this[_0x30d0e0(0x93d)]&&this[_0x30d0e0(0x93d)][_0x30d0e0(0xb0b)]()){const _0x10029a=this[_0x30d0e0(0x6cf)][_0x30d0e0(0x2ec)];this['_shadowSprite'][_0x30d0e0(0x3c4)](0x0,0x0,_0x10029a['width'],_0x10029a[_0x30d0e0(0x745)]);}else this[_0x30d0e0(0x6cf)][_0x30d0e0(0x3c4)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x4d4)]=function(){const _0x37c535=_0x44ae36;return SceneManager[_0x37c535(0xb75)]()?SceneManager[_0x37c535(0x97d)]['_spriteset']['_damageContainer']:this[_0x37c535(0x5d0)];},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xac3)]=function(_0x2f17ed,_0x143cb0){const _0x31f175=_0x44ae36;if(!this[_0x31f175(0x93d)]['isSpriteVisible']())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x3ce5ab=VisuMZ['BattleCore'][_0x31f175(0xa08)][_0x31f175(0xff)],_0x1b46a8=new Sprite_Damage();_0x1b46a8[_0x31f175(0xa1f)]=_0x3ce5ab['PopupDuration'],this[_0x31f175(0x411)](_0x1b46a8),_0x1b46a8[_0x31f175(0xac3)](_0x2f17ed,_0x143cb0),this[_0x31f175(0x51e)](_0x1b46a8);},Sprite_Battler[_0x44ae36(0x137)]['setupIconTextPopup']=function(_0x2c6868,_0x27fedd,_0x25869d){const _0x1330ff=_0x44ae36;if(!this[_0x1330ff(0x93d)][_0x1330ff(0x578)]())return;if(BattleManager[_0x1330ff(0x3cf)]())return;const _0x80fba8=VisuMZ[_0x1330ff(0x851)][_0x1330ff(0xa08)][_0x1330ff(0xff)],_0x38c9ad=new Sprite_Damage();_0x38c9ad[_0x1330ff(0xa1f)]=_0x80fba8[_0x1330ff(0x5a3)],this[_0x1330ff(0x411)](_0x38c9ad),_0x38c9ad[_0x1330ff(0x95d)](_0x2c6868,_0x27fedd,_0x25869d),this[_0x1330ff(0x51e)](_0x38c9ad);},Sprite_Battler[_0x44ae36(0x137)]['setupDamagePopup']=function(){const _0x5a1970=_0x44ae36;if(!this[_0x5a1970(0x93d)][_0x5a1970(0x651)]())return;while(this[_0x5a1970(0x93d)][_0x5a1970(0x651)]()){this[_0x5a1970(0x93d)][_0x5a1970(0x578)]()&&this[_0x5a1970(0x985)]();}this['_battler'][_0x5a1970(0x1fb)](),this[_0x5a1970(0x93d)]['clearResult']();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x985)]=function(){const _0x38797c=_0x44ae36;if(BattleManager[_0x38797c(0x3cf)]())return;const _0x5047ba=VisuMZ[_0x38797c(0x851)][_0x38797c(0xa08)][_0x38797c(0xff)],_0x44e804=new Sprite_Damage();_0x44e804[_0x38797c(0xa1f)]=_0x5047ba['PopupDuration'],this['sortDamageSprites'](_0x44e804),_0x44e804[_0x38797c(0x93c)](this[_0x38797c(0x93d)]),_0x44e804[_0x38797c(0xbd4)](this['_battler']),this[_0x38797c(0x51e)](_0x44e804);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x51e)]=function(_0x2cb686){const _0x3e504c=_0x44ae36;this['_damages'][_0x3e504c(0xa04)](_0x2cb686);if(this[_0x3e504c(0xb4d)]()){const _0x202991=SceneManager[_0x3e504c(0x97d)]['_statusWindow'];if(_0x202991)_0x202991['addDamageSprite'](_0x2cb686,this[_0x3e504c(0x93d)]);}else{this[_0x3e504c(0x4d4)]()['addChild'](_0x2cb686);if(SceneManager[_0x3e504c(0xab7)]())_0x2cb686[_0x3e504c(0x497)]['x']=-0x1;}},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xb4d)]=function(){const _0x5100a6=_0x44ae36;return!$gameSystem['isSideView']()&&this['_battler']&&this[_0x5100a6(0x93d)]['isActor']();return!$gameSystem[_0x5100a6(0x628)]()&&this['_battler']&&this['_battler'][_0x5100a6(0x30c)]()&&Window_BattleStatus[_0x5100a6(0x137)]['battleLayoutStyle']()===_0x5100a6(0x984);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x411)]=function(_0x3b57f3){const _0x2cb70c=_0x44ae36;this['alignBattleCoreDamageSprite'](_0x3b57f3,!![]);const _0x251d91=VisuMZ['BattleCore'][_0x2cb70c(0xa08)][_0x2cb70c(0xff)],_0x4322d4=SceneManager[_0x2cb70c(0xab7)]()?-0x1:0x1;if(_0x251d91[_0x2cb70c(0x230)])for(const _0x417f4d of this['_damages']){_0x417f4d['x']+=_0x251d91[_0x2cb70c(0x1bd)]*_0x4322d4,_0x417f4d['y']+=_0x251d91['PopupShiftY'];}else{const _0x497f53=this[_0x2cb70c(0xbf4)][this[_0x2cb70c(0xbf4)][_0x2cb70c(0x2d9)]-0x1];_0x497f53&&(_0x3b57f3['x']=_0x497f53['x']+_0x251d91['PopupShiftX']*_0x4322d4,_0x3b57f3['y']=_0x497f53['y']+_0x251d91[_0x2cb70c(0x63b)]);}},Sprite_Battler['prototype']['alignBattleCoreDamageSprite']=function(_0x5b9ac0,_0x4c09c9){const _0x4b6f51=_0x44ae36,_0x2ee7a2=SceneManager[_0x4b6f51(0xab7)]()?-0x1:0x1;let _0x2ea7ac=this[_0x4b6f51(0x358)];_0x2ea7ac+=this['extraPositionX']();let _0x361ae8=this[_0x4b6f51(0x5b5)];const _0x353fca=this[_0x4b6f51(0x7f7)][_0x4b6f51(0x497)]['y'];_0x361ae8+=this[_0x4b6f51(0x79f)]();const _0x4516ad=SceneManager[_0x4b6f51(0x97d)][_0x4b6f51(0x154)];if(_0x4516ad&&this[_0x4b6f51(0x5d0)]===_0x4516ad){_0x2ea7ac+=_0x4516ad['x']-this[_0x4b6f51(0x2eb)]();const _0x48712b=_0x4516ad[_0x4b6f51(0xb7b)]()*0x3/0x4;_0x361ae8=_0x4516ad['y']+_0x48712b,_0x361ae8=Math[_0x4b6f51(0x920)](_0x361ae8,_0x4516ad['y']+this['y']-this[_0x4b6f51(0x745)]+_0x48712b);}_0x5b9ac0['x']=Math['round'](_0x2ea7ac+this[_0x4b6f51(0x2eb)]()*_0x2ee7a2),_0x5b9ac0['y']=Math[_0x4b6f51(0x875)](_0x361ae8+this['damageOffsetY']());},VisuMZ[_0x44ae36(0x851)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x2eb)],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x2eb)]=function(){const _0x17f685=_0x44ae36;let _0x284178=VisuMZ[_0x17f685(0x851)][_0x17f685(0x990)][_0x17f685(0x689)](this),_0x5705e0=VisuMZ[_0x17f685(0x851)][_0x17f685(0xa08)][_0x17f685(0xff)][_0x17f685(0x7c0)]||0x0;return _0x5705e0+=this['_battler'][_0x17f685(0x945)](),Math[_0x17f685(0x875)](_0x284178+_0x5705e0);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x402)]=Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x9e5)],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x9e5)]=function(){const _0x2167bb=_0x44ae36;let _0x48886e=VisuMZ['BattleCore'][_0x2167bb(0x402)][_0x2167bb(0x689)](this);switch(this[_0x2167bb(0x93d)]['damagePopupPosition']()){case _0x2167bb(0x89d):_0x48886e-=this['height']*this[_0x2167bb(0x497)]['y'];break;case _0x2167bb(0x4e2):_0x48886e-=this[_0x2167bb(0x745)]*this[_0x2167bb(0x497)]['y']*0.5;break;}let _0x11737e=VisuMZ['BattleCore'][_0x2167bb(0xa08)]['Damage'][_0x2167bb(0x9ff)]||0x0;return _0x11737e+=this['_battler'][_0x2167bb(0x6ba)](),Math['round'](_0x48886e+_0x11737e);},Sprite_Actor[_0x44ae36(0x137)]['damageOffsetX']=function(){const _0x298293=_0x44ae36;return Sprite_Battler['prototype']['damageOffsetX'][_0x298293(0x689)](this);},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x9e5)]=function(){const _0x5bb04d=_0x44ae36;return Sprite_Battler[_0x5bb04d(0x137)][_0x5bb04d(0x9e5)][_0x5bb04d(0x689)](this);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x23b)]=function(_0x4a4c2c){const _0x2bffcc=_0x44ae36;this[_0x2bffcc(0xb4d)]()?SceneManager[_0x2bffcc(0x97d)]['_statusWindow']['removeDamageSprite'](_0x4a4c2c):(this[_0x2bffcc(0x4d4)]()[_0x2bffcc(0x838)](_0x4a4c2c),this[_0x2bffcc(0xbf4)]['remove'](_0x4a4c2c),_0x4a4c2c[_0x2bffcc(0x492)]());},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xb47)]=Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xf0)],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xf0)]=function(_0x5c5bbd,_0x592522){const _0x5a2014=_0x44ae36,_0x54ab91=VisuMZ[_0x5a2014(0x851)][_0x5a2014(0xa08)];if(this['constructor']===Sprite_Actor)_0x5c5bbd+=_0x54ab91[_0x5a2014(0x908)]['OffsetX']||0x0,_0x592522+=_0x54ab91[_0x5a2014(0x908)][_0x5a2014(0xb91)]||0x0;else this[_0x5a2014(0x6ea)]===Sprite_Enemy&&(_0x5c5bbd+=_0x54ab91[_0x5a2014(0x2e0)]['OffsetX']||0x0,_0x592522+=_0x54ab91[_0x5a2014(0x2e0)][_0x5a2014(0xb91)]||0x0);this[_0x5a2014(0x93d)]&&(_0x5c5bbd=this[_0x5a2014(0x93d)][_0x5a2014(0x69a)]??_0x5c5bbd,_0x592522=this[_0x5a2014(0x93d)][_0x5a2014(0x8c5)]??_0x592522),VisuMZ[_0x5a2014(0x851)][_0x5a2014(0xb47)]['call'](this,_0x5c5bbd,_0x592522),this[_0x5a2014(0xb4e)]=this[_0x5a2014(0x50d)],this[_0x5a2014(0x422)]=this[_0x5a2014(0x496)],this['_homeDuration']=0x0,this[_0x5a2014(0x488)]=0x0,this['_homeEasing']='Linear';},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x7f2)]=Sprite_Battler['prototype'][_0x44ae36(0xa8a)],Sprite_Battler['prototype'][_0x44ae36(0xa8a)]=function(){const _0x1c87bd=_0x44ae36;VisuMZ[_0x1c87bd(0x851)]['Sprite_Battler_update'][_0x1c87bd(0x689)](this),!this[_0x1c87bd(0x93d)]&&this['_hpGaugeSprite']&&(this[_0x1c87bd(0x69e)][_0x1c87bd(0x7bb)]=![]);},VisuMZ[_0x44ae36(0x851)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x10f)],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x10f)]=function(){const _0x4fd815=_0x44ae36;this[_0x4fd815(0x4b6)](),this[_0x4fd815(0xbc9)](),this[_0x4fd815(0x8e4)](),this['updateFlip'](),VisuMZ[_0x4fd815(0x851)]['Sprite_Battler_updateMain'][_0x4fd815(0x689)](this),this[_0x4fd815(0x4d8)](),this[_0x4fd815(0x736)]();if(this[_0x4fd815(0x6ea)]===Sprite_Enemy)this['updateShadow']();},VisuMZ['BattleCore'][_0x44ae36(0x2c1)]=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xbc3)]=function(){const _0x1e67a7=_0x44ae36;this['updateHomeMove'](),VisuMZ[_0x1e67a7(0x851)][_0x1e67a7(0x2c1)][_0x1e67a7(0x689)](this),this[_0x1e67a7(0x14b)](),this['updateOpacity']();},Sprite_Battler['prototype'][_0x44ae36(0x2d0)]=function(){const _0x44ef1c=_0x44ae36,_0x1567e2=this[_0x44ef1c(0xa06)]();if(this[_0x44ef1c(0x93d)][_0x44ef1c(0x4fe)]())this[_0x44ef1c(0x8b5)]++,Graphics[_0x44ef1c(0x266)]%0x1e<0xf?_0x1567e2[_0x44ef1c(0x9e3)]([0xff,0xff,0xff,0x40]):_0x1567e2[_0x44ef1c(0x9e3)]([0x0,0x0,0x0,0x0]);else this[_0x44ef1c(0x8b5)]>0x0&&(this[_0x44ef1c(0x8b5)]=0x0,_0x1567e2['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xabf)]=function(_0x1a3f98,_0x3b5e44){const _0x3df509=_0x44ae36,_0x12868b=VisuMZ[_0x3df509(0x851)][_0x3df509(0xa08)];if(this['constructor']===Sprite_Actor)_0x1a3f98+=_0x12868b['Actor'][_0x3df509(0x491)]||0x0,_0x3b5e44+=_0x12868b[_0x3df509(0x908)][_0x3df509(0xb91)]||0x0;else this[_0x3df509(0x6ea)]===Sprite_Enemy&&(_0x1a3f98+=_0x12868b['Enemy'][_0x3df509(0x491)]||0x0,_0x3b5e44+=_0x12868b[_0x3df509(0x2e0)][_0x3df509(0xb91)]||0x0);const _0xde3e3a=_0x1a3f98-this[_0x3df509(0x50d)],_0x2c517c=_0x3b5e44-this[_0x3df509(0x496)];this[_0x3df509(0x50d)]=_0x1a3f98,this[_0x3df509(0x496)]=_0x3b5e44,this[_0x3df509(0x65d)]-=_0xde3e3a,this[_0x3df509(0x7f1)]-=_0x2c517c,this[_0x3df509(0x91c)]-=_0xde3e3a,this['_targetOffsetY']-=_0x2c517c,this[_0x3df509(0xbc3)]();},Sprite_Battler[_0x44ae36(0x137)]['startHomeMove']=function(_0x5bb098,_0x50d738,_0x15b88e,_0x57c928){const _0x294bbb=_0x44ae36,_0x54e42f=VisuMZ[_0x294bbb(0x851)][_0x294bbb(0xa08)];if(this[_0x294bbb(0x6ea)]===Sprite_Actor)_0x5bb098+=_0x54e42f[_0x294bbb(0x908)][_0x294bbb(0x491)]||0x0,_0x50d738+=_0x54e42f[_0x294bbb(0x908)]['OffsetY']||0x0;else this[_0x294bbb(0x6ea)]===Sprite_Enemy&&(_0x5bb098+=_0x54e42f[_0x294bbb(0x2e0)][_0x294bbb(0x491)]||0x0,_0x50d738+=_0x54e42f[_0x294bbb(0x2e0)][_0x294bbb(0xb91)]||0x0);(this['_targetHomeX']!==_0x5bb098||this[_0x294bbb(0x422)]!==_0x50d738)&&(this[_0x294bbb(0xb4e)]=_0x5bb098,this[_0x294bbb(0x422)]=_0x50d738,this[_0x294bbb(0x523)]=_0x15b88e,this['_homeWholeDuration']=_0x15b88e,this['_homeEasing']=_0x57c928,_0x15b88e<=0x0&&this[_0x294bbb(0xae1)]());},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x9cb)]=function(){const _0x584c3f=_0x44ae36;if(this[_0x584c3f(0x523)]<=0x0)return;const _0x4bd6fb=this[_0x584c3f(0x523)],_0x1cfaba=this[_0x584c3f(0x488)],_0x230fd7=this[_0x584c3f(0x766)];Imported[_0x584c3f(0x6c8)]?(this[_0x584c3f(0x50d)]=this['applyEasing'](this[_0x584c3f(0x50d)],this[_0x584c3f(0xb4e)],_0x4bd6fb,_0x1cfaba,_0x230fd7),this['_homeY']=this['applyEasing'](this[_0x584c3f(0x496)],this[_0x584c3f(0x422)],_0x4bd6fb,_0x1cfaba,_0x230fd7)):(this[_0x584c3f(0x50d)]=(this[_0x584c3f(0x50d)]*(_0x4bd6fb-0x1)+this[_0x584c3f(0xb4e)])/_0x4bd6fb,this['_homeY']=(this[_0x584c3f(0x496)]*(_0x4bd6fb-0x1)+this['_targetHomeY'])/_0x4bd6fb);this[_0x584c3f(0x523)]--;if(this[_0x584c3f(0x523)]<=0x0)this[_0x584c3f(0xae1)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xae1)]=function(){const _0x2c7bdc=_0x44ae36;this[_0x2c7bdc(0x50d)]=this[_0x2c7bdc(0xb4e)],this['_homeY']=this[_0x2c7bdc(0x422)];},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x14b)]=function(){const _0x2921e1=_0x44ae36;this[_0x2921e1(0x358)]=this['x'],this[_0x2921e1(0x5b5)]=this['y'],this['updateFloat'](),this['updateJump'](),this['x']+=this[_0x2921e1(0x15d)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x2921e1(0x9a1)](),this['x']=Math[_0x2921e1(0xb78)](this['x']),this['y']=Math[_0x2921e1(0xb78)](this['y']);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x15d)]=function(){let _0x469158=0x0;return _0x469158;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x79f)]=function(){const _0xce4303=_0x44ae36;let _0x40ea6=0x0;return this[_0xce4303(0x93d)]&&!this[_0xce4303(0x93d)]['isBattlerGrounded']()&&(_0x40ea6-=this['_floatHeight'],_0x40ea6-=this['_jumpHeight']),_0x40ea6;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x9a1)]=function(){const _0x243458=_0x44ae36;let _0x2f68e3=0x0;if(this[_0x243458(0x7f7)]&&this[_0x243458(0x6ea)]!==Sprite_SvEnemy){const _0x209e2a=this[_0x243458(0x7f7)][_0x243458(0x497)]['y'];_0x2f68e3-=(_0x209e2a-0x1)*this[_0x243458(0x745)];}return _0x2f68e3;},Sprite_Battler['prototype'][_0x44ae36(0xbf3)]=function(){const _0xf923df=_0x44ae36,_0x265cce=this[_0xf923df(0x93d)]&&this[_0xf923df(0x93d)][_0xf923df(0x1fe)]();this[_0xf923df(0x9be)]=(_0x265cce?-0x1:0x1)*Math[_0xf923df(0x8d7)](this['scale']['x']);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x41f)]=function(_0x26f2d3,_0x2813fa,_0x1a7c2d){const _0x3f1e4d=_0x44ae36;if(!this[_0x3f1e4d(0x44a)]())return;if(this[_0x3f1e4d(0x59f)]===_0x26f2d3)return;this[_0x3f1e4d(0x59f)]=_0x26f2d3,this[_0x3f1e4d(0x1f4)]=_0x2813fa,this[_0x3f1e4d(0xaf3)]=_0x2813fa,this['_floatEasing']=_0x1a7c2d||_0x3f1e4d(0x45a);if(_0x2813fa<=0x0)this[_0x3f1e4d(0x7b1)]=_0x26f2d3;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x527)]=function(){const _0x20996e=_0x44ae36;if(this[_0x20996e(0x1f4)]<=0x0)return;const _0x1f937e=this[_0x20996e(0x1f4)],_0x529ebf=this['_floatWholeDuration'],_0x439fb5=this[_0x20996e(0xa39)];Imported[_0x20996e(0x6c8)]?this['_floatHeight']=this['applyEasing'](this[_0x20996e(0x7b1)],this[_0x20996e(0x59f)],_0x1f937e,_0x529ebf,_0x439fb5):this[_0x20996e(0x7b1)]=(this[_0x20996e(0x7b1)]*(_0x1f937e-0x1)+this[_0x20996e(0x59f)])/_0x1f937e;this[_0x20996e(0x1f4)]--;if(this[_0x20996e(0x1f4)]<=0x0)this[_0x20996e(0x306)]();},Sprite_Battler[_0x44ae36(0x137)]['onFloatEnd']=function(){const _0x46342f=_0x44ae36;this[_0x46342f(0x7b1)]=this[_0x46342f(0x59f)];},Sprite_Battler['prototype'][_0x44ae36(0xbe5)]=function(){const _0x187eab=_0x44ae36;return this[_0x187eab(0x1f4)]>0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x12c)]=function(_0x111ed7,_0x3ae281){const _0x3a959c=_0x44ae36;if(!this[_0x3a959c(0x44a)]())return;if(_0x3ae281<=0x0)return;this['_jumpMaxHeight']=_0x111ed7,this['_jumpDuration']=_0x3ae281,this[_0x3a959c(0x814)]=_0x3ae281;},Sprite_Battler[_0x44ae36(0x137)]['updateJump']=function(){const _0x777159=_0x44ae36;if(this[_0x777159(0x681)]<=0x0)return;const _0x1a40cf=this[_0x777159(0x814)]-this['_jumpDuration'],_0x2357fb=this[_0x777159(0x814)]/0x2,_0x3d6881=this['_jumpMaxHeight'],_0x11a110=-_0x3d6881/Math[_0x777159(0x871)](_0x2357fb,0x2);this[_0x777159(0x4ab)]=_0x11a110*Math[_0x777159(0x871)](_0x1a40cf-_0x2357fb,0x2)+_0x3d6881,this[_0x777159(0x681)]--;if(this[_0x777159(0x681)]<=0x0)return this[_0x777159(0xb24)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xb24)]=function(){const _0x174ca8=_0x44ae36;this[_0x174ca8(0x4ab)]=0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xe0)]=function(){const _0x17022b=_0x44ae36;return this[_0x17022b(0x681)]>0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xa47)]=function(_0x1bff1e,_0x147d9a,_0x4f337f){const _0x5708b3=_0x44ae36;if(this[_0x5708b3(0xb76)]===_0x1bff1e)return;this[_0x5708b3(0xb76)]=_0x1bff1e,this[_0x5708b3(0xa75)]=_0x147d9a,this['_opacityWholeDuration']=_0x147d9a,this[_0x5708b3(0x1b7)]=_0x4f337f||_0x5708b3(0x45a);if(_0x147d9a<=0x0)this[_0x5708b3(0x7b5)]=_0x1bff1e;},Sprite_Battler['prototype'][_0x44ae36(0x462)]=function(){const _0x2c05db=_0x44ae36;if(this[_0x2c05db(0x6ea)][_0x2c05db(0x674)]===_0x2c05db(0x780))return;if(this[_0x2c05db(0xa75)]<=0x0)return;const _0x4159a0=this['_opacityDuration'],_0x5ec6a2=this[_0x2c05db(0x1b4)],_0xeeda9b=this['_opacityEasing'];Imported[_0x2c05db(0x6c8)]?this[_0x2c05db(0x7b5)]=this['applyEasing'](this[_0x2c05db(0x7b5)],this['_targetOpacity'],_0x4159a0,_0x5ec6a2,_0xeeda9b):this[_0x2c05db(0x7b5)]=(this[_0x2c05db(0x7b5)]*(_0x4159a0-0x1)+this[_0x2c05db(0xb76)])/_0x4159a0;this[_0x2c05db(0xa75)]--;if(this[_0x2c05db(0xa75)]<=0x0)this[_0x2c05db(0x30b)]();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0x129442=_0x44ae36;this[_0x129442(0x7b5)]=this[_0x129442(0xb76)];},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x8b3)]=function(){const _0x17e266=_0x44ae36;return this[_0x17e266(0xa75)]>0x0;},Sprite_Battler['prototype'][_0x44ae36(0x2b4)]=function(){const _0x28cddf=_0x44ae36;this['_shadowSprite'][_0x28cddf(0x7bb)]=this[_0x28cddf(0x93d)]['hasSvBattler'](),this[_0x28cddf(0x2c0)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x2c0)]=function(){const _0x3dc238=_0x44ae36;if(!this[_0x3dc238(0x6cf)])return;this['_shadowSprite']['y']=this[_0x3dc238(0x5b5)]-this['y']-0x2;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xb52)]=function(){const _0x4cf6f2=_0x44ae36;if(!this[_0x4cf6f2(0x93d)])return;this[_0x4cf6f2(0x940)]=this[_0x4cf6f2(0x93d)][_0x4cf6f2(0x81f)](),this['_shadowScaleY']=this[_0x4cf6f2(0x93d)][_0x4cf6f2(0x810)]();},Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0x81f)]=function(){const _0x3ba8cd=_0x44ae36,_0xbdf898=this[_0x3ba8cd(0x30c)]()?this[_0x3ba8cd(0x2f8)]():this[_0x3ba8cd(0xbcb)]();if(_0xbdf898){const _0x5956de=_0xbdf898[_0x3ba8cd(0x903)];if(_0x5956de[_0x3ba8cd(0x54f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5956de[_0x3ba8cd(0x54f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x44ae36(0x137)]['battlerShadowScaleY']=function(){const _0x40a39c=_0x44ae36,_0x2493c2=this[_0x40a39c(0x30c)]()?this[_0x40a39c(0x2f8)]():this[_0x40a39c(0xbcb)]();if(_0x2493c2){const _0x11b08a=_0x2493c2[_0x40a39c(0x903)];if(_0x11b08a[_0x40a39c(0x54f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x11b08a['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x4b6)]=function(){const _0x754ccd=_0x44ae36;if(this['constructor']===Sprite_SvEnemy)return;this[_0x754ccd(0x489)](),this['finalizeScale']();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xb20)]=function(){const _0x46b55f=_0x44ae36,_0x4337e8=this[_0x46b55f(0x7f7)];_0x4337e8&&(_0x4337e8['scale']['x']=this[_0x46b55f(0x3d6)](),_0x4337e8[_0x46b55f(0x497)]['y']=this[_0x46b55f(0x618)]());},Sprite_Battler['prototype'][_0x44ae36(0x3d6)]=function(){const _0xb8807a=_0x44ae36;let _0x336cc8=0x1;return _0x336cc8*=this['_flipScaleX'],_0x336cc8*=this[_0xb8807a(0xcc)],_0x336cc8;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x618)]=function(){const _0x465552=_0x44ae36;return 0x1*this[_0x465552(0x758)];},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x6ce)]=function(){const _0x34b1ed=_0x44ae36;return this[_0x34b1ed(0xa20)]*this[_0x34b1ed(0x3d6)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x977)]=function(){const _0x4b69e4=_0x44ae36;return this['height']*this[_0x4b69e4(0x618)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x3d4)]=function(_0x1c362a,_0x21adcf,_0x2f8b1f,_0x246561){const _0x269103=_0x44ae36;if(!this[_0x269103(0x44a)]())return;if(!this[_0x269103(0x7f7)])return;if(this[_0x269103(0x853)]===_0x1c362a&&this['_targetGrowY']===_0x21adcf)return;this['_targetGrowX']=_0x1c362a,this[_0x269103(0x84f)]=_0x21adcf,this[_0x269103(0x932)]=_0x2f8b1f,this[_0x269103(0x8af)]=_0x2f8b1f,this['_growEasing']=_0x246561||_0x269103(0x45a),_0x2f8b1f<=0x0&&(this[_0x269103(0xcc)]=this[_0x269103(0x853)],this[_0x269103(0x758)]=this[_0x269103(0x84f)]);},Sprite_Battler[_0x44ae36(0x137)]['updateGrow']=function(){const _0xe2e927=_0x44ae36;if(this[_0xe2e927(0x932)]<=0x0)return;if(!this[_0xe2e927(0x7f7)])return;const _0x12f536=this[_0xe2e927(0x932)],_0x348856=this[_0xe2e927(0x8af)],_0x493f2d=this['_growEasing'];Imported[_0xe2e927(0x6c8)]?(this[_0xe2e927(0xcc)]=this[_0xe2e927(0x534)](this[_0xe2e927(0xcc)],this[_0xe2e927(0x853)],_0x12f536,_0x348856,_0x493f2d),this['_growY']=this[_0xe2e927(0x534)](this[_0xe2e927(0x758)],this[_0xe2e927(0x84f)],_0x12f536,_0x348856,_0x493f2d)):(this['_growX']=(this[_0xe2e927(0xcc)]*(_0x12f536-0x1)+this[_0xe2e927(0x853)])/_0x12f536,this[_0xe2e927(0x758)]=(this[_0xe2e927(0x758)]*(_0x12f536-0x1)+this['_targetGrowY'])/_0x12f536);this[_0xe2e927(0x932)]--;if(this['_growDuration']<=0x0)this[_0xe2e927(0xa1e)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xa1e)]=function(){const _0x3a04c4=_0x44ae36;this['_growX']=this[_0x3a04c4(0x853)],this[_0x3a04c4(0x758)]=this['_targetGrowY'];},Sprite_Battler['prototype']['isGrowing']=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x8d0)]=function(_0xc3bbfa,_0x4e53a1,_0x14ca9a,_0x2b7413){const _0x514584=_0x44ae36;if(!this['canMove']())return;if(!this[_0x514584(0x7f7)])return;if(this['_targetSkewX']===_0xc3bbfa&&this[_0x514584(0x2e6)]===_0x4e53a1)return;this['_targetSkewX']=_0xc3bbfa,this[_0x514584(0x2e6)]=_0x4e53a1,this['_skewDuration']=_0x14ca9a,this[_0x514584(0x9af)]=_0x14ca9a,this[_0x514584(0xb84)]=_0x2b7413||_0x514584(0x45a),_0x14ca9a<=0x0&&(this[_0x514584(0x7f7)][_0x514584(0x49d)]['x']=this[_0x514584(0x4f1)],this['_distortionSprite']['skew']['y']=this[_0x514584(0x2e6)]);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xbc9)]=function(){const _0x43eef9=_0x44ae36;if(this[_0x43eef9(0x9b7)]<=0x0)return;if(!this[_0x43eef9(0x7f7)])return;const _0x37971d=this[_0x43eef9(0x9b7)],_0x44a350=this[_0x43eef9(0x9af)],_0x2b8b4a=this[_0x43eef9(0xb84)],_0x3d1800=this['_distortionSprite'];Imported[_0x43eef9(0x6c8)]?(_0x3d1800['skew']['x']=this['applyEasing'](_0x3d1800[_0x43eef9(0x49d)]['x'],this[_0x43eef9(0x4f1)],_0x37971d,_0x44a350,_0x2b8b4a),_0x3d1800['skew']['y']=this[_0x43eef9(0x534)](_0x3d1800[_0x43eef9(0x49d)]['y'],this['_targetSkewY'],_0x37971d,_0x44a350,_0x2b8b4a)):(_0x3d1800[_0x43eef9(0x49d)]['x']=(_0x3d1800[_0x43eef9(0x49d)]['x']*(_0x37971d-0x1)+this[_0x43eef9(0x4f1)])/_0x37971d,_0x3d1800[_0x43eef9(0x49d)]['y']=(_0x3d1800[_0x43eef9(0x49d)]['y']*(_0x37971d-0x1)+this[_0x43eef9(0x2e6)])/_0x37971d);this['_skewDuration']--;if(this[_0x43eef9(0x9b7)]<=0x0)this[_0x43eef9(0xb68)]();},Sprite_Battler['prototype'][_0x44ae36(0xb68)]=function(){const _0x312393=_0x44ae36;this[_0x312393(0x7f7)][_0x312393(0x49d)]['x']=this[_0x312393(0x4f1)],this[_0x312393(0x7f7)]['skew']['y']=this[_0x312393(0x2e6)];},Sprite_Battler[_0x44ae36(0x137)]['isSkewing']=function(){const _0x31a32e=_0x44ae36;return this[_0x31a32e(0x9b7)]>0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x9a7)]=function(_0x4d939a,_0x4311cc,_0x1a0a09,_0x149a78){const _0xe9fd1b=_0x44ae36;if(!this[_0xe9fd1b(0x44a)]())return;if(!this[_0xe9fd1b(0x7f7)])return;if(this[_0xe9fd1b(0x9d9)]===_0x4d939a)return;this[_0xe9fd1b(0x9d9)]=_0x4d939a,this[_0xe9fd1b(0x18a)]=_0x4311cc,this[_0xe9fd1b(0x5eb)]=_0x4311cc,this[_0xe9fd1b(0x175)]=_0x1a0a09||_0xe9fd1b(0x45a),this[_0xe9fd1b(0x198)]=_0x149a78,this['_angleRevertOnFinish']===undefined&&(this[_0xe9fd1b(0x198)]=!![]),_0x4311cc<=0x0&&(this[_0xe9fd1b(0x15c)]=_0x4d939a,this['_angleRevertOnFinish']&&(this[_0xe9fd1b(0x9d9)]=0x0,this[_0xe9fd1b(0x15c)]=0x0));},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x8e4)]=function(){const _0x383868=_0x44ae36;this[_0x383868(0x3b8)](),this[_0x383868(0x6ca)]();},Sprite_Battler['prototype'][_0x44ae36(0x3b8)]=function(){const _0x200dfb=_0x44ae36;if(this[_0x200dfb(0x18a)]<=0x0)return;const _0xe24c0=this[_0x200dfb(0x18a)],_0x339268=this[_0x200dfb(0x5eb)],_0x1d4a47=this['_angleEasing'];Imported[_0x200dfb(0x6c8)]?this[_0x200dfb(0x15c)]=this['applyEasing'](this['_currentAngle'],this['_targetAngle'],_0xe24c0,_0x339268,_0x1d4a47):this['_currentAngle']=(this[_0x200dfb(0x15c)]*(_0xe24c0-0x1)+this[_0x200dfb(0x9d9)])/_0xe24c0;this[_0x200dfb(0x18a)]--;if(this['_angleDuration']<=0x0)this[_0x200dfb(0x599)]();},Sprite_Battler[_0x44ae36(0x137)]['onAngleEnd']=function(){const _0x4277bb=_0x44ae36;this[_0x4277bb(0x15c)]=this[_0x4277bb(0x9d9)],this[_0x4277bb(0x198)]&&(this[_0x4277bb(0x9d9)]=0x0,this[_0x4277bb(0x15c)]=0x0);},Sprite_Battler[_0x44ae36(0x137)]['isSpinning']=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x6ca)]=function(){const _0x193cad=_0x44ae36;if(!this['_distortionSprite'])return;const _0x1cd7b4=this['_currentAngle'],_0x4db920=this['scale']['x'],_0x468d2a=this[_0x193cad(0x93d)][_0x193cad(0x30c)]()?-0x1:0x1;this['_distortionSprite'][_0x193cad(0xbcc)]=_0x1cd7b4*_0x4db920*_0x468d2a;const _0x2c6a0a=this[_0x193cad(0x7f7)]['scale']['y'];this[_0x193cad(0x7f7)]['y']=this[_0x193cad(0x745)]*-0.5*(0x2-_0x2c6a0a),this['_distortionSprite']['y']=Math[_0x193cad(0xb2f)](this['_distortionSprite']['y']);const _0x2bafb7=[this['_mainSprite'],this[_0x193cad(0x942)],this[_0x193cad(0x40e)]];for(const _0x7854ee of _0x2bafb7){if(!_0x7854ee)continue;_0x7854ee['y']=this[_0x193cad(0x745)]*0.5;}this[_0x193cad(0x6cf)]&&(this[_0x193cad(0x940)]=this[_0x193cad(0x940)]??0x1,this[_0x193cad(0x9fa)]=this['_shadowScaleY']??0x1,this[_0x193cad(0x6cf)]['scale']['x']=this['_distortionSprite']['scale']['x']*this['_shadowScaleX'],this['_shadowSprite'][_0x193cad(0x497)]['y']=this[_0x193cad(0x7f7)][_0x193cad(0x497)]['y']*this['_shadowScaleY']);},VisuMZ[_0x44ae36(0x851)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x44ae36(0x137)]['createStateSprite'],Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x947)]=function(){const _0x2dba0d=_0x44ae36;VisuMZ[_0x2dba0d(0x851)]['Sprite_Actor_createStateSprite'][_0x2dba0d(0x689)](this),VisuMZ['BattleCore'][_0x2dba0d(0xa08)][_0x2dba0d(0x56f)][_0x2dba0d(0x510)]&&this['createHpGaugeSprite']();},VisuMZ[_0x44ae36(0x851)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x55a)],Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x55a)]=function(){const _0x28b1d6=_0x44ae36;VisuMZ['BattleCore']['Settings']['HpGauge'][_0x28b1d6(0x7b9)]&&this[_0x28b1d6(0xa64)](),VisuMZ[_0x28b1d6(0x851)][_0x28b1d6(0x811)][_0x28b1d6(0x689)](this);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xa64)]=function(){const _0x2a3972=_0x44ae36;if(!ConfigManager[_0x2a3972(0x8f5)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x59c233=VisuMZ['BattleCore']['Settings'][_0x2a3972(0x56f)],_0x46eae5=new Sprite_HpGauge();_0x46eae5[_0x2a3972(0x792)]['x']=_0x59c233[_0x2a3972(0xa52)],_0x46eae5[_0x2a3972(0x792)]['y']=_0x59c233[_0x2a3972(0x7b8)],_0x46eae5[_0x2a3972(0x497)]['x']=_0x46eae5[_0x2a3972(0x497)]['y']=_0x59c233[_0x2a3972(0xac6)],this[_0x2a3972(0x69e)]=_0x46eae5,this[_0x2a3972(0x33d)](this[_0x2a3972(0x69e)]),Spriteset_Battle[_0x2a3972(0x9ed)]&&BattleManager['addChildToUiContainer'](this[_0x2a3972(0x69e)]);},VisuMZ[_0x44ae36(0x851)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x37e)],Sprite_Battler[_0x44ae36(0x137)]['setBattler']=function(_0x5377dd){const _0x56bb9d=_0x44ae36,_0x16f125=this[_0x56bb9d(0x93d)];VisuMZ[_0x56bb9d(0x851)]['Sprite_Battler_setBattler'][_0x56bb9d(0x689)](this,_0x5377dd),this[_0x56bb9d(0x119)](_0x5377dd);if(_0x16f125!==_0x5377dd)this[_0x56bb9d(0xb52)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x119)]=function(_0x299c91){const _0x2acc43=_0x44ae36;if(!_0x299c91)return;if(!this[_0x2acc43(0x69e)])return;if(_0x299c91['isActor']()){}else{if(_0x299c91[_0x2acc43(0x2fe)]()){if(this[_0x2acc43(0x6ea)]===Sprite_SvEnemy&&!_0x299c91[_0x2acc43(0x87e)]())return;}}this[_0x2acc43(0x69e)][_0x2acc43(0x93c)](_0x299c91,'hp');},Sprite_Battler[_0x44ae36(0x137)]['hasStaticSvBattler']=function(){const _0x166697=_0x44ae36;return this[_0x166697(0x93d)]&&this[_0x166697(0x93d)]['hasStaticSvBattler']();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x351)]=function(){const _0x2edfbe=_0x44ae36,_0x41109a=this[_0x2edfbe(0x9a0)][_0x2edfbe(0x2ec)];if(!_0x41109a)return;const _0x4f2fc6=_0x41109a[_0x2edfbe(0xa20)];let _0x5c7d04=_0x41109a[_0x2edfbe(0x745)];if(this[_0x2edfbe(0x93d)]['isDead']()){if(this[_0x2edfbe(0xa15)])_0x5c7d04=Math[_0x2edfbe(0x131)](0x0,this[_0x2edfbe(0xa15)][_0x2edfbe(0x745)]-0x4);}this['_mainSprite'][_0x2edfbe(0x3c4)](0x0,0x0,_0x4f2fc6,_0x5c7d04),this[_0x2edfbe(0x3c4)](0x0,0x0,_0x4f2fc6,_0x5c7d04);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x4d8)]=function(){const _0x33aab0=_0x44ae36;if(!this[_0x33aab0(0x93d)])return;if(!this[_0x33aab0(0x69e)])return;const _0x2a7318=VisuMZ['BattleCore'][_0x33aab0(0xa08)][_0x33aab0(0x56f)],_0x46ce93=this[_0x33aab0(0x69e)];_0x46ce93[_0x33aab0(0x7bb)]=this['isVisualHpGaugeDisplayed']();const _0x308369=_0x2a7318[_0x33aab0(0x491)],_0x8759fa=_0x2a7318[_0x33aab0(0xb91)];_0x46ce93['x']=_0x308369,_0x46ce93['x']+=this[_0x33aab0(0x93d)]['battleUIOffsetX'](),_0x46ce93['y']=-this[_0x33aab0(0x745)]+_0x8759fa,_0x46ce93['y']+=this[_0x33aab0(0x93d)][_0x33aab0(0x565)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x33aab0(0x97d)][_0x33aab0(0x4b4)]&&(_0x46ce93['x']+=this['x'],_0x46ce93['y']+=this['y']);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x4d3)]=function(){const _0x5af9b1=_0x44ae36;if(!this[_0x5af9b1(0x93d)])return![];if(this['_battler'][_0x5af9b1(0x30c)]())return!![];if(this[_0x5af9b1(0x93d)][_0x5af9b1(0x641)]())return![];if(this[_0x5af9b1(0x7b5)]<=0x0)return![];const _0x416398=this[_0x5af9b1(0x93d)][_0x5af9b1(0xbcb)]()['note'];if(_0x416398[_0x5af9b1(0x54f)](/<SHOW HP GAUGE>/i))return!![];if(_0x416398[_0x5af9b1(0x54f)](/<HIDE HP GAUGE>/i))return![];const _0x4dcbfa=VisuMZ['BattleCore'][_0x5af9b1(0xa08)][_0x5af9b1(0x56f)];if(_0x4dcbfa[_0x5af9b1(0x731)]){if(_0x4dcbfa[_0x5af9b1(0x40d)]&&BattleManager['isBattleTest']())return!![];if(this['_battler'][_0x5af9b1(0xa4b)])return![];return this['_battler']['hasBeenDefeatedBefore']();}return!![];},VisuMZ[_0x44ae36(0x851)]['Sprite_Battler_isMoving']=Sprite_Battler['prototype'][_0x44ae36(0x68f)],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x68f)]=function(){const _0x48ab31=_0x44ae36;if(!this[_0x48ab31(0x93d)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ['BattleCore'][_0x48ab31(0x6d4)][_0x48ab31(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xb94)]=Sprite_Battler['prototype'][_0x44ae36(0x38b)],Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x38b)]=function(_0x284cdb,_0x2a6c3f,_0x216d3c){const _0x309a6d=_0x44ae36;this[_0x309a6d(0x44a)]()&&VisuMZ['BattleCore'][_0x309a6d(0xb94)][_0x309a6d(0x689)](this,_0x284cdb,_0x2a6c3f,_0x216d3c);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x44a)]=function(){const _0x485cd8=_0x44ae36;if(this['_battler']&&this[_0x485cd8(0x93d)][_0x485cd8(0xb6d)]())return![];if(this['_battler']&&!this[_0x485cd8(0x93d)][_0x485cd8(0x20b)]())return![];return $gameSystem[_0x485cd8(0x628)]();},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x79c)]=function(){},Sprite_Battler[_0x44ae36(0x137)]['stepBack']=function(){const _0x4e7db7=_0x44ae36;this[_0x4e7db7(0x38b)](0x0,0x0,0xc);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0xcf)]=function(){},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x703)]=function(){const _0x27f336=_0x44ae36,_0x16b1f7=VisuMZ['BattleCore']['Settings']['Actor'],_0x360c1a=this[_0x27f336(0x93d)]&&this['_battler'][_0x27f336(0x30c)]()?0x1:-0x1,_0x3a5843=this['_baseX']-this[_0x27f336(0x50d)]+_0x360c1a*_0x16b1f7[_0x27f336(0x60f)],_0x1429c4=this['_baseY']-this['_homeY']+_0x360c1a*_0x16b1f7[_0x27f336(0x2d2)],_0x26d04a=_0x16b1f7[_0x27f336(0x85b)];this[_0x27f336(0x38b)](_0x3a5843,_0x1429c4,_0x26d04a);},Sprite_Battler[_0x44ae36(0x137)]['startShakeFlinch']=function(_0x207b06,_0x348b07){const _0x1a834f=_0x44ae36,_0x3f0995=VisuMZ['BattleCore'][_0x1a834f(0xa08)]['Actor'];this[_0x1a834f(0x3b7)]=Math[_0x1a834f(0xb2f)]((_0x3f0995['ShakeFlinchDuration']??0x18)*_0x348b07),this[_0x1a834f(0x938)]=Math['max'](this[_0x1a834f(0x938)],_0x207b06);},Sprite_Battler[_0x44ae36(0x137)][_0x44ae36(0x736)]=function(){const _0x43a26d=_0x44ae36,_0x1ad5eb=VisuMZ[_0x43a26d(0x851)][_0x43a26d(0xa08)][_0x43a26d(0x908)];if(!(_0x1ad5eb[_0x43a26d(0x5f1)]??![]))return;if(this[_0x43a26d(0x3b7)]>0x0){const _0x3731ff=this['_shakeFlinchDuration'];this[_0x43a26d(0x938)]=this[_0x43a26d(0x938)]*(_0x3731ff-0x1)/_0x3731ff,this[_0x43a26d(0x3b7)]--,this[_0x43a26d(0x3b7)]<=0x0&&(this[_0x43a26d(0x938)]=0x0);}this[_0x43a26d(0x938)]>0x0?(this[_0x43a26d(0x9a0)]['x']=Math['randomInt'](this[_0x43a26d(0x938)])*(Math[_0x43a26d(0x38d)]()<0.5?-0x1:0x1),this[_0x43a26d(0x5b5)]!==this['y']&&(this[_0x43a26d(0x9a0)]['y']=this[_0x43a26d(0x745)]*0.5,this[_0x43a26d(0x9a0)]['y']+=Math['randomInt'](this[_0x43a26d(0x938)])*(Math[_0x43a26d(0x38d)]()<0.5?-0x1:0x1))):(this[_0x43a26d(0x9a0)]['x']=0x0,this[_0x43a26d(0x9a0)]['y']=this['height']*0.5);},VisuMZ['BattleCore']['Sprite_Actor_initMembers']=Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x443)],Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x443)]=function(){const _0x53cf26=_0x44ae36;VisuMZ[_0x53cf26(0x851)]['Sprite_Actor_initMembers'][_0x53cf26(0x689)](this),this[_0x53cf26(0x505)]();},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0xa06)]=function(){const _0x5d3e51=_0x44ae36;return this[_0x5d3e51(0x7f7)]||this[_0x5d3e51(0x9a0)]||this;},VisuMZ[_0x44ae36(0x851)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor['prototype'][_0x44ae36(0x30a)],Sprite_Actor[_0x44ae36(0x137)]['moveToStartPosition']=function(){},Sprite_Actor['prototype'][_0x44ae36(0xaef)]=function(_0x453024){const _0x218f8c=_0x44ae36;if(SceneManager[_0x218f8c(0x6f8)]())return;if(!_0x453024)return;if(!_0x453024[_0x218f8c(0x44a)]())return;VisuMZ['BattleCore'][_0x218f8c(0xb1f)][_0x218f8c(0x689)](this);},VisuMZ[_0x44ae36(0x851)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x44ae36(0x137)]['setActorHome'],Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x468)]=function(_0x14ae86){const _0x4bcfe7=_0x44ae36;VisuMZ[_0x4bcfe7(0x851)][_0x4bcfe7(0xa08)][_0x4bcfe7(0x908)][_0x4bcfe7(0x769)]?VisuMZ[_0x4bcfe7(0x851)][_0x4bcfe7(0xa08)][_0x4bcfe7(0x908)][_0x4bcfe7(0x769)][_0x4bcfe7(0x689)](this,_0x14ae86):VisuMZ[_0x4bcfe7(0x851)]['Sprite_Actor_setActorHome'][_0x4bcfe7(0x689)](this,_0x14ae86);},VisuMZ['BattleCore'][_0x44ae36(0x883)]=Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x37e)],Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x37e)]=function(_0x4117b2){const _0x5f53a8=_0x44ae36;VisuMZ[_0x5f53a8(0x851)][_0x5f53a8(0x883)][_0x5f53a8(0x689)](this,_0x4117b2),this[_0x5f53a8(0x219)](_0x4117b2);},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x219)]=function(_0x44d2f9){const _0x47c79f=_0x44ae36;if(!_0x44d2f9)return;if(!this[_0x47c79f(0x9a0)])return;this[_0x47c79f(0x9a0)][_0x47c79f(0x792)]['x']=this[_0x47c79f(0x5f3)]['svBattlerAnchorX'](),this[_0x47c79f(0x9a0)][_0x47c79f(0x792)]['y']=this[_0x47c79f(0x5f3)][_0x47c79f(0x4d1)](),this[_0x47c79f(0x4ac)]();},VisuMZ[_0x44ae36(0x851)]['Sprite_Actor_update']=Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0xa8a)],Sprite_Actor['prototype'][_0x44ae36(0xa8a)]=function(){const _0x2a4818=_0x44ae36;VisuMZ['BattleCore'][_0x2a4818(0xa40)][_0x2a4818(0x689)](this),this[_0x2a4818(0x5f3)]&&(this[_0x2a4818(0x453)](),this[_0x2a4818(0x3a2)]());},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x992)]=Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x2b2)],Sprite_Actor['prototype']['updateBitmap']=function(){const _0x471d0c=_0x44ae36;VisuMZ[_0x471d0c(0x851)][_0x471d0c(0x992)][_0x471d0c(0x689)](this),this[_0x471d0c(0x9a0)]&&this[_0x471d0c(0x9a0)]['bitmap']&&this['_battler']&&(this['_mainSprite'][_0x471d0c(0x2ec)][_0x471d0c(0x568)]!==this[_0x471d0c(0x93d)][_0x471d0c(0x933)]()&&(this['_mainSprite'][_0x471d0c(0x2ec)][_0x471d0c(0x568)]=this[_0x471d0c(0x93d)][_0x471d0c(0x933)]()));},VisuMZ[_0x44ae36(0x851)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x2b4)],Sprite_Actor[_0x44ae36(0x137)]['updateShadow']=function(){const _0x47ff6d=_0x44ae36;VisuMZ['BattleCore'][_0x47ff6d(0x4a6)]['call'](this),this[_0x47ff6d(0xb64)]();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x245dac=_0x44ae36;if(!this['_mainSprite'])return;if(!this[_0x245dac(0x6cf)])return;this[_0x245dac(0x4ac)](),this[_0x245dac(0x2c0)]();},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x453)]=function(){const _0x426115=_0x44ae36;{this[_0x426115(0xaed)]['scale']['x']=0x1/(this[_0x426115(0x497)]['x']||0.001),this[_0x426115(0xaed)][_0x426115(0x497)]['y']=0x1/(this['scale']['y']||0.001);}{this[_0x426115(0xaed)]['x']=0x0,this[_0x426115(0xaed)]['y']=-this[_0x426115(0x745)]-0x20+0x60;const _0x1edcd3=VisuMZ[_0x426115(0x851)][_0x426115(0xa08)]['Actor'];this[_0x426115(0xaed)]['x']+=_0x1edcd3['StateOverlayOffsetX']??0x0,this['_stateSprite']['y']+=_0x1edcd3[_0x426115(0x1a1)]??0x0;}},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x3a2)]=function(){const _0x600bbe=_0x44ae36;if(!$gameSystem[_0x600bbe(0x628)]()&&this[_0x600bbe(0x6ea)]===Sprite_Actor){const _0x3e3a51=Scene_Battle[_0x600bbe(0x137)][_0x600bbe(0x36d)]();[_0x600bbe(0x199),_0x600bbe(0xb29),_0x600bbe(0x984),'border']['includes'](_0x3e3a51)&&(this[_0x600bbe(0x7b5)]=0x0);}},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x543)]=function(){const _0x5722e5=_0x44ae36,_0xe7b7c1=this['_actor'];if(_0xe7b7c1){if(_0xe7b7c1[_0x5722e5(0x5df)])return;const _0x5cdb70=_0xe7b7c1[_0x5722e5(0x1b9)]();if(_0xe7b7c1['isInputting']()||_0xe7b7c1['isActing']())this[_0x5722e5(0x49c)](_0x5722e5(0x6a3));else{if(_0x5cdb70===0x3)this[_0x5722e5(0x49c)](_0x5722e5(0x100));else{if(_0x5cdb70===0x2)this[_0x5722e5(0x49c)]('sleep');else{if(this[_0x5722e5(0x145)])this[_0x5722e5(0x49c)]('escape');else{if(_0xe7b7c1['isCharging']())this[_0x5722e5(0x49c)](_0x5722e5(0x26f));else{if(_0xe7b7c1[_0x5722e5(0x78d)]())this[_0x5722e5(0x49c)](_0x5722e5(0xa11));else{if(_0xe7b7c1[_0x5722e5(0x3f5)]()||_0xe7b7c1['isGuardWaiting']())this[_0x5722e5(0x49c)]('guard');else{if(_0x5cdb70===0x1)this[_0x5722e5(0x49c)](_0x5722e5(0x4a3));else{if(_0xe7b7c1[_0x5722e5(0x2a1)]())this[_0x5722e5(0x49c)]('dying');else{if(_0xe7b7c1[_0x5722e5(0x66c)]())this[_0x5722e5(0x49c)]('walk');else _0xe7b7c1['currentAction']()?this[_0x5722e5(0x49c)]('wait'):this[_0x5722e5(0x49c)](_0x5722e5(0x6a3));}}}}}}}}}}},Sprite_Actor[_0x44ae36(0x137)]['retreat']=function(){const _0x17758d=_0x44ae36,_0x192a64=0xa,_0x209daa=0x12c*_0x192a64,_0x3d9068=0x1e*_0x192a64;this[_0x17758d(0x38b)](_0x209daa,0x0,_0x3d9068);},Sprite_Actor['prototype'][_0x44ae36(0xa90)]=function(){Sprite_Battler['prototype']['onMoveEnd']['call'](this);},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x888)]=function(){const _0x27c47f=_0x44ae36;return Sprite_Battler[_0x27c47f(0x906)];},Sprite_Weapon[_0x44ae36(0x137)]['animationWait']=function(){const _0x51f04b=_0x44ae36;return Sprite_Battler[_0x51f04b(0x906)];},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0xaf6)]=function(){},Sprite_Actor['prototype'][_0x44ae36(0x55d)]=function(){},Sprite_Actor[_0x44ae36(0x137)]['updateMotionCount']=function(){const _0xd297f=_0x44ae36;if(this[_0xd297f(0x61e)]&&++this['_motionCount']>=this['motionSpeed']()){if(this[_0xd297f(0x61e)][_0xd297f(0x3e8)])this[_0xd297f(0x8d6)]=(this['_pattern']+0x1)%0x4;else{if(this[_0xd297f(0x8d6)]<0x2)this[_0xd297f(0x8d6)]++;else{const _0x17e8e8=this[_0xd297f(0x5f3)];if(_0x17e8e8)_0x17e8e8[_0xd297f(0x5df)]=undefined;this[_0xd297f(0x543)]();}}this[_0xd297f(0xb05)]=0x0;}},Sprite_Actor['prototype'][_0x44ae36(0x48f)]=function(_0x46c7f8){const _0x78914e=_0x44ae36;if(this['_battler']&&this[_0x78914e(0x93d)][_0x78914e(0xb6d)]()){this[_0x78914e(0x61e)]=Sprite_Actor[_0x78914e(0x62a)][_0x78914e(0x100)];return;}const _0x50c4a3=Sprite_Actor[_0x78914e(0x62a)][_0x46c7f8];this[_0x78914e(0x61e)]=_0x50c4a3,this['_motionCount']=0x0,this[_0x78914e(0x8d6)]=0x0;},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x3c5)]=function(_0x290c99){const _0x134c49=_0x44ae36;if(this[_0x134c49(0xb37)]())return;this[_0x134c49(0xb83)](),this[_0x134c49(0xa66)]['setup'](_0x290c99),this[_0x134c49(0x5f3)][_0x134c49(0xa95)]();},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0xb83)]=function(){const _0x114a3f=_0x44ae36;let _0x293ab6=-0x10,_0x150c9e=this[_0x114a3f(0x745)]*0.5;const _0x3f259c=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x51126f=this['_battler'][_0x114a3f(0x96e)]()[_0x114a3f(0x6e5)](_0x24d981=>_0x24d981&&_0x24d981[_0x114a3f(0x903)][_0x114a3f(0x54f)](_0x3f259c)?Number(RegExp['$1']):0x0),_0x38cd02=this['_battler'][_0x114a3f(0x96e)]()[_0x114a3f(0x6e5)](_0x2567b6=>_0x2567b6&&_0x2567b6[_0x114a3f(0x903)][_0x114a3f(0x54f)](_0x3f259c)?Number(RegExp['$2']):0x0);_0x293ab6=_0x51126f[_0x114a3f(0x165)]((_0x3cf469,_0x53777f)=>_0x3cf469+_0x53777f,_0x293ab6),_0x150c9e=_0x38cd02[_0x114a3f(0x165)]((_0x12844f,_0x10f640)=>_0x12844f+_0x10f640,_0x150c9e),this['_weaponSprite']['x']=_0x293ab6,this[_0x114a3f(0xa66)]['y']=_0x150c9e,this['_weaponSprite']['update']();},Sprite_Weapon[_0x44ae36(0x137)]['setup']=function(_0x3dc3a0){const _0x283cbb=_0x44ae36;this[_0x283cbb(0x49a)]=_0x3dc3a0,this[_0x283cbb(0x85e)]=-0x1,this[_0x283cbb(0x8d6)]=0x0,this[_0x283cbb(0x22a)](),this['updateFrame']();},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0xa14)]=function(){},Sprite_Actor[_0x44ae36(0x137)][_0x44ae36(0x79c)]=function(){const _0x5b597f=_0x44ae36,_0x410d71=VisuMZ[_0x5b597f(0x851)]['Settings']['ActionSequence'],_0x803985=_0x410d71[_0x5b597f(0x93f)],_0x23d0d9=_0x410d71[_0x5b597f(0x50a)],_0x435aff=_0x410d71[_0x5b597f(0x22d)];this[_0x5b597f(0x38b)](-_0x803985,-_0x23d0d9,_0x435aff);},VisuMZ[_0x44ae36(0x851)]['Sprite_Actor_updateFrame']=Sprite_Actor['prototype']['updateFrame'],Sprite_Actor['prototype']['updateFrame']=function(){const _0x48501f=_0x44ae36;this[_0x48501f(0xb37)]()?this[_0x48501f(0x351)]():(this[_0x48501f(0x3e2)](),VisuMZ[_0x48501f(0x851)][_0x48501f(0x9ae)]['call'](this));},Sprite_Actor['prototype'][_0x44ae36(0x3e2)]=function(){const _0x2e0d47=_0x44ae36;if(this['_battler']&&this['_battler'][_0x2e0d47(0x762)]){const _0x5317ab=this[_0x2e0d47(0x93d)][_0x2e0d47(0x762)];this[_0x2e0d47(0x61e)]=Sprite_Actor['MOTIONS'][_0x5317ab[_0x2e0d47(0x939)]],this['_pattern']=_0x5317ab[_0x2e0d47(0x66e)];const _0xa90634=this[_0x2e0d47(0xa66)];_0xa90634[_0x2e0d47(0x7ee)](_0x5317ab['weaponImageId'],_0x5317ab[_0x2e0d47(0x66e)]),this[_0x2e0d47(0xb83)]();}},Sprite_Weapon['prototype'][_0x44ae36(0x7ee)]=function(_0x4e189f,_0x59675b){const _0x3f91b2=_0x44ae36;this[_0x3f91b2(0x49a)]=_0x4e189f,this[_0x3f91b2(0x85e)]=-Infinity,this[_0x3f91b2(0x8d6)]=_0x59675b,this['loadBitmap'](),this[_0x3f91b2(0x7ca)]();},Sprite_Enemy[_0x44ae36(0x137)]['initMembers']=function(){const _0x16fa46=_0x44ae36;Sprite_Battler[_0x16fa46(0x137)][_0x16fa46(0x443)]['call'](this),this['_enemy']=null,this['_appeared']=![],this['_battlerName']='',this[_0x16fa46(0x4c9)]=0x0,this[_0x16fa46(0x8b6)]=null,this[_0x16fa46(0x68a)]=0x0,this[_0x16fa46(0x14c)]=0x0,this[_0x16fa46(0x951)](),this[_0x16fa46(0x55a)]();},VisuMZ['BattleCore']['Sprite_Enemy_update']=Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0xa8a)],Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0xa5d087=_0x44ae36;VisuMZ[_0xa5d087(0x851)][_0xa5d087(0x2dd)][_0xa5d087(0x689)](this),this[_0xa5d087(0x4ac)](),this['updateNameTempVisibility']();},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x951)]=function(){const _0x34eb64=_0x44ae36;this[_0x34eb64(0x9a0)]=new Sprite(),this[_0x34eb64(0x9a0)]['anchor']['x']=0.5,this['_mainSprite'][_0x34eb64(0x792)]['y']=0x1,this[_0x34eb64(0x33d)](this[_0x34eb64(0x9a0)]),this[_0x34eb64(0x505)]();},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0xa06)]=function(){const _0x3b0e49=_0x44ae36;return this['_distortionSprite']||this[_0x3b0e49(0x9a0)]||this;},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x22a)]=function(_0x157bf7){const _0x3c548a=_0x44ae36;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x3c548a(0x87e)]()){const _0xd083ee=this['_enemy']['svBattlerData']();this[_0x3c548a(0x2ec)]=new Bitmap(_0xd083ee[_0x3c548a(0xa20)],_0xd083ee['height']),this[_0x3c548a(0x9a0)]['bitmap']=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x3c548a(0x628)]()){const _0x1d380e=ImageManager[_0x3c548a(0x1e0)](_0x157bf7);_0x1d380e[_0x3c548a(0x729)](this[_0x3c548a(0x986)]['bind'](this,_0x1d380e));}else{const _0x6eef03=ImageManager[_0x3c548a(0x881)](_0x157bf7);_0x6eef03[_0x3c548a(0x729)](this['onStaticEnemyBitmapLoad'][_0x3c548a(0x7ab)](this,_0x6eef03));}}},Sprite_Enemy['prototype'][_0x44ae36(0x986)]=function(_0x1473e4){const _0x5d06d4=_0x44ae36;this[_0x5d06d4(0x9a0)][_0x5d06d4(0x2ec)]=_0x1473e4,this[_0x5d06d4(0x2ec)]=new Bitmap(_0x1473e4['width'],_0x1473e4['height']);},VisuMZ[_0x44ae36(0x851)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0xaea)],Sprite_Enemy[_0x44ae36(0x137)]['setHue']=function(_0x36a5db){const _0x887b16=_0x44ae36;this['_mainSprite']&&this[_0x887b16(0x9a0)][_0x887b16(0xaea)](_0x36a5db);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x57e)]=Sprite_Enemy['prototype'][_0x44ae36(0xb48)],Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0xb48)]=function(){const _0x529445=_0x44ae36;this['allowCollapse']()?VisuMZ[_0x529445(0x851)]['Sprite_Enemy_initVisibility'][_0x529445(0x689)](this):(this[_0x529445(0xbbe)]=!this[_0x529445(0xb65)]['isHidden'](),!this[_0x529445(0xbbe)]&&(this[_0x529445(0x7b5)]=0x0));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1c0)]=Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x3f1)],Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x3f1)]=function(){const _0x58937c=_0x44ae36;if(this[_0x58937c(0x5cf)]())VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse'][_0x58937c(0x689)](this);},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x7ca)]=function(){const _0xa9ad73=_0x44ae36;Sprite_Battler[_0xa9ad73(0x137)][_0xa9ad73(0x7ca)][_0xa9ad73(0x689)](this);const _0x1c2335=this[_0xa9ad73(0xa06)]()||this;if(!_0x1c2335)return;!_0x1c2335['bitmap']&&(_0x1c2335[_0xa9ad73(0x2ec)]=new Bitmap(this[_0xa9ad73(0xa20)]||0x1,this[_0xa9ad73(0x745)]||0x1));if(this[_0xa9ad73(0x8b6)]===_0xa9ad73(0x315))this[_0xa9ad73(0x9a0)][_0xa9ad73(0x3c4)](0x0,0x0,this[_0xa9ad73(0x9a0)][_0xa9ad73(0xa20)]||0x1,this[_0xa9ad73(0x68a)]);else{let _0x465e9e=0x1;if(_0x1c2335&&_0x1c2335[_0xa9ad73(0x2ec)])_0x465e9e=_0x1c2335[_0xa9ad73(0x2ec)][_0xa9ad73(0xa20)];let _0x408f23=0x1;if(this[_0xa9ad73(0x2ec)])_0x408f23=this[_0xa9ad73(0x2ec)]['height'];_0x1c2335[_0xa9ad73(0x3c4)](0x0,0x0,_0x465e9e,_0x408f23);}},VisuMZ[_0x44ae36(0x851)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x396)],Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x396)]=function(){const _0x1fd570=_0x44ae36;if(this[_0x1fd570(0x5cf)]())VisuMZ[_0x1fd570(0x851)][_0x1fd570(0x869)]['call'](this);},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x68f)]=function(){const _0x3d55ee=_0x44ae36;return Sprite_Battler[_0x3d55ee(0x137)][_0x3d55ee(0x68f)][_0x3d55ee(0x689)](this);},VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']=Sprite_Enemy['prototype'][_0x44ae36(0x453)],Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x453)]=function(){const _0x5e8073=_0x44ae36;VisuMZ[_0x5e8073(0x851)]['Sprite_Enemy_updateStateSprite']['call'](this),this[_0x5e8073(0x601)]();},Sprite_Enemy['prototype'][_0x44ae36(0x601)]=function(){const _0x238273=_0x44ae36,_0x5a7a6e=VisuMZ['BattleCore'][_0x238273(0xa08)][_0x238273(0x2e0)];if(_0x5a7a6e[_0x238273(0xa81)]&&!_0x5a7a6e['NameLegacy']){this[_0x238273(0x313)][_0x238273(0x7b5)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x238273(0x313)]['x']+=this[_0x238273(0x93d)][_0x238273(0x132)]();let _0x32d481=0x1;if(this['bitmap'])_0x32d481=this[_0x238273(0x2ec)][_0x238273(0x745)];this[_0x238273(0x313)]['y']=-_0x32d481-this['_stateIconSprite']['height']-0x4,this[_0x238273(0x313)]['y']+=this[_0x238273(0x93d)]['battleUIOffsetY'](),this[_0x238273(0x313)][_0x238273(0x497)]['x']=0x1/(this[_0x238273(0x497)]['x']||0.001),this[_0x238273(0x313)][_0x238273(0x497)]['y']=0x1/(this['scale']['y']||0.001),this[_0x238273(0x87e)]()&&(this[_0x238273(0x942)][_0x238273(0xaed)][_0x238273(0x497)]['x']=-0x1/(this[_0x238273(0x497)]['x']||0.001),this[_0x238273(0x942)]['_stateSprite'][_0x238273(0x497)]['y']=0x1/(this[_0x238273(0x497)]['y']||0.001));},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x94f)]=function(){const _0x2d6c55=_0x44ae36;this['_battler']&&this[_0x2d6c55(0x93d)][_0x2d6c55(0x94f)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x70b)]=Sprite_Enemy[_0x44ae36(0x137)]['setBattler'],Sprite_Enemy[_0x44ae36(0x137)]['setBattler']=function(_0x20ce61){const _0x23be45=_0x44ae36;VisuMZ[_0x23be45(0x851)][_0x23be45(0x70b)][_0x23be45(0x689)](this,_0x20ce61),this[_0x23be45(0x94b)](_0x20ce61);},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x94b)]=function(_0x752e62){const _0x3031a1=_0x44ae36;!this[_0x3031a1(0x942)]&&(this[_0x3031a1(0x942)]=new Sprite_SvEnemy(_0x752e62),this[_0x3031a1(0x505)]()),this['_svBattlerSprite']['setBattler'](_0x752e62);},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x87e)]=function(){const _0x520c6b=_0x44ae36;return this[_0x520c6b(0xb65)]&&this[_0x520c6b(0xb65)]['hasSvBattler']();},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x5cf)]=function(){const _0x393e2d=_0x44ae36;return this[_0x393e2d(0x87e)]()?this[_0x393e2d(0xb65)]['allowCollapse']():!![];},Sprite_Enemy[_0x44ae36(0x137)][_0x44ae36(0x543)]=function(){const _0x3db5ea=_0x44ae36;this[_0x3db5ea(0x87e)]()&&this[_0x3db5ea(0x942)][_0x3db5ea(0x543)]();},Sprite_Enemy['prototype'][_0x44ae36(0x48f)]=function(_0x3bc454){const _0x178405=_0x44ae36;if(this[_0x178405(0x87e)]())this['_svBattlerSprite'][_0x178405(0x48f)](_0x3bc454);},Sprite_Enemy[_0x44ae36(0x137)]['forceWeaponAnimation']=function(_0x5db165){const _0x21a0e9=_0x44ae36;if(this[_0x21a0e9(0x87e)]())this[_0x21a0e9(0x942)][_0x21a0e9(0x3c5)](_0x5db165);},Sprite_Enemy['prototype']['stepForward']=function(){const _0xb59144=_0x44ae36,_0x322351=VisuMZ[_0xb59144(0x851)][_0xb59144(0xa08)][_0xb59144(0x512)],_0x462725=_0x322351[_0xb59144(0x93f)],_0x48319d=_0x322351[_0xb59144(0x50a)],_0x2eee60=_0x322351[_0xb59144(0x22d)];this[_0xb59144(0x38b)](_0x462725,_0x48319d,_0x2eee60);};function Sprite_SvEnemy(){const _0x105fee=_0x44ae36;this[_0x105fee(0x58b)](...arguments);}Sprite_SvEnemy[_0x44ae36(0x137)]=Object[_0x44ae36(0x318)](Sprite_Actor[_0x44ae36(0x137)]),Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(_0xc2d28e){const _0x487327=_0x44ae36;Sprite_Actor['prototype'][_0x487327(0x58b)][_0x487327(0x689)](this,_0xc2d28e),this[_0x487327(0x497)]['x']=-0x1,this[_0x487327(0xaed)][_0x487327(0x497)]['x']=-0x1;},Sprite_SvEnemy[_0x44ae36(0x137)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x30a)]=function(){},Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x468)]=function(_0x3b51c2){},Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x2b4)]=function(){},Sprite_SvEnemy['prototype'][_0x44ae36(0x2c0)]=function(){},Sprite_SvEnemy[_0x44ae36(0x137)]['updateStateSprite']=function(){const _0x530532=_0x44ae36;this[_0x530532(0xaed)][_0x530532(0x7bb)]=![];},Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x2b2)]=function(){const _0x575ada=_0x44ae36;Sprite_Battler[_0x575ada(0x137)][_0x575ada(0x2b2)][_0x575ada(0x689)](this);const _0x2ef975=this[_0x575ada(0x5f3)]['svBattlerName']();this['_battlerName']!==_0x2ef975&&(this[_0x575ada(0x3bc)]=_0x2ef975,this[_0x575ada(0x9a0)][_0x575ada(0x2ec)]=ImageManager[_0x575ada(0xd6)](_0x2ef975)),this[_0x575ada(0x9a0)]&&this[_0x575ada(0x9a0)]['bitmap']&&this[_0x575ada(0x93d)]&&(this[_0x575ada(0x9a0)][_0x575ada(0x2ec)][_0x575ada(0x568)]!==this[_0x575ada(0x93d)]['battlerSmoothImage']()&&(this[_0x575ada(0x9a0)]['bitmap'][_0x575ada(0x568)]=this[_0x575ada(0x93d)][_0x575ada(0x933)]()));},Sprite_SvEnemy[_0x44ae36(0x137)]['retreat']=function(){},Sprite_SvEnemy['prototype'][_0x44ae36(0x38b)]=function(_0x58ca23,_0x2d2ad6,_0x2070d9){const _0x52b305=_0x44ae36;if(this['parent'])this[_0x52b305(0x5d0)]['startMove'](_0x58ca23,_0x2d2ad6,_0x2070d9);},Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0x543)]=function(){const _0x2ca307=_0x44ae36,_0x3f3e6a=this[_0x2ca307(0x5f3)];if(_0x3f3e6a){const _0x35246d=_0x3f3e6a['stateMotionIndex']();if(_0x3f3e6a[_0x2ca307(0x6e3)]()||_0x3f3e6a[_0x2ca307(0x64e)]())this[_0x2ca307(0x49c)]('walk');else{if(_0x35246d===0x3)this[_0x2ca307(0x49c)](_0x2ca307(0x100));else{if(_0x35246d===0x2)this['startMotion'](_0x2ca307(0x65c));else{if(_0x3f3e6a[_0x2ca307(0x78d)]())this[_0x2ca307(0x49c)](_0x2ca307(0xa11));else{if(_0x3f3e6a['isGuard']()||_0x3f3e6a[_0x2ca307(0x62c)]())this[_0x2ca307(0x49c)](_0x2ca307(0x8d9));else{if(_0x35246d===0x1)this[_0x2ca307(0x49c)](_0x2ca307(0x4a3));else{if(_0x3f3e6a[_0x2ca307(0x2a1)]())this[_0x2ca307(0x49c)](_0x2ca307(0x44f));else _0x3f3e6a[_0x2ca307(0x66c)]()?this[_0x2ca307(0x49c)](_0x2ca307(0x6a3)):this[_0x2ca307(0x49c)](_0x3f3e6a[_0x2ca307(0x83e)]()[_0x2ca307(0x3bb)]||_0x2ca307(0x6a3));}}}}}}}},Sprite_SvEnemy[_0x44ae36(0x137)]['inHomePosition']=function(){const _0x1f09f0=_0x44ae36;return this[_0x1f09f0(0x5d0)]?this[_0x1f09f0(0x5d0)]['_offsetX']===0x0&&this[_0x1f09f0(0x5d0)][_0x1f09f0(0x7f1)]===0x0:!![];},Sprite_SvEnemy[_0x44ae36(0x137)][_0x44ae36(0xbf3)]=function(){},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x386)]=Sprite_Animation['prototype'][_0x44ae36(0x524)],Sprite_Animation['prototype'][_0x44ae36(0x524)]=function(_0x17c83f){const _0x3cf77d=_0x44ae36;return _0x17c83f[_0x3cf77d(0x7f7)]?this[_0x3cf77d(0x2da)](_0x17c83f):VisuMZ[_0x3cf77d(0x851)][_0x3cf77d(0x386)][_0x3cf77d(0x689)](this,_0x17c83f);},Sprite_Animation[_0x44ae36(0x137)]['targetDistortionSpritePosition']=function(_0x33651c){const _0x1700cf=_0x44ae36;let _0x3f6d06=_0x33651c['x'],_0x55b7a3=_0x33651c['y'],_0x3d4ec0=_0x33651c['height'],_0x4d4238=_0x33651c[_0x1700cf(0x7f7)]['scale']['y'];_0x33651c['x']=_0x33651c[_0x1700cf(0x358)]+_0x33651c[_0x1700cf(0x15d)](),_0x33651c['y']=_0x33651c['_baseY']+_0x33651c['extraPositionY'](),_0x33651c[_0x1700cf(0x745)]*=_0x4d4238;let _0x480681=VisuMZ[_0x1700cf(0x851)]['Sprite_Animation_targetSpritePosition'][_0x1700cf(0x689)](this,_0x33651c);return _0x33651c['x']=_0x3f6d06,_0x33651c['y']=_0x55b7a3,_0x33651c['height']=_0x3d4ec0,_0x480681;},VisuMZ['BattleCore'][_0x44ae36(0xb0a)]=Sprite_AnimationMV['prototype'][_0x44ae36(0xbc3)],Sprite_AnimationMV['prototype']['updatePosition']=function(){const _0x37e2c3=_0x44ae36;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0x37e2c3(0x689)](this);if(!SceneManager[_0x37e2c3(0xb75)]())return;if(this[_0x37e2c3(0x66a)][_0x37e2c3(0x47c)]===0x3)this['x']=Math['round'](Graphics['boxWidth']/0x2),this['y']=Math['round'](Graphics[_0x37e2c3(0x7a7)]/0x2);else{if(this[_0x37e2c3(0x520)])return;}},Sprite_Damage[_0x44ae36(0x137)]['setupBattleCore']=function(_0x4b322a){const _0x169b7a=_0x44ae36,_0x199d9b=_0x4b322a[_0x169b7a(0x2b0)]()||_0x4b322a[_0x169b7a(0x70f)]();if(_0x199d9b[_0x169b7a(0x53a)]||_0x199d9b[_0x169b7a(0x107)])this[_0x169b7a(0x8a7)]=0x0,this[_0x169b7a(0x6cc)]();else{if(_0x199d9b[_0x169b7a(0x733)])this[_0x169b7a(0x8a7)]=_0x199d9b[_0x169b7a(0x3ac)]>=0x0?0x0:0x1,this['createDigits'](_0x199d9b[_0x169b7a(0x3ac)]);else _0x4b322a[_0x169b7a(0x1c1)]()&&_0x199d9b[_0x169b7a(0xa56)]!==0x0&&(this['_colorType']=_0x199d9b[_0x169b7a(0xa56)]>=0x0?0x2:0x3,this['createDigits'](_0x199d9b[_0x169b7a(0xa56)]));}_0x199d9b['critical']&&this['setupCriticalEffect']();},Sprite_Damage[_0x44ae36(0x137)][_0x44ae36(0x93c)]=function(_0x1ac6d1){},Sprite_Damage['prototype'][_0x44ae36(0xbc4)]=function(_0x4a781f){const _0x39b896=_0x44ae36;let _0x5c8234=this[_0x39b896(0x1a4)](_0x4a781f);const _0x16801b=this[_0x39b896(0xb67)](),_0x4c6449=Math[_0x39b896(0xb78)](_0x16801b*0.75);for(let _0x5d92a0=0x0;_0x5d92a0<_0x5c8234[_0x39b896(0x2d9)];_0x5d92a0++){const _0x42de3c=this['createChildSprite'](_0x4c6449,_0x16801b);_0x42de3c[_0x39b896(0x2ec)][_0x39b896(0xf3)](_0x5c8234[_0x5d92a0],0x0,0x0,_0x4c6449,_0x16801b,_0x39b896(0x4e2)),_0x42de3c['x']=(_0x5d92a0-(_0x5c8234[_0x39b896(0x2d9)]-0x1)/0x2)*_0x4c6449,_0x42de3c['dy']=-_0x5d92a0;}},Sprite_Damage['prototype']['createString']=function(_0x5eed61){const _0x3612e5=_0x44ae36;let _0x7cb8a=Math['abs'](_0x5eed61)[_0x3612e5(0x127)]();this['useDigitGrouping']()&&(_0x7cb8a=VisuMZ[_0x3612e5(0xba3)](_0x7cb8a));const _0xe87f16=VisuMZ['BattleCore'][_0x3612e5(0xa08)][_0x3612e5(0xff)];let _0x2910ba='',_0x20556d='';switch(this[_0x3612e5(0x8a7)]){case 0x0:_0x2910ba=_0xe87f16[_0x3612e5(0x5e5)]||_0x3612e5(0x8f9),_0x20556d=TextManager['hp'];if(_0x5eed61===0x0)_0x2910ba='%1';break;case 0x1:_0x2910ba=_0xe87f16[_0x3612e5(0x380)]||_0x3612e5(0x799),_0x20556d=TextManager['hp'];break;case 0x2:_0x2910ba=_0xe87f16[_0x3612e5(0x9dc)]||'-%1\x20MP',_0x20556d=TextManager['mp'];break;case 0x3:_0x2910ba=_0xe87f16['mpHealingFmt']||_0x3612e5(0x1d1),_0x20556d=TextManager['mp'];break;}return _0x2910ba['format'](_0x7cb8a,_0x20556d)[_0x3612e5(0x9de)]();},Sprite_Damage[_0x44ae36(0x137)][_0x44ae36(0xbae)]=function(){const _0x3551d2=_0x44ae36;return Imported[_0x3551d2(0x6c8)]?VisuMZ['CoreEngine'][_0x3551d2(0xa08)][_0x3551d2(0x471)][_0x3551d2(0x506)]:![];},Sprite_Damage[_0x44ae36(0x137)][_0x44ae36(0x461)]=function(){const _0x387a10=_0x44ae36,_0x4c5dcb=VisuMZ['BattleCore'][_0x387a10(0xa08)][_0x387a10(0xff)];_0x4c5dcb['CriticalColor']=_0x4c5dcb[_0x387a10(0x2be)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x4c5dcb[_0x387a10(0x2be)][_0x387a10(0xb46)](0x0),this[_0x387a10(0x7ce)]=_0x4c5dcb[_0x387a10(0x445)]||0x1;},Sprite_Damage[_0x44ae36(0x137)]['setupTextPopup']=function(_0x1dc120,_0x13d589){const _0x204f4a=_0x44ae36;this[_0x204f4a(0x26a)]=_0x13d589['flashColor']||[0x0,0x0,0x0,0x0],this[_0x204f4a(0x26a)]=JsonEx[_0x204f4a(0x22b)](this['_flashColor']),this[_0x204f4a(0x7ce)]=_0x13d589[_0x204f4a(0x2df)]||0x0;const _0x373a5e=this[_0x204f4a(0xb67)](),_0x564088=Math[_0x204f4a(0xb78)](_0x373a5e*0x1e),_0x1a2f99=this[_0x204f4a(0x664)](_0x564088,_0x373a5e);_0x1a2f99[_0x204f4a(0x2ec)][_0x204f4a(0x481)]=ColorManager[_0x204f4a(0x6ec)](_0x13d589[_0x204f4a(0x481)]),_0x1a2f99[_0x204f4a(0x2ec)]['drawText'](_0x1dc120,0x0,0x0,_0x564088,_0x373a5e,'center'),_0x1a2f99['dy']=0x0;},Sprite_Damage[_0x44ae36(0x137)]['setupIconTextPopup']=function(_0x3ecac5,_0x48ba45,_0x2c26d4){const _0x3a02e3=_0x44ae36,_0x370490=Math[_0x3a02e3(0x131)](this['fontSize'](),ImageManager[_0x3a02e3(0xb88)]),_0x1c1fc9=Math[_0x3a02e3(0xb78)](_0x370490*0x1e),_0x5df2c1=this[_0x3a02e3(0x664)](_0x1c1fc9,_0x370490),_0x5efce1=ImageManager[_0x3a02e3(0xb8f)]/0x2,_0x38664d=_0x5df2c1[_0x3a02e3(0x2ec)]['measureTextWidth'](_0x48ba45+'\x20');_0x5df2c1[_0x3a02e3(0x2ec)][_0x3a02e3(0x481)]=ColorManager[_0x3a02e3(0x6ec)](_0x2c26d4['textColor']),_0x5df2c1['bitmap'][_0x3a02e3(0xf3)](_0x48ba45,_0x5efce1,0x0,_0x1c1fc9-_0x5efce1,_0x370490,'center');const _0x4d6c70=Math[_0x3a02e3(0x875)]((_0x370490-ImageManager[_0x3a02e3(0xb88)])/0x2),_0xe62236=_0x1c1fc9/0x2-ImageManager['iconWidth']-_0x38664d/0x2+_0x5efce1/0x2,_0x24b28e=ImageManager[_0x3a02e3(0x25e)](_0x3a02e3(0xb07)),_0xa77861=ImageManager[_0x3a02e3(0xb8f)],_0x104cac=ImageManager[_0x3a02e3(0xb88)],_0x1a12c9=_0x3ecac5%0x10*_0xa77861,_0x3380c5=Math[_0x3a02e3(0xb78)](_0x3ecac5/0x10)*_0x104cac;_0x5df2c1['bitmap'][_0x3a02e3(0x4cb)](_0x24b28e,_0x1a12c9,_0x3380c5,_0xa77861,_0x104cac,_0xe62236,_0x4d6c70),this['_flashColor']=_0x2c26d4[_0x3a02e3(0x7e5)]||[0x0,0x0,0x0,0x0],this[_0x3a02e3(0x26a)]=JsonEx['makeDeepCopy'](this[_0x3a02e3(0x26a)]),this[_0x3a02e3(0x7ce)]=_0x2c26d4[_0x3a02e3(0x2df)]||0x0,_0x5df2c1['dy']=0x0,_0x2c26d4[_0x3a02e3(0x5dc)]&&(_0x5df2c1['x']+=_0x2c26d4[_0x3a02e3(0x5dc)]),_0x2c26d4['offsetY']&&(_0x5df2c1['dy']+=_0x2c26d4['offsetY']);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x90f)]=Sprite_Damage['prototype'][_0x44ae36(0x664)],Sprite_Damage['prototype'][_0x44ae36(0x664)]=function(_0x2a4d14,_0x384fac){const _0x16c305=_0x44ae36;return _0x384fac=Math[_0x16c305(0x875)](_0x384fac*1.2),VisuMZ[_0x16c305(0x851)][_0x16c305(0x90f)][_0x16c305(0x689)](this,_0x2a4d14,_0x384fac);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x96f)]=Sprite_StateIcon['prototype'][_0x44ae36(0x7ca)],Sprite_StateIcon[_0x44ae36(0x137)]['updateFrame']=function(){const _0x2606f5=_0x44ae36;VisuMZ[_0x2606f5(0x851)]['Sprite_StateIcon_updateFrame'][_0x2606f5(0x689)](this),this['opacity']=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x2ca)]=Sprite_Weapon[_0x44ae36(0x137)][_0x44ae36(0x22a)],Sprite_Weapon[_0x44ae36(0x137)][_0x44ae36(0x22a)]=function(){const _0x4024c3=_0x44ae36;VisuMZ[_0x4024c3(0x851)][_0x4024c3(0x2ca)][_0x4024c3(0x689)](this),this[_0x4024c3(0x2ec)]&&(this[_0x4024c3(0x2ec)][_0x4024c3(0x568)]=VisuMZ[_0x4024c3(0x851)][_0x4024c3(0xa08)][_0x4024c3(0x908)][_0x4024c3(0x525)]);},VisuMZ[_0x44ae36(0x851)]['Sprite_Gauge_smoothness']=Sprite_Gauge[_0x44ae36(0x137)][_0x44ae36(0x2d8)],Sprite_Gauge[_0x44ae36(0x137)][_0x44ae36(0x2d8)]=function(){const _0x5a2334=_0x44ae36;return this['_statusType']!==_0x5a2334(0x535)?VisuMZ['BattleCore'][_0x5a2334(0xa08)][_0x5a2334(0x56f)][_0x5a2334(0x2fc)]??0x14:VisuMZ[_0x5a2334(0x851)]['Sprite_Gauge_smoothness'][_0x5a2334(0x689)](this);};function Sprite_GaugeRate(){const _0x1c947c=_0x44ae36;this[_0x1c947c(0x58b)](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x44ae36(0x318)](Sprite_Gauge[_0x44ae36(0x137)]),Sprite_GaugeRate[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x44ae36(0x137)]['initialize']=function(){const _0x5f4358=_0x44ae36;Sprite_Gauge[_0x5f4358(0x137)][_0x5f4358(0x58b)]['call'](this),this[_0x5f4358(0xb32)]=![];},Sprite_GaugeRate['prototype']['updateTargetValue']=function(_0x30e2a6,_0x4a9a33){const _0x394824=_0x44ae36;this[_0x394824(0xb32)]=!![],Sprite_Gauge[_0x394824(0x137)][_0x394824(0x5e1)][_0x394824(0x689)](this,_0x30e2a6,_0x4a9a33),this['_updateTargetValue']=![];},Sprite_GaugeRate[_0x44ae36(0x137)]['currentValue']=function(){const _0x31e3d0=_0x44ae36;if(this['_updateTargetValue']){const _0x25aa9a=Sprite_Gauge[_0x31e3d0(0x137)][_0x31e3d0(0x5d9)]['call'](this),_0x3bdbad=this[_0x31e3d0(0x8e2)]();if(_0x3bdbad<=0x0)return _0x31e3d0(0x787);return Math['floor'](_0x25aa9a/_0x3bdbad*0x64)+'%';}else return Sprite_Gauge[_0x31e3d0(0x137)]['currentValue'][_0x31e3d0(0x689)](this);},Sprite_GaugeRate['prototype'][_0x44ae36(0x546)]=function(){const _0x6054b9=_0x44ae36,_0x24cd9f=Sprite_Gauge[_0x6054b9(0x137)]['currentValue']['call'](this),_0x196e24=this[_0x6054b9(0x8e2)]();if(_0x196e24<=0x0)return _0x6054b9(0x787);return Math['floor'](_0x24cd9f/_0x196e24*0x64)+'%';},Sprite_GaugeRate[_0x44ae36(0x137)]['gaugeRate']=function(){const _0x2830da=_0x44ae36;if(this[_0x2830da(0x8e2)]()<=0x0)return 0x1;return Sprite_Gauge[_0x2830da(0x137)][_0x2830da(0xa50)][_0x2830da(0x689)](this);},Sprite_GaugeRate[_0x44ae36(0x137)][_0x44ae36(0x637)]=function(){const _0x1e7a29=_0x44ae36;if(this['currentMaxValue']()<=0x0)return ColorManager[_0x1e7a29(0x5de)]();return Sprite_Gauge['prototype'][_0x1e7a29(0x637)][_0x1e7a29(0x689)](this);},Sprite_GaugeRate[_0x44ae36(0x137)][_0x44ae36(0x118)]=function(){const _0x192437=_0x44ae36;this[_0x192437(0x882)]==='mp'&&this['currentMaxValue']()<=0x0&&($gameTemp[_0x192437(0x42c)]=!![]),Sprite_Gauge['prototype'][_0x192437(0x118)][_0x192437(0x689)](this),$gameTemp[_0x192437(0x42c)]=undefined;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xbed)]=ColorManager[_0x44ae36(0x7f9)],ColorManager[_0x44ae36(0x7f9)]=function(_0xef267){const _0x5bab7f=_0x44ae36;if($gameTemp[_0x5bab7f(0x42c)])return ColorManager[_0x5bab7f(0x5de)]();return VisuMZ[_0x5bab7f(0x851)][_0x5bab7f(0xbed)]['call'](this,_0xef267);};function Sprite_HpGauge(){const _0x4aea10=_0x44ae36;this[_0x4aea10(0x58b)](...arguments);}Sprite_HpGauge[_0x44ae36(0x137)]=Object[_0x44ae36(0x318)](Sprite_Gauge[_0x44ae36(0x137)]),Sprite_HpGauge['prototype'][_0x44ae36(0x6ea)]=Sprite_HpGauge,Sprite_HpGauge[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(){const _0x29ed22=_0x44ae36;Sprite_Gauge[_0x29ed22(0x137)]['initialize'][_0x29ed22(0x689)](this);},Sprite_HpGauge[_0x44ae36(0x137)][_0x44ae36(0x433)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x44ae36(0x118)]=function(){const _0x194b11=_0x44ae36;this[_0x194b11(0x2ec)]['clear']();const _0x38756d=this[_0x194b11(0x5d9)]();!isNaN(_0x38756d)&&this[_0x194b11(0x7a0)]();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x44ae36(0x137)]=Object[_0x44ae36(0x318)](Sprite_Name['prototype']),Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Sprite_EnemyName,Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(){const _0x5aad8d=_0x44ae36;Sprite_Name[_0x5aad8d(0x137)][_0x5aad8d(0x58b)]['call'](this),this[_0x5aad8d(0xa76)]();},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x443)]=function(){const _0x344654=_0x44ae36;Sprite_Name[_0x344654(0x137)]['initMembers'][_0x344654(0x689)](this),this[_0x344654(0x7b5)]=0x0,this[_0x344654(0xa79)]=null,this[_0x344654(0x792)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x44ae36(0xa76)]=function(){const _0x548594=_0x44ae36;VisuMZ['BattleCore'][_0x548594(0xa08)][_0x548594(0x2e0)][_0x548594(0xa81)]&&(this[_0x548594(0x313)]=new Sprite_StateIcon(),this['addChild'](this[_0x548594(0x313)]));},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x5be)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xda)]=function(){const _0x5ab966=_0x44ae36;return this[_0x5ab966(0x8a9)]=this[_0x5ab966(0x8a9)]||Window_Base[_0x5ab966(0x137)][_0x5ab966(0xb7b)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x44ae36(0x137)]['fontSize']=function(){const _0x4f001c=_0x44ae36;return VisuMZ[_0x4f001c(0x851)][_0x4f001c(0xa08)][_0x4f001c(0x2e0)][_0x4f001c(0x12e)]||$gameSystem[_0x4f001c(0x2f4)]();},Sprite_EnemyName[_0x44ae36(0x137)]['linkSprite']=function(_0x4ee58b){const _0x1839de=_0x44ae36;this[_0x1839de(0xa79)]=_0x4ee58b;},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x5f4447=_0x44ae36;Sprite_Name['prototype'][_0x5f4447(0xa8a)][_0x5f4447(0x689)](this),this[_0x5f4447(0x28b)](),this['updatePosition'](),this[_0x5f4447(0x308)](),this[_0x5f4447(0x462)]();},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x118)]=function(){const _0x24d6a6=_0x44ae36;this[_0x24d6a6(0x842)]=undefined;const _0xd9e0ed=this[_0x24d6a6(0x674)](),_0x5594cb=this['bitmapWidth'](),_0x11a9e8=Window_Base['prototype'][_0x24d6a6(0xb7b)]();this[_0x24d6a6(0x26b)](),this[_0x24d6a6(0x2ec)][_0x24d6a6(0x87b)](),this['bitmap'][_0x24d6a6(0xf3)](_0xd9e0ed,0x0,0x0,_0x5594cb,_0x11a9e8,_0x24d6a6(0x4e2));},Sprite_EnemyName[_0x44ae36(0x137)]['updateLink']=function(){const _0x70fc6b=_0x44ae36;if(!this[_0x70fc6b(0xa79)])return;this['_battler']!==this[_0x70fc6b(0xa79)][_0x70fc6b(0x93d)]&&this['setup'](this['_linkedSprite'][_0x70fc6b(0x93d)]);},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xbc3)]=function(){const _0x477d7a=_0x44ae36;if(!this[_0x477d7a(0xa79)])return;this[_0x477d7a(0x8a9)]=this[_0x477d7a(0x8a9)]||Window_Base[_0x477d7a(0x137)]['lineHeight'](),this['x']=Math[_0x477d7a(0x875)](this[_0x477d7a(0xa79)][_0x477d7a(0x358)]),this['y']=Math['round'](this[_0x477d7a(0xa79)][_0x477d7a(0x5b5)]-this[_0x477d7a(0x8a9)]*0.5);const _0x35a36c=VisuMZ[_0x477d7a(0x851)][_0x477d7a(0xa08)][_0x477d7a(0x2e0)];this['x']+=Math[_0x477d7a(0x875)](_0x35a36c[_0x477d7a(0x13d)]||0x0),this['y']+=Math[_0x477d7a(0x875)](_0x35a36c[_0x477d7a(0x21c)]||0x0);},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x308)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x953)]=function(){const _0x26019e=_0x44ae36;if(!this[_0x26019e(0x313)])return;this[_0x26019e(0x93d)]!==this[_0x26019e(0x313)][_0x26019e(0x93d)]&&this['_stateIconSprite'][_0x26019e(0x93c)](this[_0x26019e(0x93d)]);const _0x389bbb=this[_0x26019e(0x52d)]();this[_0x26019e(0x8a9)]=this[_0x26019e(0x8a9)]||Window_Base[_0x26019e(0x137)][_0x26019e(0xb7b)](),this['_stateIconSprite']['x']=Math[_0x26019e(0x875)]((_0x389bbb+ImageManager[_0x26019e(0xb8f)])/0x2)+0x8,this[_0x26019e(0x313)]['y']=this[_0x26019e(0x8a9)]/0x2;const _0x15a7ef=VisuMZ['BattleCore'][_0x26019e(0xa08)][_0x26019e(0x2e0)];this[_0x26019e(0x313)]['x']+=_0x15a7ef[_0x26019e(0x392)]||0x0,this['_stateIconSprite']['y']+=_0x15a7ef[_0x26019e(0x213)]||0x0;},Sprite_EnemyName[_0x44ae36(0x137)]['updateOpacity']=function(){const _0x55f9dd=_0x44ae36,_0x1d4737=this[_0x55f9dd(0xbab)]();if(_0x1d4737&&this['opacity']<0xff)this[_0x55f9dd(0x7b5)]+=0x10;else!_0x1d4737&&this[_0x55f9dd(0x7b5)]>0x0&&(this[_0x55f9dd(0x7b5)]-=0x10);},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xbab)]=function(){const _0x1a4c17=_0x44ae36;if(this[_0x1a4c17(0x181)]())return![];else{if(!this[_0x1a4c17(0x93d)])return![];else{if(!this['_battler'][_0x1a4c17(0x4ce)]())return![];else{if(this[_0x1a4c17(0x370)]())return!![];else{if(this[_0x1a4c17(0x93d)]['isDead']())return![];else{if(this['isBattlerTargeted']())return!![];else{if(this[_0x1a4c17(0x11d)]())return!![];else{if(this[_0x1a4c17(0x617)]())return!![];else{if(this[_0x1a4c17(0xa42)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x370)]=function(){const _0x433b97=_0x44ae36;return this[_0x433b97(0x93d)]&&this['_battler']['isNameTemporarilyVisible']();},Sprite_EnemyName['prototype'][_0x44ae36(0x181)]=function(){const _0x1388d7=_0x44ae36;return VisuMZ[_0x1388d7(0x851)][_0x1388d7(0xa08)][_0x1388d7(0x2e0)]['NameAlwaysHidden'];},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x8c3)]=function(){const _0x4e0b4f=_0x44ae36;if(!VisuMZ[_0x4e0b4f(0x851)][_0x4e0b4f(0xa08)]['Enemy'][_0x4e0b4f(0x12a)])return![];if(BattleManager['isInputting']()&&!BattleManager[_0x4e0b4f(0x4f9)]())return![];return this[_0x4e0b4f(0x93d)]&&BattleManager[_0x4e0b4f(0xb62)]&&BattleManager[_0x4e0b4f(0x955)]['includes'](this[_0x4e0b4f(0x93d)]);},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x11d)]=function(){return![];},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x617)]=function(){const _0x5690d7=_0x44ae36;return VisuMZ[_0x5690d7(0x851)]['Settings']['Enemy'][_0x5690d7(0xb3e)];},Sprite_EnemyName['prototype'][_0x44ae36(0xa42)]=function(){const _0x2295d4=_0x44ae36;return VisuMZ[_0x2295d4(0x851)][_0x2295d4(0xa08)][_0x2295d4(0x2e0)][_0x2295d4(0x5bc)]?this[_0x2295d4(0x93d)]['isSelected']():SceneManager[_0x2295d4(0x97d)][_0x2295d4(0x9bc)]&&SceneManager[_0x2295d4(0x97d)][_0x2295d4(0x9bc)]['active']&&SceneManager['_scene']['_enemyWindow'][_0x2295d4(0xea)]['includes'](this[_0x2295d4(0x93d)]);},Sprite_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x52d)]=function(){const _0x6c2095=_0x44ae36;if(!this[_0x6c2095(0x93d)])return 0x0;if(this[_0x6c2095(0x842)])return this['_cacheTextWidth'];const _0x545a5d=this['name']();return this[_0x6c2095(0x26b)](),this[_0x6c2095(0x842)]=this[_0x6c2095(0x2ec)][_0x6c2095(0x76e)](_0x545a5d)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x33e)]=Sprite_Battleback[_0x44ae36(0x137)][_0x44ae36(0x723)],Sprite_Battleback[_0x44ae36(0x137)]['adjustPosition']=function(){const _0x5c7e2b=_0x44ae36,_0x2f60c4=VisuMZ[_0x5c7e2b(0x851)]['Settings'][_0x5c7e2b(0x1ec)];if(!_0x2f60c4)return VisuMZ[_0x5c7e2b(0x851)]['Sprite_Battleback_adjustPosition']['call'](this);const _0x16596d=String(_0x2f60c4[_0x5c7e2b(0x6f1)])||'MZ';switch(_0x16596d){case'MZ':VisuMZ['BattleCore'][_0x5c7e2b(0x33e)][_0x5c7e2b(0x689)](this);break;case'1:1':this['adjustPosition_1for1']();break;case _0x5c7e2b(0x7a8):this[_0x5c7e2b(0x1b2)]();break;case _0x5c7e2b(0x9c5):this[_0x5c7e2b(0x567)]();break;case _0x5c7e2b(0x4ff):this[_0x5c7e2b(0x9d7)]();break;}},Sprite_Battleback[_0x44ae36(0x137)][_0x44ae36(0xa87)]=function(){const _0x2dc962=_0x44ae36,_0xf755e=VisuMZ[_0x2dc962(0x851)][_0x2dc962(0xa08)][_0x2dc962(0x1ec)];if(_0xf755e&&_0xf755e[_0x2dc962(0x434)])return _0xf755e[_0x2dc962(0x434)][_0x2dc962(0x689)](this);this['width']=Graphics[_0x2dc962(0xa20)],this['height']=Graphics['height'];const _0x356716=0x1;this[_0x2dc962(0x497)]['x']=_0x356716,this[_0x2dc962(0x497)]['y']=_0x356716,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x44ae36(0x137)]['adjustPosition_ScaleToFit']=function(){const _0x595db6=_0x44ae36,_0x45a963=VisuMZ[_0x595db6(0x851)][_0x595db6(0xa08)]['BattlebackScale'];if(_0x45a963&&_0x45a963[_0x595db6(0xba2)])return _0x45a963['jsScaleToFit'][_0x595db6(0x689)](this);this[_0x595db6(0xa20)]=Graphics[_0x595db6(0xa20)],this['height']=Graphics[_0x595db6(0x745)];const _0x15ed23=this[_0x595db6(0xa20)]/this[_0x595db6(0x2ec)][_0x595db6(0xa20)],_0x365261=this[_0x595db6(0x745)]/this[_0x595db6(0x2ec)][_0x595db6(0x745)],_0x25cbd4=Math[_0x595db6(0x131)](_0x15ed23,_0x365261);this[_0x595db6(0x497)]['x']=_0x25cbd4,this['scale']['y']=_0x25cbd4,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x595db6(0x745)]-this['height'];},Sprite_Battleback[_0x44ae36(0x137)][_0x44ae36(0x567)]=function(){const _0x36d4cd=_0x44ae36,_0x29b92e=VisuMZ[_0x36d4cd(0x851)][_0x36d4cd(0xa08)][_0x36d4cd(0x1ec)];if(_0x29b92e&&_0x29b92e['jsScaleDown'])return _0x29b92e[_0x36d4cd(0x663)][_0x36d4cd(0x689)](this);this[_0x36d4cd(0xa20)]=Graphics['width'],this[_0x36d4cd(0x745)]=Graphics[_0x36d4cd(0x745)];const _0x109420=Math['min'](0x1,this['width']/this[_0x36d4cd(0x2ec)][_0x36d4cd(0xa20)]),_0x24f962=Math[_0x36d4cd(0x920)](0x1,this['height']/this[_0x36d4cd(0x2ec)][_0x36d4cd(0x745)]),_0x3bdea1=Math[_0x36d4cd(0x131)](_0x109420,_0x24f962);this[_0x36d4cd(0x497)]['x']=_0x3bdea1,this[_0x36d4cd(0x497)]['y']=_0x3bdea1,this['x']=(Graphics[_0x36d4cd(0xa20)]-this[_0x36d4cd(0xa20)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback[_0x44ae36(0x137)][_0x44ae36(0x9d7)]=function(){const _0x2b0bee=_0x44ae36,_0x2dec8e=VisuMZ[_0x2b0bee(0x851)][_0x2b0bee(0xa08)][_0x2b0bee(0x1ec)];if(_0x2dec8e&&_0x2dec8e[_0x2b0bee(0x166)])return _0x2dec8e['jsScaleUp'][_0x2b0bee(0x689)](this);this[_0x2b0bee(0xa20)]=Graphics[_0x2b0bee(0xa20)],this['height']=Graphics[_0x2b0bee(0x745)];const _0x22d328=Math[_0x2b0bee(0x131)](0x1,this[_0x2b0bee(0xa20)]/this[_0x2b0bee(0x2ec)]['width']),_0x4e39c7=Math[_0x2b0bee(0x131)](0x1,this[_0x2b0bee(0x745)]/this['bitmap'][_0x2b0bee(0x745)]),_0x121f1b=Math[_0x2b0bee(0x131)](_0x22d328,_0x4e39c7);this['scale']['x']=_0x121f1b,this[_0x2b0bee(0x497)]['y']=_0x121f1b,this['x']=(Graphics[_0x2b0bee(0xa20)]-this[_0x2b0bee(0xa20)])/0x2,this['y']=Graphics[_0x2b0bee(0x745)]-this[_0x2b0bee(0x745)];},Spriteset_Battle[_0x44ae36(0x9ed)]=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x844)][_0x44ae36(0xa3b)]??!![],Spriteset_Battle[_0x44ae36(0x137)]['isFlipped']=function(){const _0x5d0645=_0x44ae36;if(!$gameSystem[_0x5d0645(0x628)]())return![];return![];},Spriteset_Battle[_0x44ae36(0x137)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x44ae36(0x137)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x80f)]=Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xae0)],Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xae0)]=function(){const _0x5f3bfd=_0x44ae36;VisuMZ[_0x5f3bfd(0x851)][_0x5f3bfd(0x80f)][_0x5f3bfd(0x689)](this),this[_0x5f3bfd(0xaa6)](),this[_0x5f3bfd(0x3e6)]();},VisuMZ[_0x44ae36(0x851)]['Spriteset_Battle_update']=Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xa8a)],Spriteset_Battle[_0x44ae36(0x137)]['update']=function(){const _0x438781=_0x44ae36;VisuMZ[_0x438781(0x851)]['Spriteset_Battle_update']['call'](this),this[_0x438781(0x68b)](),this[_0x438781(0x222)](),this[_0x438781(0xac5)](),this[_0x438781(0x68e)]();},Spriteset_Battle[_0x44ae36(0x137)]['createWeather']=function(){const _0x59085c=_0x44ae36;this[_0x59085c(0x40f)]=new Weather(),this[_0x59085c(0xbba)][_0x59085c(0x33d)](this[_0x59085c(0x40f)]);},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xac5)]=function(){const _0x20dade=_0x44ae36;this[_0x20dade(0x40f)][_0x20dade(0x4d5)]=$gameScreen['weatherType'](),this['_weather'][_0x20dade(0x372)]=$gameScreen[_0x20dade(0x8f4)]();},Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0x61d)]=function(_0x3cea4d){const _0x4e9234=_0x44ae36;$gameScreen[_0x4e9234(0x81a)](_0x3cea4d[0x0],_0x3cea4d[0x1],_0x3cea4d[0x2]);if(_0x3cea4d[0x3])this[_0x4e9234(0x26f)](_0x3cea4d[0x2]);return!![];},VisuMZ[_0x44ae36(0x851)]['Game_Interpreter_command283']=Game_Interpreter['prototype'][_0x44ae36(0xaad)],Game_Interpreter[_0x44ae36(0x137)][_0x44ae36(0xaad)]=function(_0x5089cd){const _0x484f64=_0x44ae36;return SceneManager[_0x484f64(0xb75)]()?(SceneManager[_0x484f64(0x97d)][_0x484f64(0x4b4)][_0x484f64(0xadd)](_0x5089cd[0x0],_0x5089cd[0x1]),!![]):VisuMZ[_0x484f64(0x851)][_0x484f64(0x719)][_0x484f64(0x689)](this,_0x5089cd);},Spriteset_Battle['prototype'][_0x44ae36(0x760)]=function(_0x8bbd73,_0x2c17a1){const _0x4ff0be=_0x44ae36;_0x8bbd73[_0x4ff0be(0x2ec)]=_0x2c17a1;},Spriteset_Battle[_0x44ae36(0x137)]['changeBattlebacks']=function(_0x5df39e,_0x5911c2){const _0x3b1631=_0x44ae36;_0x5df39e=_0x5df39e||'',_0x5911c2=_0x5911c2||'';_0x5df39e===''&&_0x5911c2===''&&(_0x5df39e=this[_0x3b1631(0x3b9)][_0x3b1631(0x3d3)](),_0x5911c2=this[_0x3b1631(0x378)][_0x3b1631(0x121)]());const _0x220895=ImageManager[_0x3b1631(0x873)](_0x5df39e),_0x39b37f=ImageManager[_0x3b1631(0x4e9)](_0x5911c2);_0x220895[_0x3b1631(0x729)](this[_0x3b1631(0x381)][_0x3b1631(0x7ab)](this,this[_0x3b1631(0x3b9)],this[_0x3b1631(0x378)],_0x220895,_0x39b37f));},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x381)]=function(_0x1c0f9f,_0x2a296e,_0xe2110a,_0x501f95){const _0x106315=_0x44ae36;_0x501f95['addLoadListener'](this[_0x106315(0x120)]['bind'](this,_0x1c0f9f,_0x2a296e,_0xe2110a,_0x501f95));},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x120)]=function(_0x26e458,_0x20eeb6,_0x6c0b58,_0x426696){const _0x15db4c=_0x44ae36;_0x26e458['bitmap']=_0x6c0b58,_0x20eeb6[_0x15db4c(0x2ec)]=_0x426696,_0x26e458[_0x15db4c(0x723)](),_0x20eeb6[_0x15db4c(0x723)]();},VisuMZ['BattleCore'][_0x44ae36(0x6be)]=Spriteset_Battle['prototype'][_0x44ae36(0x6e0)],Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x6e0)]=function(){const _0x5881cc=_0x44ae36;VisuMZ[_0x5881cc(0x851)][_0x5881cc(0x6be)][_0x5881cc(0x689)](this),this[_0x5881cc(0x1e9)]();},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x1e9)]=function(){const _0x52faf2=_0x44ae36;this[_0x52faf2(0x69b)](),this['createUIContainer'](),this['createAnimationContainer'](),this[_0x52faf2(0x3c2)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x69b)]=function(){const _0x297bef=_0x44ae36;this[_0x297bef(0x9b4)]=new Sprite(),this['_battleField'][_0x297bef(0x33d)](this[_0x297bef(0x9b4)]);},Spriteset_Battle['prototype'][_0x44ae36(0x3e1)]=function(){const _0x190a96=_0x44ae36;this[_0x190a96(0x364)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x190a96(0x33d)](this[_0x190a96(0x364)]):this[_0x190a96(0xbba)][_0x190a96(0x33d)](this[_0x190a96(0x364)]);},Spriteset_Battle[_0x44ae36(0x137)]['createDamageContainer']=function(){const _0x190491=_0x44ae36;this[_0x190491(0x542)]=new Sprite(),this['_damageContainer']['x']=this['_battleField']['x'],this[_0x190491(0x542)]['y']=this['_battleField']['y'],this[_0x190491(0x33d)](this[_0x190491(0x542)]);},Spriteset_Battle['prototype'][_0x44ae36(0x70e)]=function(){const _0x1e8160=_0x44ae36;if(!this[_0x1e8160(0x9d5)]())return;this[_0x1e8160(0x9b4)][_0x1e8160(0x497)]['x']=-0x1,this[_0x1e8160(0x9b4)]['x']=this[_0x1e8160(0xbba)][_0x1e8160(0xa20)],this[_0x1e8160(0x8ff)]['scale']['x']=-0x1,this[_0x1e8160(0x8ff)]['x']=this[_0x1e8160(0xbba)][_0x1e8160(0xa20)],this[_0x1e8160(0x364)]['scale']['x']=-0x1,this['_animationContainer']['x']=this['_battleField'][_0x1e8160(0xa20)],this[_0x1e8160(0x542)][_0x1e8160(0x497)]['x']=-0x1,this[_0x1e8160(0x542)]['x']=this[_0x1e8160(0xbba)]['x']+this[_0x1e8160(0xbba)][_0x1e8160(0xa20)];},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x508)]=function(){const _0x146f93=_0x44ae36;Imported[_0x146f93(0x6c8)]&&this[_0x146f93(0x829)]()&&this['repositionEnemiesByResolution']();const _0x3a7644=$gameTroop[_0x146f93(0xb30)](),_0x397a2c=[];for(const _0x4387e1 of _0x3a7644){_0x397a2c[_0x146f93(0xa04)](new Sprite_Enemy(_0x4387e1));}_0x397a2c[_0x146f93(0x7be)](this['compareEnemySprite'][_0x146f93(0x7ab)](this));for(const _0x431907 of _0x397a2c){this[_0x146f93(0x9b4)][_0x146f93(0x33d)](_0x431907);}this[_0x146f93(0x8fd)]=_0x397a2c;},Spriteset_Battle['prototype']['createActors']=function(){const _0x3062cb=_0x44ae36;this[_0x3062cb(0x28c)]=[];for(let _0x5abbae=0x0;_0x5abbae<$gameParty[_0x3062cb(0x38c)]();_0x5abbae++){const _0x49eff9=$gameParty[_0x3062cb(0xb63)]()[_0x5abbae],_0x3e7c07=new Sprite_Actor();_0x3e7c07[_0x3062cb(0xaef)](_0x49eff9),_0x3e7c07[_0x3062cb(0x37e)](_0x49eff9),_0x3e7c07[_0x3062cb(0xa8a)](),this[_0x3062cb(0x28c)][_0x3062cb(0xa04)](_0x3e7c07),this[_0x3062cb(0x9b4)][_0x3062cb(0x33d)](_0x3e7c07);}},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x3c6)]=function(_0x5bf0e6,_0x458b31,_0x17d080,_0xe0482c){const _0x2e36e3=_0x44ae36,_0x1467c3=this[_0x2e36e3(0x7f6)](_0x458b31),_0x500dfe=new(_0x1467c3?Sprite_AnimationMV:Sprite_Animation)(),_0x5e8dc0=this[_0x2e36e3(0x907)](_0x5bf0e6);this[_0x2e36e3(0xe9)](_0x5bf0e6[0x0])&&(_0x17d080=!_0x17d080),_0x500dfe['targetObjects']=_0x5bf0e6,_0x500dfe[_0x2e36e3(0x93c)](_0x5e8dc0,_0x458b31,_0x17d080,_0xe0482c),this[_0x2e36e3(0x958)](_0x500dfe);},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x958)]=function(_0x139ee6){const _0x2c07a6=_0x44ae36;this['isAnimationShownOnBattlePortrait'](_0x139ee6)?(this[_0x2c07a6(0x277)]()['addChild'](_0x139ee6),_0x139ee6['battleStatusSprite']=!![]):(this[_0x2c07a6(0x364)][_0x2c07a6(0x33d)](_0x139ee6),Spriteset_Battle['ANTI_TINT_UI']&&(this[_0x2c07a6(0x364)]['x']=this[_0x2c07a6(0x253)]['x'],this[_0x2c07a6(0x364)]['y']=this['_effectsContainer']['y'])),this[_0x2c07a6(0x302)]['push'](_0x139ee6);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x596562){const _0x410378=_0x44ae36;if(!_0x596562)return![];if(!_0x596562[_0x410378(0x66a)])return![];if(!_0x596562[_0x410378(0x2b1)][0x0])return![];if(_0x596562['targetObjects'][0x0][_0x410378(0x30c)]&&!_0x596562[_0x410378(0x2b1)][0x0][_0x410378(0x30c)]())return![];if($gameSystem[_0x410378(0x628)]())return![];if(!this[_0x410378(0x277)]())return![];if(_0x596562[_0x410378(0x6ea)]===Sprite_Animation){const _0x4aa668=VisuMZ[_0x410378(0x851)][_0x410378(0xa08)]['Actor'];_0x4aa668[_0x410378(0x2e3)]=_0x4aa668['FvAniEachTarget']??!![];if(_0x596562['_animation'][_0x410378(0x1cb)]===0x0&&!_0x4aa668[_0x410378(0x2e3)])return![];_0x4aa668['FvAniCenterAll']=_0x4aa668[_0x410378(0x23c)]??!![];if(_0x596562[_0x410378(0x66a)][_0x410378(0x1cb)]===0x1&&!_0x4aa668[_0x410378(0x23c)])return![];_0x4aa668[_0x410378(0x982)]=_0x4aa668[_0x410378(0x982)]??![];if(_0x596562[_0x410378(0x66a)][_0x410378(0x1cb)]===0x2&&!_0x4aa668[_0x410378(0x982)])return![];}else{if(_0x596562[_0x410378(0x6ea)]===Sprite_AnimationMV){if(_0x596562[_0x410378(0x66a)][_0x410378(0x47c)]===0x3)return![];}}return!![];const _0x551322=Window_BattleStatus[_0x410378(0x137)]['battleLayoutStyle']();return['xp','portrait']['contains'](_0x551322);},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x277)]=function(){const _0x58293c=_0x44ae36;if(!SceneManager[_0x58293c(0x97d)])return null;if(!SceneManager['_scene'][_0x58293c(0x154)])return null;if(!SceneManager['_scene'][_0x58293c(0x154)][_0x58293c(0x253)])return null;return SceneManager['_scene'][_0x58293c(0x154)][_0x58293c(0x253)];},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x84a)]=function(_0x225566){const _0x4db7fa=_0x44ae36;this['removeAnimationFromContainer'](_0x225566);for(const _0xe761c of _0x225566[_0x4db7fa(0x2b1)]){_0xe761c[_0x4db7fa(0x608)]&&_0xe761c[_0x4db7fa(0x608)]();}_0x225566[_0x4db7fa(0x492)]();},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x3de)]=function(_0x45fb4f){const _0x56d1b0=_0x44ae36;this[_0x56d1b0(0xac4)](_0x45fb4f)?this['battleStatusWindowAnimationContainer']()[_0x56d1b0(0x838)](_0x45fb4f):this[_0x56d1b0(0x364)]['removeChild'](_0x45fb4f);this[_0x56d1b0(0x253)][_0x56d1b0(0x838)](_0x45fb4f),this[_0x56d1b0(0x364)]['removeChild'](_0x45fb4f),this[_0x56d1b0(0x302)][_0x56d1b0(0xac9)](_0x45fb4f);if(this[_0x56d1b0(0x872)])this[_0x56d1b0(0x872)][_0x56d1b0(0xac9)](_0x45fb4f);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x43d)]=Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x251)],Spriteset_Battle['prototype']['updateActors']=function(){const _0xe3d8a5=_0x44ae36;VisuMZ[_0xe3d8a5(0x851)][_0xe3d8a5(0x43d)][_0xe3d8a5(0x689)](this),this[_0xe3d8a5(0x68b)]();},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x68b)]=function(){const _0x44ffbd=_0x44ae36;this['_battlerContainer'][_0x44ffbd(0x8ad)][_0x44ffbd(0x7be)](this[_0x44ffbd(0x254)]['bind'](this)),this[_0x44ffbd(0x4bc)]();if(!this[_0x44ffbd(0x9b4)])return;this[_0x44ffbd(0x9b4)]['opacity']=this[_0x44ffbd(0x128)]();},Spriteset_Battle['prototype']['compareBattlerSprites']=function(_0x19c545,_0x21e507){const _0x372795=_0x44ae36;if(VisuMZ[_0x372795(0x851)][_0x372795(0xa08)][_0x372795(0x908)][_0x372795(0x3b2)]){if(_0x19c545[_0x372795(0x93d)]&&_0x21e507[_0x372795(0x93d)]){if(_0x19c545[_0x372795(0x93d)]['isActor']()&&_0x21e507[_0x372795(0x93d)]['isEnemy']())return 0x1;else{if(_0x21e507[_0x372795(0x93d)][_0x372795(0x30c)]()&&_0x19c545[_0x372795(0x93d)][_0x372795(0x2fe)]())return-0x1;}}}return _0x19c545['_baseY']!==_0x21e507[_0x372795(0x5b5)]?_0x19c545[_0x372795(0x5b5)]-_0x21e507[_0x372795(0x5b5)]:_0x21e507[_0x372795(0x81e)]-_0x19c545[_0x372795(0x81e)];},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x4bc)]=function(){const _0xc1220e=_0x44ae36;if(!VisuMZ['BattleCore'][_0xc1220e(0xa08)][_0xc1220e(0x908)][_0xc1220e(0xaa4)])return;const _0x34bc7e=BattleManager['_subject'];if(_0x34bc7e){if(_0x34bc7e[_0xc1220e(0x30c)]()&&!$gameSystem['isSideView']())return;if(_0x34bc7e===BattleManager[_0xc1220e(0x2f8)]())return;const _0x44177a=_0x34bc7e[_0xc1220e(0x7ef)]();if(_0x44177a&&_0x34bc7e[_0xc1220e(0x30c)]())this['_battlerContainer']['addChild'](_0x44177a);}},Spriteset_Battle['prototype'][_0x44ae36(0x490)]=function(){const _0x5ca8b4=_0x44ae36;for(const _0x27b1ae of $gameParty[_0x5ca8b4(0xbad)]()){if(!_0x27b1ae)continue;if(!_0x27b1ae['battler']())continue;_0x27b1ae[_0x5ca8b4(0x7ef)]()[_0x5ca8b4(0x145)]=!![],_0x27b1ae['battler']()[_0x5ca8b4(0xcf)]();}},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xb25)]=function(){const _0x32bb3e=_0x44ae36;this[_0x32bb3e(0x8ff)]=new Sprite(),Spriteset_Battle[_0x32bb3e(0x9ed)]?this[_0x32bb3e(0x33d)](this[_0x32bb3e(0x8ff)]):this[_0x32bb3e(0xbba)][_0x32bb3e(0x33d)](this['_uiContainer']),SceneManager[_0x32bb3e(0x97d)]['_uiContainer']=this['_uiContainer'];},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x3e6)]=function(){const _0x24be89=_0x44ae36;if(VisuMZ['BattleCore'][_0x24be89(0xa08)][_0x24be89(0x2e0)]['NameLegacy'])return;this[_0x24be89(0x6c7)]=new Sprite(),BattleManager[_0x24be89(0x73f)](this[_0x24be89(0x6c7)]);for(const _0x3c218e of this[_0x24be89(0x8fd)]){const _0x57805a=new Sprite_EnemyName();this['_enemyNameContainer']['addChild'](_0x57805a),_0x57805a[_0x24be89(0x7c5)](_0x3c218e);}},Spriteset_Battle[_0x44ae36(0x137)]['updateUiContainerPosition']=function(){const _0x185891=_0x44ae36;if(!this[_0x185891(0x542)])return;if(!this[_0x185891(0x8ff)])return;const _0x18bfd4=Spriteset_Battle[_0x185891(0x9ed)]?this[_0x185891(0x542)]['x']:0x0,_0x5b5406=Spriteset_Battle[_0x185891(0x9ed)]?this[_0x185891(0x542)]['y']:0x0,_0x40b891=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['x']:0x0,_0x2b6871=Imported[_0x185891(0x85a)]?this[_0x185891(0xbba)]['y']:0x0;this['_uiContainer']['x']=_0x18bfd4+_0x40b891,this[_0x185891(0x8ff)]['y']=_0x5b5406+_0x2b6871;},BattleManager[_0x44ae36(0x73f)]=function(_0x2afb8a){const _0x3d55e2=_0x44ae36;if(!SceneManager[_0x3d55e2(0x97d)]['_uiContainer'])return;SceneManager['_scene']['_uiContainer']['addChild'](_0x2afb8a);},BattleManager[_0x44ae36(0x915)]=function(_0x38205d){const _0x2f253b=_0x44ae36;if(!SceneManager[_0x2f253b(0x97d)][_0x2f253b(0x8ff)])return;SceneManager[_0x2f253b(0x97d)]['_uiContainer']['removeChild'](_0x38205d);},Spriteset_Battle['prototype'][_0x44ae36(0x128)]=function(){return 0xff;},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xa5f)]=function(){return![];},Spriteset_Battle['prototype'][_0x44ae36(0xa70)]=function(){const _0x26c407=_0x44ae36;return this[_0x26c407(0x73a)]()[_0x26c407(0x39c)](_0x1cc8c7=>_0x1cc8c7['isFloating']());},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x885)]=function(){const _0x250f4f=_0x44ae36;return this[_0x250f4f(0x73a)]()[_0x250f4f(0x39c)](_0x569c1f=>_0x569c1f[_0x250f4f(0xe0)]());},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0x418)]=function(){const _0x1edccc=_0x44ae36;return this[_0x1edccc(0x73a)]()[_0x1edccc(0x39c)](_0x3ad1d6=>_0x3ad1d6[_0x1edccc(0x2d3)]());},Spriteset_Battle['prototype'][_0x44ae36(0x27a)]=function(){const _0x3f8fc8=_0x44ae36;return this[_0x3f8fc8(0x73a)]()[_0x3f8fc8(0x39c)](_0x2362fc=>_0x2362fc[_0x3f8fc8(0x575)]());},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xa6f)]=function(){const _0x242cf7=_0x44ae36;return this[_0x242cf7(0x73a)]()[_0x242cf7(0x39c)](_0x2404d0=>_0x2404d0[_0x242cf7(0x3dc)]());},Spriteset_Battle[_0x44ae36(0x137)][_0x44ae36(0xaac)]=function(){const _0x2ba022=_0x44ae36;return this[_0x2ba022(0x73a)]()['some'](_0x5a1358=>_0x5a1358[_0x2ba022(0x8b3)]());},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa69)]=Window_ItemList[_0x44ae36(0x137)][_0x44ae36(0x83d)],Window_ItemList[_0x44ae36(0x137)][_0x44ae36(0x83d)]=function(){const _0x24ce9b=_0x44ae36;return SceneManager['isSceneBattle']()?SceneManager['_scene'][_0x24ce9b(0x36d)]()===_0x24ce9b(0x449)?VisuMZ['BattleCore']['Settings']['BattleLayout']['SkillItemBorderCols']:VisuMZ[_0x24ce9b(0x851)][_0x24ce9b(0xa08)][_0x24ce9b(0x844)][_0x24ce9b(0x9c0)]:VisuMZ[_0x24ce9b(0x851)][_0x24ce9b(0xa69)][_0x24ce9b(0x689)](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x819)]=Window_SkillList[_0x44ae36(0x137)][_0x44ae36(0x83d)],Window_SkillList[_0x44ae36(0x137)]['maxCols']=function(){const _0x194f5d=_0x44ae36;return SceneManager[_0x194f5d(0xb75)]()?SceneManager[_0x194f5d(0x97d)]['battleLayoutStyle']()===_0x194f5d(0x449)?VisuMZ[_0x194f5d(0x851)][_0x194f5d(0xa08)][_0x194f5d(0x844)][_0x194f5d(0x412)]:VisuMZ['BattleCore']['Settings'][_0x194f5d(0x844)][_0x194f5d(0x9c0)]:VisuMZ[_0x194f5d(0x851)][_0x194f5d(0x819)][_0x194f5d(0x689)](this);},VisuMZ['BattleCore'][_0x44ae36(0x9c2)]=Window_Options['prototype'][_0x44ae36(0x7c4)],Window_Options[_0x44ae36(0x137)][_0x44ae36(0x7c4)]=function(){const _0x21be05=_0x44ae36;VisuMZ[_0x21be05(0x851)][_0x21be05(0x9c2)][_0x21be05(0x689)](this),this['addAutoBattleCommands'](),this[_0x21be05(0xae3)]();},Window_Options[_0x44ae36(0x137)][_0x44ae36(0x2cc)]=function(){const _0x4f35a0=_0x44ae36;VisuMZ[_0x4f35a0(0x851)][_0x4f35a0(0xa08)][_0x4f35a0(0xa30)][_0x4f35a0(0x5cb)]&&(this[_0x4f35a0(0xb2e)](),this[_0x4f35a0(0x5ca)]());},Window_Options[_0x44ae36(0x137)][_0x44ae36(0xae3)]=function(){const _0x11f467=_0x44ae36;if(!VisuMZ['BattleCore']['Settings'][_0x11f467(0x56f)][_0x11f467(0x21b)])return;const _0x1b17e2=TextManager[_0x11f467(0x8f5)],_0x4f2d5b='visualHpGauge';this[_0x11f467(0x967)](_0x1b17e2,_0x4f2d5b);},Window_Options[_0x44ae36(0x137)][_0x44ae36(0xb2e)]=function(){const _0x167103=_0x44ae36,_0xc9e626=TextManager[_0x167103(0x64a)],_0x27a9e8=_0x167103(0x59a);this[_0x167103(0x967)](_0xc9e626,_0x27a9e8);},Window_Options[_0x44ae36(0x137)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x3301ef=_0x44ae36,_0x6a3e3d=TextManager['autoBattleStyle'],_0x191505=_0x3301ef(0xe5);this[_0x3301ef(0x967)](_0x6a3e3d,_0x191505);},VisuMZ['BattleCore'][_0x44ae36(0x6ae)]=Window_Options[_0x44ae36(0x137)][_0x44ae36(0x2c8)],Window_Options['prototype'][_0x44ae36(0x2c8)]=function(_0x41f89d){const _0x54b66d=_0x44ae36,_0x5d58dc=this[_0x54b66d(0x1c6)](_0x41f89d);return _0x5d58dc===_0x54b66d(0xe5)?this[_0x54b66d(0xb3f)]():VisuMZ['BattleCore']['Window_Options_statusText'][_0x54b66d(0x689)](this,_0x41f89d);},Window_Options['prototype'][_0x44ae36(0xb3f)]=function(){const _0x4cf5f0=_0x44ae36,_0x19cf3b=VisuMZ[_0x4cf5f0(0x851)]['Settings'][_0x4cf5f0(0xa30)],_0x4163bf=this['getConfigValue'](_0x4cf5f0(0xe5));return _0x4163bf?_0x19cf3b[_0x4cf5f0(0x659)]:_0x19cf3b[_0x4cf5f0(0x31c)];},Window_ShopStatus[_0x44ae36(0x137)][_0x44ae36(0x658)]=function(){const _0x1b1e44=_0x44ae36,_0x1c907f=DataManager[_0x1b1e44(0x876)](this[_0x1b1e44(0x653)]),_0x2b3389=VisuMZ['DamageStyles'][_0x1c907f];if(!_0x2b3389)return this['getItemDamageAmountLabelOriginal']();const _0x3a6631=_0x1b1e44(0x782)[_0x1b1e44(0x4be)](this[_0x1b1e44(0x653)][_0x1b1e44(0x971)][_0x1b1e44(0x4d5)]),_0x2de7fc=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x1b1e44(0x653)][_0x1b1e44(0x971)][_0x1b1e44(0x4d5)]];return _0x2b3389[_0x3a6631][_0x1b1e44(0x4be)](_0x2de7fc);},Window_ShopStatus['prototype'][_0x44ae36(0x4de)]=function(){const _0x566092=_0x44ae36,_0x1357ae=DataManager[_0x566092(0x876)](this[_0x566092(0x653)]),_0x48b7de=VisuMZ[_0x566092(0x639)][_0x1357ae];if(!_0x48b7de)return this[_0x566092(0x9e4)]();return _0x48b7de[_0x566092(0x4bd)]['call'](this);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x7cf)]=Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x58b)],Window_PartyCommand[_0x44ae36(0x137)]['initialize']=function(_0x1c1f5a){const _0x59f208=_0x44ae36;VisuMZ[_0x59f208(0x851)][_0x59f208(0x7cf)][_0x59f208(0x689)](this,_0x1c1f5a),this[_0x59f208(0x49f)](_0x1c1f5a);},Window_PartyCommand['prototype']['createCommandNameWindow']=function(_0x50454d){const _0x2df682=_0x44ae36,_0x4bff3=new Rectangle(0x0,0x0,_0x50454d[_0x2df682(0xa20)],_0x50454d['height']);this[_0x2df682(0xb7d)]=new Window_Base(_0x4bff3),this[_0x2df682(0xb7d)][_0x2df682(0x7b5)]=0x0,this['addChild'](this[_0x2df682(0xb7d)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x15a)]=function(){const _0xca0da2=_0x44ae36;Window_Command[_0xca0da2(0x137)]['callUpdateHelp'][_0xca0da2(0x689)](this);if(this[_0xca0da2(0xb7d)])this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x44ae36(0x974)]=function(){const _0x52629b=_0x44ae36,_0x2148ce=this[_0x52629b(0xb7d)];_0x2148ce[_0x52629b(0x526)]['clear']();const _0x54b66b=this[_0x52629b(0x27b)](this[_0x52629b(0x8b4)]());if(_0x54b66b===_0x52629b(0x8e1)&&this[_0x52629b(0x6b9)]()>0x0){const _0x565c2a=this['itemLineRect'](this[_0x52629b(0x8b4)]());let _0x2ecf6d=this[_0x52629b(0x793)](this['index']());_0x2ecf6d=_0x2ecf6d[_0x52629b(0xae9)](/\\I\[(\d+)\]/gi,''),_0x2148ce['resetFontSettings'](),this[_0x52629b(0x24e)](_0x2ecf6d,_0x565c2a),this[_0x52629b(0x9cc)](_0x2ecf6d,_0x565c2a),this[_0x52629b(0x90a)](_0x2ecf6d,_0x565c2a);}},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x24e)]=function(_0x11a198,_0x350401){},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x9cc)]=function(_0x34f266,_0x205cc9){const _0x11a717=_0x44ae36,_0x24c6d1=this[_0x11a717(0xb7d)];_0x24c6d1[_0x11a717(0xf3)](_0x34f266,0x0,_0x205cc9['y'],_0x24c6d1[_0x11a717(0x7d6)],'center');},Window_PartyCommand[_0x44ae36(0x137)]['commandNameWindowCenter']=function(_0xe46ac8,_0x8e6d11){const _0x19917a=_0x44ae36,_0x9a8015=this[_0x19917a(0xb7d)],_0xac4b3f=$gameSystem[_0x19917a(0x564)](),_0x4d602b=_0x8e6d11['x']+Math['floor'](_0x8e6d11[_0x19917a(0xa20)]/0x2)+_0xac4b3f;_0x9a8015['x']=_0x9a8015[_0x19917a(0xa20)]/-0x2+_0x4d602b,_0x9a8015['y']=Math[_0x19917a(0xb78)](_0x8e6d11[_0x19917a(0x745)]/0x2);},Window_PartyCommand[_0x44ae36(0x137)]['makeCommandList']=function(){const _0x38a3b9=_0x44ae36;this[_0x38a3b9(0x592)](),this['addAutoBattleCommand'](),this[_0x38a3b9(0x532)](),this[_0x38a3b9(0x9ca)](),this['addOptionsCommand'](),this[_0x38a3b9(0x249)]();},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x592)]=function(){const _0x49b385=_0x44ae36,_0x117569=this[_0x49b385(0x22f)](),_0x312ada=VisuMZ['BattleCore'][_0x49b385(0xa08)][_0x49b385(0x8cd)][_0x49b385(0x4c8)],_0x14beff=_0x117569===_0x49b385(0x9fb)?TextManager[_0x49b385(0xb34)]:_0x49b385(0xee)[_0x49b385(0x4be)](_0x312ada,TextManager[_0x49b385(0xb34)]),_0x161cf2=this['isFightCommandEnabled']();this[_0x49b385(0x967)](_0x14beff,_0x49b385(0xb34),_0x161cf2);},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x44d)]=function(){return!![];},Window_PartyCommand[_0x44ae36(0x137)]['addAutoBattleCommand']=function(){const _0x35d7d6=_0x44ae36;if(!this[_0x35d7d6(0x3a4)]())return;const _0xa2a99f=this[_0x35d7d6(0x22f)](),_0x238945=VisuMZ['BattleCore'][_0x35d7d6(0xa08)][_0x35d7d6(0x8cd)][_0x35d7d6(0x485)],_0x1afaf1=_0xa2a99f===_0x35d7d6(0x9fb)?TextManager['autoBattle']:'\x5cI[%1]%2'[_0x35d7d6(0x4be)](_0x238945,TextManager['autoBattle']),_0x1d0d69=this[_0x35d7d6(0x1ff)]();this[_0x35d7d6(0x967)](_0x1afaf1,_0x35d7d6(0x90b),_0x1d0d69);},Window_PartyCommand[_0x44ae36(0x137)]['isAutoBattleCommandAdded']=function(){const _0xf654af=_0x44ae36;return VisuMZ['BattleCore'][_0xf654af(0xa08)][_0xf654af(0x8cd)][_0xf654af(0x757)];},Window_PartyCommand['prototype'][_0x44ae36(0x1ff)]=function(){return!![];},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x532)]=function(){},Window_PartyCommand[_0x44ae36(0x137)]['addStatusCommand']=function(){const _0x17721b=_0x44ae36,_0x5e1525=VisuMZ[_0x17721b(0x851)][_0x17721b(0xa08)][_0x17721b(0x8cd)][_0x17721b(0xbb9)]??!![];if(!_0x5e1525)return;const _0x49a4f8=this[_0x17721b(0x22f)](),_0x391f03=VisuMZ[_0x17721b(0x851)]['Settings']['InBattleStatus'][_0x17721b(0x389)]??0x57,_0x243f4e=_0x49a4f8===_0x17721b(0x9fb)?TextManager['status']:_0x17721b(0xee)['format'](_0x391f03,TextManager['status']),_0x344626=!![];this['addCommand'](_0x243f4e,'status',_0x344626);},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x6ff)]=function(){const _0x24c00b=_0x44ae36;if(!this[_0x24c00b(0x2c5)]())return;const _0x7f9f8f=this['commandStyle'](),_0x10e0b7=VisuMZ[_0x24c00b(0x851)][_0x24c00b(0xa08)][_0x24c00b(0x8cd)][_0x24c00b(0x4f8)],_0x122a83=_0x7f9f8f===_0x24c00b(0x9fb)?TextManager[_0x24c00b(0x4db)]:'\x5cI[%1]%2'[_0x24c00b(0x4be)](_0x10e0b7,TextManager[_0x24c00b(0x4db)]),_0x19ed2d=this['isOptionsCommandEnabled']();this['addCommand'](_0x122a83,_0x24c00b(0x4db),_0x19ed2d);},Window_PartyCommand['prototype'][_0x44ae36(0x2c5)]=function(){const _0x4ddd6c=_0x44ae36;return VisuMZ[_0x4ddd6c(0x851)]['Settings']['PartyCmd'][_0x4ddd6c(0x281)];},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x694)]=function(){return!![];},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x249)]=function(){const _0x2f39c2=_0x44ae36,_0x6880ee=this[_0x2f39c2(0x22f)](),_0x3dfa82=VisuMZ[_0x2f39c2(0x851)][_0x2f39c2(0xa08)][_0x2f39c2(0x8cd)][_0x2f39c2(0x764)],_0x522129=_0x6880ee===_0x2f39c2(0x9fb)?TextManager[_0x2f39c2(0x874)]:_0x2f39c2(0xee)[_0x2f39c2(0x4be)](_0x3dfa82,TextManager[_0x2f39c2(0x874)]),_0x1e8728=this[_0x2f39c2(0x400)]();this[_0x2f39c2(0x967)](_0x522129,_0x2f39c2(0x874),_0x1e8728);},Window_PartyCommand[_0x44ae36(0x137)]['isEscapeCommandEnabled']=function(){const _0x3daa88=_0x44ae36;return BattleManager[_0x3daa88(0x78e)]();},Window_PartyCommand['prototype'][_0x44ae36(0x654)]=function(){const _0x3d4a09=_0x44ae36;return VisuMZ[_0x3d4a09(0x851)][_0x3d4a09(0xa08)][_0x3d4a09(0x8cd)]['CmdTextAlign'];},Window_PartyCommand[_0x44ae36(0x137)]['drawItem']=function(_0x5c1309){const _0x3b249c=_0x44ae36,_0x4975df=this[_0x3b249c(0x27b)](_0x5c1309);if(_0x4975df==='iconText')this[_0x3b249c(0x394)](_0x5c1309);else _0x4975df===_0x3b249c(0x8e1)?this[_0x3b249c(0x8b7)](_0x5c1309):Window_Command[_0x3b249c(0x137)][_0x3b249c(0x607)][_0x3b249c(0x689)](this,_0x5c1309);},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x22f)]=function(){const _0xe76e83=_0x44ae36;return VisuMZ[_0xe76e83(0x851)]['Settings']['PartyCmd'][_0xe76e83(0x71b)];},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x27b)]=function(_0x413622){const _0x1b4f34=_0x44ae36;if(_0x413622<0x0)return _0x1b4f34(0x9fb);const _0x162300=this['commandStyle']();if(_0x162300!==_0x1b4f34(0xa9e))return _0x162300;else{if(this[_0x1b4f34(0x6b9)]()>0x0){const _0x5d80b0=this['commandName'](_0x413622);if(_0x5d80b0[_0x1b4f34(0x54f)](/\\I\[(\d+)\]/i)){const _0x1164ac=this[_0x1b4f34(0x8db)](_0x413622),_0x1a6f28=this[_0x1b4f34(0x1eb)](_0x5d80b0)[_0x1b4f34(0xa20)];return _0x1a6f28<=_0x1164ac[_0x1b4f34(0xa20)]?_0x1b4f34(0xce):'icon';}}}return'text';},Window_PartyCommand[_0x44ae36(0x137)]['drawItemStyleIconText']=function(_0x3c808b){const _0x354283=_0x44ae36,_0xc53f72=this[_0x354283(0x8db)](_0x3c808b),_0x128ea5=this[_0x354283(0x793)](_0x3c808b),_0x16c451=this[_0x354283(0x1eb)](_0x128ea5)[_0x354283(0xa20)];this[_0x354283(0xbaa)](this[_0x354283(0x41a)](_0x3c808b));const _0x38f589=this['itemTextAlign']();if(_0x38f589===_0x354283(0x657))this[_0x354283(0xb3c)](_0x128ea5,_0xc53f72['x']+_0xc53f72[_0x354283(0xa20)]-_0x16c451,_0xc53f72['y'],_0x16c451);else{if(_0x38f589==='center'){const _0x5c5092=_0xc53f72['x']+Math[_0x354283(0xb78)]((_0xc53f72[_0x354283(0xa20)]-_0x16c451)/0x2);this[_0x354283(0xb3c)](_0x128ea5,_0x5c5092,_0xc53f72['y'],_0x16c451);}else this['drawTextEx'](_0x128ea5,_0xc53f72['x'],_0xc53f72['y'],_0x16c451);}},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x8b7)]=function(_0x5789d5){const _0x42e42f=_0x44ae36;this['commandName'](_0x5789d5)[_0x42e42f(0x54f)](/\\I\[(\d+)\]/i);const _0x5f167c=Number(RegExp['$1'])||0x0,_0x4fbbfe=this[_0x42e42f(0x8db)](_0x5789d5),_0xec0923=_0x4fbbfe['x']+Math['floor']((_0x4fbbfe[_0x42e42f(0xa20)]-ImageManager[_0x42e42f(0xb8f)])/0x2),_0x31ca3c=_0x4fbbfe['y']+(_0x4fbbfe[_0x42e42f(0x745)]-ImageManager[_0x42e42f(0xb88)])/0x2;this['drawIcon'](_0x5f167c,_0xec0923,_0x31ca3c);},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x5ed)]=function(){},Window_PartyCommand[_0x44ae36(0x137)]['activate']=function(){const _0x48e516=_0x44ae36;Window_Command['prototype'][_0x48e516(0x1ed)][_0x48e516(0x689)](this);const _0x4ab1ba=this[_0x48e516(0x36d)]();_0x4ab1ba===_0x48e516(0x449)&&this[_0x48e516(0x21e)]();},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x36d)]=function(){const _0x3fad98=_0x44ae36;if(this[_0x3fad98(0x2cf)])return this[_0x3fad98(0x2cf)];return this['_battleLayoutStyle']=SceneManager[_0x3fad98(0x97d)][_0x3fad98(0x36d)](),this[_0x3fad98(0x2cf)];},Window_PartyCommand[_0x44ae36(0x137)][_0x44ae36(0x1de)]=function(){const _0x494ac3=_0x44ae36,_0x4ec40a=VisuMZ[_0x494ac3(0x851)][_0x494ac3(0xa08)][_0x494ac3(0x8cd)],_0x4e6664=this[_0x494ac3(0x5a0)]();switch(_0x4e6664){case _0x494ac3(0xb34):this[_0x494ac3(0xb0f)]['setText'](_0x4ec40a[_0x494ac3(0x122)]);break;case'autoBattle':this[_0x494ac3(0xb0f)][_0x494ac3(0x6ab)](_0x4ec40a[_0x494ac3(0x6f4)]);break;case _0x494ac3(0x4db):this['_helpWindow'][_0x494ac3(0x6ab)](_0x4ec40a[_0x494ac3(0xb11)]);break;case _0x494ac3(0x874):this['_helpWindow'][_0x494ac3(0x6ab)](_0x4ec40a['HelpEscape']);break;case'status':this['_helpWindow']['setText'](Window_InBattleStatus[_0x494ac3(0x81b)][_0x494ac3(0x171)]);break;default:this[_0x494ac3(0xb0f)][_0x494ac3(0x6ab)]('');break;}},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1d6)]=Window_ActorCommand['prototype']['initialize'],Window_ActorCommand['prototype'][_0x44ae36(0x58b)]=function(_0x3cccca){const _0x11964c=_0x44ae36;VisuMZ[_0x11964c(0x851)]['Window_ActorCommand_initialize'][_0x11964c(0x689)](this,_0x3cccca),this[_0x11964c(0x49f)](_0x3cccca);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x49f)]=function(_0xf28ad9){const _0x10ee90=_0x44ae36,_0x4fec04=new Rectangle(0x0,0x0,_0xf28ad9['width'],_0xf28ad9['height']);this[_0x10ee90(0xb7d)]=new Window_Base(_0x4fec04),this[_0x10ee90(0xb7d)]['opacity']=0x0,this[_0x10ee90(0x33d)](this[_0x10ee90(0xb7d)]),this[_0x10ee90(0x974)]();},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x15a)]=function(){const _0x1e8fed=_0x44ae36;Window_Command['prototype']['callUpdateHelp']['call'](this);if(this[_0x1e8fed(0xb7d)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x974)]=function(){const _0x43bc5b=_0x44ae36,_0x32cc99=this['_commandNameWindow'];_0x32cc99[_0x43bc5b(0x526)]['clear']();const _0x25110c=this['commandStyleCheck'](this[_0x43bc5b(0x8b4)]());if(_0x25110c==='icon'&&this[_0x43bc5b(0x6b9)]()>0x0){const _0x252484=this[_0x43bc5b(0x8db)](this[_0x43bc5b(0x8b4)]());let _0x11ea3b=this[_0x43bc5b(0x793)](this[_0x43bc5b(0x8b4)]());_0x11ea3b=_0x11ea3b[_0x43bc5b(0xae9)](/\\I\[(\d+)\]/gi,''),_0x32cc99[_0x43bc5b(0xbb5)](),this[_0x43bc5b(0x24e)](_0x11ea3b,_0x252484),this[_0x43bc5b(0x9cc)](_0x11ea3b,_0x252484),this[_0x43bc5b(0x90a)](_0x11ea3b,_0x252484);}},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x24e)]=function(_0x1be4a7,_0xb6bd62){},Window_ActorCommand[_0x44ae36(0x137)]['commandNameWindowDrawText']=function(_0x3ed042,_0x26a94f){const _0x3cef4c=_0x44ae36,_0x2d4a59=this[_0x3cef4c(0xb7d)];_0x2d4a59['drawText'](_0x3ed042,0x0,_0x26a94f['y'],_0x2d4a59[_0x3cef4c(0x7d6)],'center');},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x90a)]=function(_0x28f3f5,_0x393fa0){const _0x512594=_0x44ae36,_0x3e57c2=this[_0x512594(0xb7d)],_0x1c0701=$gameSystem[_0x512594(0x564)](),_0x4badbb=_0x393fa0['x']+Math[_0x512594(0xb78)](_0x393fa0['width']/0x2)+_0x1c0701;_0x3e57c2['x']=_0x3e57c2[_0x512594(0xa20)]/-0x2+_0x4badbb,_0x3e57c2['y']=Math['floor'](_0x393fa0[_0x512594(0x745)]/0x2);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x82a)]=function(){const _0x143fd8=_0x44ae36;if(!this[_0x143fd8(0x5f3)])return;const _0x155deb=this[_0x143fd8(0x5f3)]['battleCommands']();for(const _0x4fe92a of _0x155deb){this[_0x143fd8(0xb66)](_0x4fe92a[_0x143fd8(0xaf2)]()[_0x143fd8(0x9de)]());}},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0xb66)]=function(_0x44536b){const _0x20602b=_0x44ae36;_0x44536b===_0x20602b(0x99e)&&this['addAttackCommand']();[_0x20602b(0xaa5),_0x20602b(0x73d)][_0x20602b(0x76b)](_0x44536b)&&this['addSkillCommands']();_0x44536b===_0x20602b(0x9c7)&&this[_0x20602b(0x725)]();_0x44536b===_0x20602b(0x3ef)&&this[_0x20602b(0x332)]();_0x44536b==='STATUS'&&this['addStatusCommand']();_0x44536b===_0x20602b(0x833)&&this[_0x20602b(0x249)]();_0x44536b===_0x20602b(0x9ef)&&this[_0x20602b(0x9e9)]();if(_0x44536b[_0x20602b(0x54f)](/STYPE: (\d+)/i)){const _0x4aff9b=Number(RegExp['$1']);this[_0x20602b(0x9ac)](_0x4aff9b);}else{if(_0x44536b['match'](/STYPE: (.*)/i)){const _0x21b7ce=DataManager[_0x20602b(0x616)](RegExp['$1']);this[_0x20602b(0x9ac)](_0x21b7ce);}}_0x44536b==='ALL\x20SKILLS'&&this[_0x20602b(0x836)]();if(_0x44536b['match'](/SKILL: (\d+)/i)){const _0x2a97b3=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x2a97b3]);}else{if(_0x44536b['match'](/SKILL: (.*)/i)){const _0x3207e9=DataManager[_0x20602b(0x6db)](RegExp['$1']);this[_0x20602b(0x2c7)]($dataSkills[_0x3207e9]);}}_0x44536b===_0x20602b(0x108)&&Imported[_0x20602b(0x183)]&&this[_0x20602b(0x6a6)](),[_0x20602b(0xb21),_0x20602b(0x988)][_0x20602b(0x76b)](_0x44536b)&&Imported[_0x20602b(0x4ad)]&&this[_0x20602b(0xac1)](),_0x44536b===_0x20602b(0x7c2)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x20602b(0x430)](!![]),_0x44536b==='GRID\x20MOVE'&&Imported[_0x20602b(0x3f0)]&&this[_0x20602b(0x728)]();},Window_ActorCommand['prototype'][_0x44ae36(0x41d)]=function(){const _0x222f38=_0x44ae36,_0x5deed0=$dataSkills[this['_actor']['attackSkillId']()];if(!_0x5deed0)return;if(!this[_0x222f38(0x743)](_0x5deed0))return;const _0x5e9caf=this['commandStyle'](),_0x2abe11=DataManager[_0x222f38(0x660)](_0x5deed0),_0x5ca691=DataManager['battleCommandIcon'](_0x5deed0),_0xeee92a=_0x5e9caf===_0x222f38(0x9fb)?_0x2abe11:'\x5cI[%1]%2'['format'](_0x5ca691,_0x2abe11);this[_0x222f38(0x967)](_0xeee92a,_0x222f38(0x1f8),this['_actor'][_0x222f38(0x898)]());},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x725)]=function(){const _0x2d8df3=_0x44ae36,_0xd616d7=$dataSkills[this['_actor'][_0x2d8df3(0x1ce)]()];if(!_0xd616d7)return;if(!this[_0x2d8df3(0x743)](_0xd616d7))return;const _0x5988ce=this[_0x2d8df3(0x22f)](),_0x358889=DataManager[_0x2d8df3(0x660)](_0xd616d7),_0x7d19b6=DataManager[_0x2d8df3(0x298)](_0xd616d7),_0x102c85=_0x5988ce===_0x2d8df3(0x9fb)?_0x358889:'\x5cI[%1]%2'['format'](_0x7d19b6,_0x358889);this[_0x2d8df3(0x967)](_0x102c85,'guard',this[_0x2d8df3(0x5f3)][_0x2d8df3(0x6fc)]());},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x332)]=function(){const _0x3eadd5=_0x44ae36,_0x5762bd=this[_0x3eadd5(0x22f)](),_0x2e4855=VisuMZ[_0x3eadd5(0x851)][_0x3eadd5(0xa08)][_0x3eadd5(0x886)][_0x3eadd5(0x930)],_0x4f5bab=_0x5762bd==='text'?TextManager[_0x3eadd5(0x4ec)]:'\x5cI[%1]%2'[_0x3eadd5(0x4be)](_0x2e4855,TextManager[_0x3eadd5(0x4ec)]),_0x47e613=this['isItemCommandEnabled']();this['addCommand'](_0x4f5bab,'item',_0x47e613);},Window_ActorCommand['prototype'][_0x44ae36(0x192)]=function(){const _0x5abb1e=_0x44ae36;return this[_0x5abb1e(0x5f3)]&&this['_actor'][_0x5abb1e(0x600)]();},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x3a3)]=function(){const _0x5e462a=_0x44ae36,_0x3af778=this['_actor'][_0x5e462a(0x304)]();for(const _0xf7b95d of _0x3af778){this[_0x5e462a(0x9ac)](_0xf7b95d);}},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x9ac)]=function(_0x16506d){const _0x4a0459=_0x44ae36;let _0x37db1d=$dataSystem[_0x4a0459(0x304)][_0x16506d];if(!_0x37db1d)return;let _0x4ca41b=_0x37db1d;const _0x3e7eb5=this[_0x4a0459(0x22f)]();if(_0x3e7eb5===_0x4a0459(0x9fb))_0x4ca41b=_0x4ca41b[_0x4a0459(0xae9)](/\x1I\[(\d+)\]/gi,''),_0x4ca41b=_0x4ca41b[_0x4a0459(0xae9)](/\\I\[(\d+)\]/gi,'');else{if(!_0x37db1d[_0x4a0459(0x54f)](/\\I\[(\d+)\]/i)){const _0x4d66e8=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ['SkillsStatesCore'][_0x4a0459(0xa08)][_0x4a0459(0x42d)]:VisuMZ[_0x4a0459(0x851)][_0x4a0459(0xa08)][_0x4a0459(0x886)],_0x5ba2bc=$dataSystem[_0x4a0459(0x32b)][_0x4a0459(0x76b)](_0x16506d),_0x4333dc=_0x5ba2bc?_0x4d66e8['IconStypeMagic']:_0x4d66e8['IconStypeNorm'];_0x4ca41b=_0x4a0459(0xee)[_0x4a0459(0x4be)](_0x4333dc,_0x37db1d);}}this[_0x4a0459(0x967)](_0x4ca41b,_0x4a0459(0x10b),!![],_0x16506d);},Window_ActorCommand[_0x44ae36(0x137)]['addSingleSkillCommands']=function(){const _0x5cc4ee=_0x44ae36,_0x4b3f5b=this[_0x5cc4ee(0x5f3)][_0x5cc4ee(0x304)](),_0x116643=this['_actor'][_0x5cc4ee(0x3b4)]();for(const _0x5d59ab of _0x116643){if(!_0x5d59ab)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this['noSimilarSTypes'](_0x5d59ab))continue;if(this['isHiddenSkill'](_0x5d59ab))continue;}else{if(!_0x4b3f5b[_0x5cc4ee(0x76b)](_0x5d59ab[_0x5cc4ee(0xb60)]))continue;}this[_0x5cc4ee(0x2c7)](_0x5d59ab);}},Window_ActorCommand['prototype']['noSimilarSTypes']=function(_0x2a823c){const _0x29ce1f=_0x44ae36,_0x2c05ab=this['_actor'][_0x29ce1f(0x304)](),_0xcc4a0d=_0x2c05ab['filter'](_0x96f55a=>DataManager['getSkillTypes'](_0x2a823c)[_0x29ce1f(0x76b)](_0x96f55a));return _0xcc4a0d[_0x29ce1f(0x2d9)]<=0x0;},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x3fc)]=function(_0x29df2c){const _0xe6013=_0x44ae36;if(Imported[_0xe6013(0x9a3)]){if(VisuMZ['SkillsStatesCore']['version']>=1.24){if(this[_0xe6013(0x5f3)]){if(!VisuMZ['SkillsStatesCore'][_0xe6013(0xb6a)](this['_actor'],_0x29df2c))return!![];if(!VisuMZ[_0xe6013(0x401)][_0xe6013(0x474)](this['_actor'],_0x29df2c))return!![];if(!VisuMZ[_0xe6013(0x401)][_0xe6013(0x9b8)](this[_0xe6013(0x5f3)],_0x29df2c))return!![];}}else{if(!Window_SkillList['prototype'][_0xe6013(0x975)][_0xe6013(0x689)](this,_0x29df2c))return!![];if(!Window_SkillList[_0xe6013(0x137)][_0xe6013(0x83f)]['call'](this,_0x29df2c))return!![];if(!Window_SkillList[_0xe6013(0x137)][_0xe6013(0xb72)][_0xe6013(0x689)](this,_0x29df2c))return!![];}}return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0x18e641){const _0x467bb2=_0x44ae36;if(!_0x18e641)return;if(!this[_0x467bb2(0x743)](_0x18e641))return;const _0x2e2399=this['commandStyle'](),_0x3a15a1=DataManager[_0x467bb2(0x660)](_0x18e641),_0x2b3e62=DataManager['battleCommandIcon'](_0x18e641),_0x4a8503=_0x2e2399===_0x467bb2(0x9fb)?_0x3a15a1:_0x467bb2(0xee)[_0x467bb2(0x4be)](_0x2b3e62,_0x3a15a1),_0x521737=this[_0x467bb2(0x5f3)][_0x467bb2(0x5b2)](_0x18e641);this[_0x467bb2(0x967)](_0x4a8503,'singleSkill',_0x521737,_0x18e641['id']);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x743)]=function(_0x167845){const _0x55abb=_0x44ae36,_0x7568cc=_0x167845[_0x55abb(0x903)];if(_0x7568cc[_0x55abb(0x54f)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x55abb(0x5f3)][_0x55abb(0x8d2)](_0x167845['id']))return![];}if(_0x7568cc[_0x55abb(0x54f)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x55abb(0x5f3)][_0x55abb(0x923)](_0x167845['id']))return![];}const _0x2ad482=VisuMZ[_0x55abb(0x851)][_0x55abb(0x554)](_0x167845,_0x55abb(0x161));if(VisuMZ['BattleCore']['JS'][_0x2ad482]){if(!VisuMZ['BattleCore']['JS'][_0x2ad482][_0x55abb(0x689)](this,this[_0x55abb(0x5f3)],_0x167845))return![];}return VisuMZ[_0x55abb(0x851)][_0x55abb(0x9f0)](_0x167845);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x9f0)]=function(_0xd4688a){const _0x3d293c=_0x44ae36,_0x7eb8da=_0xd4688a['note'];if(_0x7eb8da['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x159110=JSON[_0x3d293c(0x740)]('['+RegExp['$1'][_0x3d293c(0x54f)](/\d+/g)+']');for(const _0x334cfb of _0x159110){if(!$gameSwitches[_0x3d293c(0x92b)](_0x334cfb))return![];}return!![];}if(_0x7eb8da[_0x3d293c(0x54f)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2cbc22=JSON[_0x3d293c(0x740)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x58ecf0 of _0x2cbc22){if(!$gameSwitches[_0x3d293c(0x92b)](_0x58ecf0))return![];}return!![];}if(_0x7eb8da['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x17cfd6=JSON[_0x3d293c(0x740)]('['+RegExp['$1'][_0x3d293c(0x54f)](/\d+/g)+']');for(const _0x45e2f0 of _0x17cfd6){if($gameSwitches[_0x3d293c(0x92b)](_0x45e2f0))return!![];}return![];}if(_0x7eb8da[_0x3d293c(0x54f)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xdec922=JSON[_0x3d293c(0x740)]('['+RegExp['$1'][_0x3d293c(0x54f)](/\d+/g)+']');for(const _0x14fbf9 of _0xdec922){if(!$gameSwitches[_0x3d293c(0x92b)](_0x14fbf9))return!![];}return![];}if(_0x7eb8da[_0x3d293c(0x54f)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x431508=JSON[_0x3d293c(0x740)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x822f7 of _0x431508){if(!$gameSwitches[_0x3d293c(0x92b)](_0x822f7))return!![];}return![];}if(_0x7eb8da[_0x3d293c(0x54f)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x758bdd=JSON[_0x3d293c(0x740)]('['+RegExp['$1'][_0x3d293c(0x54f)](/\d+/g)+']');for(const _0x40f591 of _0x758bdd){if($gameSwitches[_0x3d293c(0x92b)](_0x40f591))return![];}return!![];}return!![];},Window_ActorCommand['prototype'][_0x44ae36(0x9ca)]=function(){const _0x34b3e4=_0x44ae36,_0x4a01d6=this[_0x34b3e4(0x22f)](),_0x22938a=VisuMZ[_0x34b3e4(0x851)]['Settings'][_0x34b3e4(0x4e1)]['CmdIconStatus']??0x57,_0x296f6f=_0x4a01d6===_0x34b3e4(0x9fb)?TextManager['status']:_0x34b3e4(0xee)['format'](_0x22938a,TextManager[_0x34b3e4(0x15f)]),_0x174274=!![];this[_0x34b3e4(0x967)](_0x296f6f,'status',_0x174274);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x249)]=function(){const _0x2c7499=_0x44ae36,_0x3fca64=this[_0x2c7499(0x22f)](),_0x105cbc=VisuMZ[_0x2c7499(0x851)]['Settings'][_0x2c7499(0x8cd)][_0x2c7499(0x764)],_0x293fd9=_0x3fca64===_0x2c7499(0x9fb)?TextManager[_0x2c7499(0x874)]:_0x2c7499(0xee)['format'](_0x105cbc,TextManager[_0x2c7499(0x874)]),_0x18bddc=this['isEscapeCommandEnabled']();this['addCommand'](_0x293fd9,_0x2c7499(0x874),_0x18bddc);},Window_ActorCommand['prototype'][_0x44ae36(0x400)]=function(){const _0x5ad060=_0x44ae36;return BattleManager[_0x5ad060(0x78e)]();},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x9e9)]=function(){const _0x534998=_0x44ae36,_0x536478=this[_0x534998(0x22f)](),_0x1d7cb7=VisuMZ['BattleCore'][_0x534998(0xa08)][_0x534998(0x8cd)][_0x534998(0x485)],_0x2f6b63=_0x536478===_0x534998(0x9fb)?TextManager[_0x534998(0x90b)]:_0x534998(0xee)[_0x534998(0x4be)](_0x1d7cb7,TextManager['autoBattle']),_0x33d43c=this[_0x534998(0x1ff)]();this[_0x534998(0x967)](_0x2f6b63,'autoBattle',_0x33d43c);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x1ff)]=function(){return!![];},Window_ActorCommand[_0x44ae36(0x137)]['itemTextAlign']=function(){const _0x272d25=_0x44ae36;return VisuMZ[_0x272d25(0x851)][_0x272d25(0xa08)]['ActorCmd']['CmdTextAlign'];},Window_ActorCommand[_0x44ae36(0x137)]['drawItem']=function(_0x1c387c){const _0x159e2=_0x44ae36,_0x2e1e8a=this[_0x159e2(0x27b)](_0x1c387c);if(_0x2e1e8a===_0x159e2(0xce))this[_0x159e2(0x394)](_0x1c387c);else _0x2e1e8a===_0x159e2(0x8e1)?this[_0x159e2(0x8b7)](_0x1c387c):Window_Command[_0x159e2(0x137)]['drawItem'][_0x159e2(0x689)](this,_0x1c387c);this[_0x159e2(0x151)](_0x1c387c);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x22f)]=function(){const _0x109c8b=_0x44ae36;return VisuMZ[_0x109c8b(0x851)][_0x109c8b(0xa08)]['ActorCmd'][_0x109c8b(0x71b)];},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x27b)]=function(_0x2fe61d){const _0x11dbb5=_0x44ae36;if(_0x2fe61d<0x0)return _0x11dbb5(0x9fb);const _0x3f2046=this['commandStyle']();if(_0x3f2046!==_0x11dbb5(0xa9e))return _0x3f2046;else{if(this['maxItems']()>0x0){const _0x2b347f=this[_0x11dbb5(0x793)](_0x2fe61d);if(_0x2b347f[_0x11dbb5(0x54f)](/\\I\[(\d+)\]/i)){const _0x43b0cb=this[_0x11dbb5(0x8db)](_0x2fe61d),_0x5efe69=this[_0x11dbb5(0x1eb)](_0x2b347f)['width'];return _0x5efe69<=_0x43b0cb[_0x11dbb5(0xa20)]?_0x11dbb5(0xce):_0x11dbb5(0x8e1);}}}return'text';},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x394)]=function(_0x570fde){const _0x120a15=_0x44ae36,_0x375668=this['itemLineRect'](_0x570fde),_0x11baa5=this[_0x120a15(0x793)](_0x570fde),_0x45c584=this[_0x120a15(0x1eb)](_0x11baa5)[_0x120a15(0xa20)];this[_0x120a15(0xbaa)](this[_0x120a15(0x41a)](_0x570fde));const _0x55ca01=this[_0x120a15(0x654)]();if(_0x55ca01===_0x120a15(0x657))this['drawTextEx'](_0x11baa5,_0x375668['x']+_0x375668['width']-_0x45c584,_0x375668['y'],_0x45c584);else{if(_0x55ca01===_0x120a15(0x4e2)){const _0x18de52=_0x375668['x']+Math['floor']((_0x375668['width']-_0x45c584)/0x2);this[_0x120a15(0xb3c)](_0x11baa5,_0x18de52,_0x375668['y'],_0x45c584);}else this['drawTextEx'](_0x11baa5,_0x375668['x'],_0x375668['y'],_0x45c584);}},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x8b7)]=function(_0x4a930a){const _0x153c1e=_0x44ae36;this[_0x153c1e(0x793)](_0x4a930a)[_0x153c1e(0x54f)](/\\I\[(\d+)\]/i);const _0x24d02a=Number(RegExp['$1'])||0x0,_0x13abc6=this[_0x153c1e(0x8db)](_0x4a930a),_0x564b1a=_0x13abc6['x']+Math[_0x153c1e(0xb78)]((_0x13abc6[_0x153c1e(0xa20)]-ImageManager[_0x153c1e(0xb8f)])/0x2),_0x5780d8=_0x13abc6['y']+(_0x13abc6[_0x153c1e(0x745)]-ImageManager[_0x153c1e(0xb88)])/0x2;this[_0x153c1e(0x25a)](_0x24d02a,_0x564b1a,_0x5780d8);},Window_ActorCommand['prototype']['drawSingleSkillCost']=function(_0x1d4839){const _0x3072c8=_0x44ae36;if(!(VisuMZ['BattleCore'][_0x3072c8(0xa08)][_0x3072c8(0x886)][_0x3072c8(0x20a)]??!![]))return;const _0x2f94da=this[_0x3072c8(0x1c6)](_0x1d4839);if(!['attack',_0x3072c8(0x8d9),'singleSkill'][_0x3072c8(0x76b)](_0x2f94da))return;const _0x1d3f77=this[_0x3072c8(0x8db)](_0x1d4839);let _0x2658d1=null;if(_0x2f94da===_0x3072c8(0x1f8))_0x2658d1=$dataSkills[this['_actor'][_0x3072c8(0x5d7)]()];else _0x2f94da===_0x3072c8(0x8d9)?_0x2658d1=$dataSkills[this[_0x3072c8(0x5f3)][_0x3072c8(0x1ce)]()]:_0x2658d1=$dataSkills[this[_0x3072c8(0x255)][_0x1d4839][_0x3072c8(0x3be)]];this[_0x3072c8(0x88e)](this[_0x3072c8(0x5f3)],_0x2658d1,_0x1d3f77['x'],_0x1d3f77['y'],_0x1d3f77[_0x3072c8(0xa20)]);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x88e)]=function(_0x24f1f0,_0x5ad4bc,_0x521cf7,_0x1f13cf,_0x4f12eb){const _0x20c6c3=_0x44ae36;if(!_0x5ad4bc)return;Imported[_0x20c6c3(0x9a3)]?Window_Command[_0x20c6c3(0x137)][_0x20c6c3(0x88e)][_0x20c6c3(0x689)](this,_0x24f1f0,_0x5ad4bc,_0x521cf7,_0x1f13cf,_0x4f12eb):Window_SkillList[_0x20c6c3(0x137)]['drawSkillCost']['call'](this,_0x5ad4bc,_0x521cf7,_0x1f13cf,_0x4f12eb);},Window_ActorCommand['prototype'][_0x44ae36(0x5ed)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0xf1bb39=_0x44ae36;Window_Command['prototype'][_0xf1bb39(0x1ed)][_0xf1bb39(0x689)](this);const _0xe9954=this[_0xf1bb39(0x36d)]();_0xe9954===_0xf1bb39(0x449)&&this[_0xf1bb39(0x21e)]();},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x36d)]=function(){const _0x486d23=_0x44ae36;if(this[_0x486d23(0x2cf)])return this['_battleLayoutStyle'];return this[_0x486d23(0x2cf)]=SceneManager[_0x486d23(0x97d)][_0x486d23(0x36d)](),this[_0x486d23(0x2cf)];},VisuMZ['BattleCore'][_0x44ae36(0xa83)]=Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x93c)],Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x93c)]=function(_0x25ded2){const _0x3d8784=_0x44ae36,_0x10154d=this[_0x3d8784(0x36d)]();if(_0x25ded2&&['xp',_0x3d8784(0x984)][_0x3d8784(0x76b)](_0x10154d))this['resizeWindowXPStyle'](_0x25ded2);else _0x25ded2&&[_0x3d8784(0x449)][_0x3d8784(0x76b)](_0x10154d)&&(this[_0x3d8784(0x26c)](_0x25ded2),this[_0x3d8784(0x21e)]());VisuMZ['BattleCore'][_0x3d8784(0xa83)][_0x3d8784(0x689)](this,_0x25ded2),_0x25ded2&&$gameTroop[_0x3d8784(0xbad)]()[_0x3d8784(0x2d9)]>0x0&&_0x25ded2[_0x3d8784(0x7ef)]()&&_0x25ded2['battler']()[_0x3d8784(0x79c)]();},Window_ActorCommand['prototype'][_0x44ae36(0x9d4)]=function(_0x38f843){const _0x46fa37=_0x44ae36,_0x1b6d24=VisuMZ[_0x46fa37(0x851)]['Settings']['BattleLayout']['CommandWidth'],_0x1ae2bc=Math[_0x46fa37(0x875)](Graphics['boxWidth']/0x3),_0x18f151=Math[_0x46fa37(0x875)](Graphics[_0x46fa37(0x345)]/$gameParty['battleMembers']()['length']),_0x94acdb=Math[_0x46fa37(0x131)](Math['min'](_0x1ae2bc,_0x18f151),_0x1b6d24),_0x1f325c=this[_0x46fa37(0x620)](VisuMZ[_0x46fa37(0x851)][_0x46fa37(0xa08)][_0x46fa37(0x844)]['XPActorCommandLines']),_0x5760ad=Math[_0x46fa37(0xb78)]((Graphics[_0x46fa37(0x345)]-Graphics[_0x46fa37(0xa20)])/0x2),_0x202e53=Graphics[_0x46fa37(0x345)]-_0x5760ad,_0x426a1f=(Math['round'](_0x18f151*_0x38f843[_0x46fa37(0x8b4)]())+Math['round']((_0x18f151-_0x94acdb)/0x2))[_0x46fa37(0xf1)](_0x5760ad,_0x202e53-_0x94acdb),_0x2b7ec3=Math['round'](SceneManager[_0x46fa37(0x97d)][_0x46fa37(0x154)]['y']-_0x1f325c);this['move'](_0x426a1f,_0x2b7ec3,_0x94acdb,_0x1f325c),this[_0x46fa37(0x220)](),this['setBackgroundType'](0x1);},Window_ActorCommand['prototype']['resizeWindowBorderStyle']=function(_0x1776bd){const _0x1add2b=_0x44ae36,_0x501256=SceneManager[_0x1add2b(0x97d)][_0x1add2b(0x713)]();this[_0x1add2b(0x3eb)](_0x501256['x'],_0x501256['y'],_0x501256['width'],_0x501256[_0x1add2b(0x745)]),this[_0x1add2b(0x220)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x44ae36(0x137)][_0x44ae36(0x458)]=function(){const _0x5d54b2=_0x44ae36;if(this[_0x5d54b2(0x14e)]){const _0x1d16c5=this[_0x5d54b2(0x14e)][_0x5d54b2(0x2ec)],_0x50b635=this['width']-0x8,_0x3907dd=this[_0x5d54b2(0x745)],_0x2925da=this[_0x5d54b2(0x337)],_0x57d6bf=ColorManager[_0x5d54b2(0xab2)](),_0x532ac9=ColorManager[_0x5d54b2(0x15e)]();this[_0x5d54b2(0x14e)]['x']=0x4,_0x1d16c5[_0x5d54b2(0xa7d)](_0x50b635,_0x3907dd),_0x1d16c5[_0x5d54b2(0x60b)](0x0,0x0,_0x50b635,_0x2925da,_0x532ac9,_0x57d6bf,!![]),_0x1d16c5[_0x5d54b2(0x7d5)](0x0,_0x2925da,_0x50b635,_0x3907dd-_0x2925da*0x2,_0x57d6bf),_0x1d16c5[_0x5d54b2(0x60b)](0x0,_0x3907dd-_0x2925da,_0x50b635,_0x2925da,_0x57d6bf,_0x532ac9,!![]),this[_0x5d54b2(0x14e)][_0x5d54b2(0x3c4)](0x0,0x0,_0x50b635,_0x3907dd);}},Window_ActorCommand[_0x44ae36(0x137)]['updateHelp']=function(){const _0x28219d=_0x44ae36;if(!this[_0x28219d(0x5f3)])return;const _0x4f5011=VisuMZ[_0x28219d(0x851)][_0x28219d(0xa08)][_0x28219d(0x886)],_0x2ba68a=this[_0x28219d(0x5a0)]();switch(_0x2ba68a){case _0x28219d(0x1f8):this['setHelpWindowItem']($dataSkills[this[_0x28219d(0x5f3)][_0x28219d(0x5d7)]()]);break;case _0x28219d(0x8d9):this[_0x28219d(0xbc2)]($dataSkills[this[_0x28219d(0x5f3)][_0x28219d(0x1ce)]()]);break;case'skill':const _0x20c7f5=_0x4f5011[_0x28219d(0xba0)],_0x2d9cad=_0x20c7f5[_0x28219d(0x4be)]($dataSystem[_0x28219d(0x304)][this['currentExt']()]);this[_0x28219d(0xb0f)]['setText'](_0x2d9cad);break;case'singleSkill':this[_0x28219d(0xbc2)]($dataSkills[this['currentExt']()]);break;case _0x28219d(0x4ec):this['_helpWindow'][_0x28219d(0x6ab)](_0x4f5011[_0x28219d(0x2c2)]);break;case _0x28219d(0x874):this[_0x28219d(0xb0f)]['setText'](_0x4f5011[_0x28219d(0x98a)]);break;case _0x28219d(0x90b):this['_helpWindow']['setText'](_0x4f5011[_0x28219d(0x6f4)]);break;case _0x28219d(0x15f):this[_0x28219d(0xb0f)][_0x28219d(0x6ab)](Window_InBattleStatus[_0x28219d(0x81b)][_0x28219d(0x171)]);break;default:this[_0x28219d(0xb0f)][_0x28219d(0x6ab)]('');break;}},Window_ActorCommand['prototype'][_0x44ae36(0x9eb)]=function(){const _0x3d9b8f=_0x44ae36;this['forceSelect'](0x0);if(this[_0x3d9b8f(0x5f3)]&&ConfigManager[_0x3d9b8f(0x790)]){const _0x420e8e=this[_0x3d9b8f(0x5f3)][_0x3d9b8f(0x39f)]();this['selectSymbol'](_0x420e8e);if(_0x420e8e==='skill'){const _0x3123f7=this['_actor']['lastBattleSkill']();if(_0x3123f7){const _0x23263e=this[_0x3d9b8f(0x4b1)](_0x3d9b8f(0x10b),_0x3123f7[_0x3d9b8f(0xb60)]);this[_0x3d9b8f(0x70d)](_0x23263e||0x0);}}else{if(_0x420e8e===_0x3d9b8f(0x6b7)){const _0x458a21=this[_0x3d9b8f(0x5f3)][_0x3d9b8f(0x16e)]();if(_0x458a21){const _0x1639dc=this[_0x3d9b8f(0x4b1)](_0x3d9b8f(0x6b7),_0x458a21['id']);this['select'](_0x1639dc||0x0);}}}}},Window_ActorCommand[_0x44ae36(0x137)]['findSymbolExt']=function(_0x4a1dcf,_0x193736){const _0x53babf=_0x44ae36;return this[_0x53babf(0x255)][_0x53babf(0xbd6)](_0x237d12=>_0x237d12['symbol']===_0x4a1dcf&&_0x237d12['ext']===_0x193736);},VisuMZ[_0x44ae36(0x851)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x58b)],Window_BattleStatus['prototype'][_0x44ae36(0x58b)]=function(_0x1dd85b){const _0x4311eb=_0x44ae36;VisuMZ[_0x4311eb(0x851)][_0x4311eb(0x2d5)][_0x4311eb(0x689)](this,_0x1dd85b),this[_0x4311eb(0x322)](),this[_0x4311eb(0xabd)]();},Window_BattleStatus['prototype'][_0x44ae36(0x36d)]=function(){const _0x5151c9=_0x44ae36;if(this['_battleLayoutStyle'])return this[_0x5151c9(0x2cf)];return this['_battleLayoutStyle']=SceneManager[_0x5151c9(0x97d)][_0x5151c9(0x36d)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x44ae36(0x137)]['initBattleCore']=function(){const _0x26c73d=_0x44ae36;this['frameVisible']=this[_0x26c73d(0x684)]();const _0x1df7a3=VisuMZ[_0x26c73d(0x851)][_0x26c73d(0xa08)][_0x26c73d(0x844)];_0x1df7a3[_0x26c73d(0x17b)]&&(this['opacity']=0x0);},Window_BattleStatus['prototype'][_0x44ae36(0x684)]=function(){const _0x151228=_0x44ae36,_0x5def5b=VisuMZ[_0x151228(0x851)][_0x151228(0xa08)][_0x151228(0x844)];if(_0x5def5b[_0x151228(0x37f)])return!![];const _0x4d1e79=this[_0x151228(0x36d)]();switch(_0x4d1e79){case _0x151228(0xb29):case'border':return!![];break;case'default':case'xp':case _0x151228(0x984):default:return![];break;}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x9d0)]=function(){const _0x395c01=_0x44ae36;return this[_0x395c01(0x684)]()?0x0:0xa;},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x83d)]=function(){const _0x48d610=_0x44ae36,_0x78e24b=this[_0x48d610(0x36d)]();switch(_0x78e24b){case'list':return 0x1;break;case'xp':case _0x48d610(0x984):return $gameParty['battleMembers']()['length'];break;case _0x48d610(0x199):default:return $gameParty[_0x48d610(0x38c)]();break;}},Window_BattleStatus['prototype']['itemHeight']=function(){const _0x184091=_0x44ae36,_0xe14f59=this['battleLayoutStyle']();switch(_0xe14f59){case _0x184091(0xb29):return Window_StatusBase[_0x184091(0x137)][_0x184091(0x9a4)]['call'](this);break;case _0x184091(0x199):case'xp':case _0x184091(0x984):default:return this[_0x184091(0x8b8)];break;}},Window_BattleStatus['prototype']['rowSpacing']=function(){const _0x39715c=_0x44ae36,_0x546a17=this[_0x39715c(0x36d)]();switch(_0x546a17){case _0x39715c(0xb29):return Window_StatusBase[_0x39715c(0x137)][_0x39715c(0x39a)][_0x39715c(0x689)](this);break;case _0x39715c(0x199):case'xp':case _0x39715c(0x984):default:return 0x0;break;}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x5e7)]=function(){const _0x38aacd=_0x44ae36;this[_0x38aacd(0x684)]()?Window_StatusBase['prototype'][_0x38aacd(0x5e7)][_0x38aacd(0x689)](this):this['padding']=0x8;},Window_BattleStatus['prototype'][_0x44ae36(0x45d)]=function(){const _0x123330=_0x44ae36,_0x3a3c5d=VisuMZ['BattleCore'][_0x123330(0xa08)][_0x123330(0x844)];_0x3a3c5d[_0x123330(0x37f)]?this['windowskin']=ImageManager[_0x123330(0x25e)](_0x3a3c5d[_0x123330(0x37f)]):Window_StatusBase[_0x123330(0x137)][_0x123330(0x45d)][_0x123330(0x689)](this);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x103)]=function(_0x2b89fa){const _0x44321c=_0x44ae36,_0x560e53=VisuMZ['BattleCore']['Settings'][_0x44321c(0x844)];if(_0x560e53[_0x44321c(0x368)])return;Window_StatusBase[_0x44321c(0x137)]['drawItemBackground'][_0x44321c(0x689)](this,_0x2b89fa);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x3f3)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus['prototype'][_0x44ae36(0xa8a)]=function(){const _0x505e31=_0x44ae36;Window_StatusBase['prototype'][_0x505e31(0xa8a)][_0x505e31(0x689)](this),this[_0x505e31(0x5a7)](),this[_0x505e31(0x652)]();if(this[_0x505e31(0x36d)]()===_0x505e31(0x449))this['updateBorderStyle']();},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x5a7)]=function(){const _0x43aa53=_0x44ae36;if($gameTemp[_0x43aa53(0xa27)]())this['preparePartyRefresh'](),this[_0x43aa53(0x69f)]=![],$gameTemp[_0x43aa53(0x5e2)]();else this[_0x43aa53(0x69f)]&&(this[_0x43aa53(0x69f)]=![],this[_0x43aa53(0x749)](),this[_0x43aa53(0xd0)]());},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0xb98)]=function(){const _0x2cc643=_0x44ae36;Window_StatusBase[_0x2cc643(0x137)][_0x2cc643(0xb98)][_0x2cc643(0x689)](this);if(!$gameSystem[_0x2cc643(0x628)]())this['refresh']();},Window_BattleStatus['prototype'][_0x44ae36(0x5ed)]=function(){const _0x581aa6=_0x44ae36;if(this[_0x581aa6(0x6ea)]===Window_BattleStatus)return;Window_StatusBase[_0x581aa6(0x137)][_0x581aa6(0x5ed)][_0x581aa6(0x689)](this);},Window_BattleStatus['prototype'][_0x44ae36(0xb10)]=function(_0xa0ebed){const _0x49fc78=_0x44ae36,_0x2ef7bd=this[_0x49fc78(0x36d)]();switch(_0x2ef7bd){case'xp':case _0x49fc78(0x984):break;case _0x49fc78(0x199):case _0x49fc78(0xb29):case _0x49fc78(0x449):default:return Window_StatusBase[_0x49fc78(0x137)][_0x49fc78(0xb10)][_0x49fc78(0x689)](this,_0xa0ebed);break;}},VisuMZ['BattleCore'][_0x44ae36(0x615)]=Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x650)],Window_BattleStatus['prototype'][_0x44ae36(0x650)]=function(_0x425839){const _0x5bd1c4=_0x44ae36,_0x1b29f8=this['battleLayoutStyle']();switch(_0x1b29f8){case'list':this[_0x5bd1c4(0xa6e)](_0x425839);break;case'xp':this[_0x5bd1c4(0x56e)](_0x425839);break;case _0x5bd1c4(0x984):this['drawItemImagePortraitStyle'](_0x425839);break;case'default':case _0x5bd1c4(0x449):default:VisuMZ[_0x5bd1c4(0x851)][_0x5bd1c4(0x615)][_0x5bd1c4(0x689)](this,_0x425839);break;}},Window_BattleStatus[_0x44ae36(0x137)]['drawItemStatus']=function(_0x6a0792){const _0x63072d=_0x44ae36,_0x41d83a=this[_0x63072d(0x36d)]();if(!$gameSystem['isSideView']())this[_0x63072d(0x509)](_0x6a0792);switch(_0x41d83a){case _0x63072d(0xb29):this[_0x63072d(0x522)](_0x6a0792);break;case'xp':case _0x63072d(0x984):case _0x63072d(0x199):case _0x63072d(0x449):default:this['drawItemStatusXPStyle'](_0x6a0792);break;}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x4ee)]=function(){const _0x33e77e=_0x44ae36,_0x380232=this[_0x33e77e(0x36d)]();if(['xp'][_0x33e77e(0x76b)](_0x380232)&&!$gameSystem[_0x33e77e(0x628)]()){this[_0x33e77e(0x33f)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x33e77e(0x137)]['refreshCursor'][_0x33e77e(0x689)](this);},Window_BattleStatus['prototype']['centerFrontViewSprite']=function(_0x4caf86){const _0x1d532d=_0x44ae36,_0x4c50b0=this['actor'](_0x4caf86)['battler']();if(!_0x4c50b0)return;const _0x1b118e=this[_0x1d532d(0x36d)](),_0x1456e5=this[_0x1d532d(0x225)](_0x4caf86);let _0x325612=Math[_0x1d532d(0x875)](_0x1456e5['x']+_0x1456e5[_0x1d532d(0xa20)]/0x2)+this['padding'];[_0x1d532d(0xb29)][_0x1d532d(0x76b)](_0x1b118e)&&(_0x325612=_0x1456e5[_0x1d532d(0xa20)]/$gameParty['battleMembers']()[_0x1d532d(0x2d9)],_0x325612*=_0x4caf86,_0x325612+=_0x1456e5[_0x1d532d(0xa20)]/$gameParty[_0x1d532d(0xb63)]()['length']/0x2);let _0x4822f3=Math['round'](this[_0x1d532d(0x282)](_0x4caf86,_0x4c50b0,_0x1456e5));_0x4c50b0[_0x1d532d(0xf0)](_0x325612,_0x4822f3),this[_0x1d532d(0x820)](_0x4c50b0,0x1),_0x4c50b0[_0x1d532d(0xb98)](),this[_0x1d532d(0xbf1)](),this[_0x1d532d(0xd0)]();},Window_BattleStatus['prototype']['frontviewSpriteY']=function(_0x28298e,_0x2c1ae4,_0x431639){const _0xa171b4=_0x44ae36,_0x37fa39=VisuMZ[_0xa171b4(0x851)][_0xa171b4(0xa08)][_0xa171b4(0x844)],_0xc3eca4=this[_0xa171b4(0x36d)]();if(_0xc3eca4==='xp'){const _0x4fcaba=_0x37fa39[_0xa171b4(0x244)];switch(_0x4fcaba[_0xa171b4(0x672)]()[_0xa171b4(0x9de)]()){case _0xa171b4(0xbf8):return _0x431639[_0xa171b4(0x745)]-_0x2c1ae4[_0xa171b4(0x6cf)][_0xa171b4(0x745)]/0x4;break;case _0xa171b4(0x4e2):const _0x104c89=_0x37fa39[_0xa171b4(0x8d5)];return(_0x431639['height']+(_0x2c1ae4['height']||_0x104c89))/0x2;break;case _0xa171b4(0xbee):return 0x0;case _0xa171b4(0x674):default:return this[_0xa171b4(0x9e2)](_0x431639);break;}}else{if(_0xc3eca4===_0xa171b4(0x984)){}}return _0x2c1ae4[_0xa171b4(0x745)];},Sprite_Name[_0x44ae36(0x137)][_0x44ae36(0xda)]=function(){return 0x24;},Sprite_Name[_0x44ae36(0x137)][_0x44ae36(0x118)]=function(){const _0x53975f=_0x44ae36,_0x4aa89f=this[_0x53975f(0x674)](),_0x560bd7=this['bitmapWidth'](),_0x539919=this[_0x53975f(0xda)]();this['setupFont'](),this['bitmap'][_0x53975f(0x87b)](),this[_0x53975f(0x2ec)][_0x53975f(0x32c)](_0x4aa89f,0x4,0x0,_0x560bd7,_0x539919,_0x53975f(0x5fb));},Bitmap[_0x44ae36(0x137)]['drawTextTopAligned']=function(_0x5ed9b0,_0x2c7135,_0x4e6dc5,_0x35dbce,_0x104993,_0x24518b){const _0x33a7d8=_0x44ae36;TextManager[_0x33a7d8(0x768)]&&(_0x5ed9b0=TextManager[_0x33a7d8(0x768)](_0x5ed9b0));const _0x3992ad=this[_0x33a7d8(0xb42)],_0x82916d=_0x3992ad['globalAlpha'];_0x35dbce=_0x35dbce||0xffffffff;let _0x3c16b0=_0x2c7135,_0xa37ea5=Math[_0x33a7d8(0x875)](_0x4e6dc5+0x18/0x2+this[_0x33a7d8(0xb67)]*0.35);_0x24518b===_0x33a7d8(0x4e2)&&(_0x3c16b0+=_0x35dbce/0x2),_0x24518b===_0x33a7d8(0x657)&&(_0x3c16b0+=_0x35dbce),_0x3992ad[_0x33a7d8(0x7de)](),_0x3992ad[_0x33a7d8(0x366)]=this[_0x33a7d8(0x286)](),_0x3992ad[_0x33a7d8(0xfe)]=_0x24518b,_0x3992ad['textBaseline']=_0x33a7d8(0x274),_0x3992ad[_0x33a7d8(0x278)]=0x1,this['_drawTextOutline'](_0x5ed9b0,_0x3c16b0,_0xa37ea5,_0x35dbce),_0x3992ad[_0x33a7d8(0x278)]=_0x82916d,this[_0x33a7d8(0x1b0)](_0x5ed9b0,_0x3c16b0,_0xa37ea5,_0x35dbce),_0x3992ad[_0x33a7d8(0x1f0)](),this[_0x33a7d8(0x1fd)][_0x33a7d8(0xa8a)]();},Window_BattleStatus[_0x44ae36(0x137)]['nameY']=function(_0x332aff){const _0x1d950d=_0x44ae36;return this[_0x1d950d(0x4c3)](_0x332aff)-this[_0x1d950d(0x10d)]();},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0xa6e)]=function(_0x3d8d3e){const _0x549e74=_0x44ae36;if(!VisuMZ[_0x549e74(0x851)][_0x549e74(0xa08)][_0x549e74(0x844)][_0x549e74(0xb2a)])return;const _0x55f8f6=this[_0x549e74(0x2f8)](_0x3d8d3e),_0x369d03=this[_0x549e74(0x225)](_0x3d8d3e);_0x369d03['width']=ImageManager[_0x549e74(0x17f)],_0x369d03['height']-=0x2,this[_0x549e74(0x9f3)](_0x55f8f6,_0x369d03['x']+0x1,_0x369d03['y']+0x1,_0x369d03['width'],_0x369d03[_0x549e74(0x745)]);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x522)]=function(_0x314290){const _0x58b9ac=_0x44ae36,_0x436df6=VisuMZ[_0x58b9ac(0x851)][_0x58b9ac(0xa08)][_0x58b9ac(0x844)],_0x52b9f0=$dataSystem['optDisplayTp']?0x4:0x3,_0x25aec5=_0x52b9f0*0x80+(_0x52b9f0-0x1)*0x8+0x4,_0x4674d0=this[_0x58b9ac(0x2f8)](_0x314290),_0x23d319=this['itemRect'](_0x314290);let _0x454ec9=_0x23d319['x']+this[_0x58b9ac(0x337)];_0x436df6['ShowFacesListStyle']?_0x454ec9=_0x23d319['x']+ImageManager[_0x58b9ac(0x17f)]+0x8:_0x454ec9+=ImageManager[_0x58b9ac(0xb8f)];const _0x4a12b5=Math[_0x58b9ac(0x875)](Math['min'](_0x23d319['x']+_0x23d319[_0x58b9ac(0xa20)]-_0x25aec5,_0x454ec9)),_0x417d51=Math[_0x58b9ac(0x875)](_0x23d319['y']+(_0x23d319[_0x58b9ac(0x745)]-Sprite_Name['prototype'][_0x58b9ac(0xda)]())/0x2),_0x4d7336=Math[_0x58b9ac(0x875)](_0x4a12b5-ImageManager['iconWidth']/0x2-0x4),_0x5de363=Math[_0x58b9ac(0x875)](_0x23d319['y']+(_0x23d319[_0x58b9ac(0x745)]-ImageManager[_0x58b9ac(0xb88)])/0x2+ImageManager[_0x58b9ac(0xb88)]/0x2);let _0x5a169d=_0x4a12b5+0x88;const _0x3828de=_0x417d51;this[_0x58b9ac(0xb55)](_0x4674d0,_0x4a12b5-0x4+(_0x436df6[_0x58b9ac(0x2fb)]||0x0),_0x417d51+(_0x436df6[_0x58b9ac(0x976)]||0x0)),this['placeActorName'](_0x4674d0,_0x4a12b5+(_0x436df6['NameOffsetX']||0x0),_0x417d51+(_0x436df6[_0x58b9ac(0x21c)]||0x0)),this[_0x58b9ac(0x579)](_0x4674d0,_0x4d7336+(_0x436df6[_0x58b9ac(0x111)]||0x0),_0x5de363+(_0x436df6[_0x58b9ac(0xbf2)]||0x0)),this[_0x58b9ac(0x580)](_0x4674d0,'hp',_0x5a169d+0x88*0x0+(_0x436df6['HpGaugeOffsetX']||0x0),_0x3828de+(_0x436df6[_0x58b9ac(0xb23)]||0x0)),this['placeGauge'](_0x4674d0,'mp',_0x5a169d+0x88*0x1+(_0x436df6[_0x58b9ac(0x7bc)]||0x0),_0x3828de+(_0x436df6[_0x58b9ac(0xaf4)]||0x0)),$dataSystem[_0x58b9ac(0x54e)]&&this['placeGauge'](_0x4674d0,'tp',_0x5a169d+0x88*0x2+(_0x436df6[_0x58b9ac(0x37d)]||0x0),_0x3828de+(_0x436df6[_0x58b9ac(0x1d9)]||0x0));},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x56e)]=function(_0x48a284){const _0x5b6263=_0x44ae36;if(!$gameSystem[_0x5b6263(0x628)]())return;VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage'][_0x5b6263(0x689)](this,_0x48a284);},Window_BattleStatus[_0x44ae36(0x137)]['drawItemStatusXPStyle']=function(_0x29e095){const _0x30f1a1=_0x44ae36,_0x2d62f7=VisuMZ[_0x30f1a1(0x851)][_0x30f1a1(0xa08)]['BattleLayout'],_0x5b2bf7=this[_0x30f1a1(0x2f8)](_0x29e095),_0x19fa57=this['itemRect'](_0x29e095),_0x23c69d=Math[_0x30f1a1(0x875)](_0x19fa57['x']+(_0x19fa57[_0x30f1a1(0xa20)]-0x80)/0x2),_0x7c894e=this[_0x30f1a1(0x9e2)](_0x19fa57);let _0x3329d1=_0x23c69d-ImageManager[_0x30f1a1(0xb8f)]/0x2-0x4,_0x21cc3d=_0x7c894e+ImageManager[_0x30f1a1(0xb88)]/0x2;_0x3329d1-ImageManager[_0x30f1a1(0xb8f)]/0x2<_0x19fa57['x']&&(_0x3329d1=_0x23c69d+ImageManager[_0x30f1a1(0xb8f)]/0x2-0x4,_0x21cc3d=_0x7c894e-ImageManager[_0x30f1a1(0xb88)]/0x2);const _0x54bbe6=_0x23c69d,_0x3429f4=this[_0x30f1a1(0x4c3)](_0x19fa57);this[_0x30f1a1(0xb55)](_0x5b2bf7,_0x23c69d+(_0x2d62f7['TpbGaugeOffsetX']||0x0),_0x7c894e+(_0x2d62f7[_0x30f1a1(0x976)]||0x0)),this['placeActorName'](_0x5b2bf7,_0x23c69d+(_0x2d62f7[_0x30f1a1(0x13d)]||0x0),_0x7c894e+(_0x2d62f7['NameOffsetY']||0x0)),this[_0x30f1a1(0x579)](_0x5b2bf7,_0x3329d1+(_0x2d62f7[_0x30f1a1(0x111)]||0x0),_0x21cc3d+(_0x2d62f7['StateIconOffsetY']||0x0)),this[_0x30f1a1(0x580)](_0x5b2bf7,'hp',_0x54bbe6+(_0x2d62f7['HpGaugeOffsetX']||0x0),_0x3429f4+(_0x2d62f7[_0x30f1a1(0xb23)]||0x0)),this['placeGauge'](_0x5b2bf7,'mp',_0x54bbe6+(_0x2d62f7[_0x30f1a1(0x7bc)]||0x0),_0x3429f4+this[_0x30f1a1(0x10d)]()+(_0x2d62f7[_0x30f1a1(0xaf4)]||0x0)),$dataSystem[_0x30f1a1(0x54e)]&&this[_0x30f1a1(0x580)](_0x5b2bf7,'tp',_0x54bbe6+(_0x2d62f7['TpGaugeOffsetX']||0x0),_0x3429f4+this['gaugeLineHeight']()*0x2+(_0x2d62f7[_0x30f1a1(0x1d9)]||0x0));},Window_BattleStatus['prototype'][_0x44ae36(0x484)]=function(_0x1f6c08){const _0x163832=_0x44ae36;if(!VisuMZ[_0x163832(0x851)][_0x163832(0xa08)][_0x163832(0x844)]['ShowPortraits'])return![];if(_0x1f6c08[_0x163832(0x59c)]())return!![];return Imported[_0x163832(0x791)]&&_0x1f6c08[_0x163832(0x59b)]();},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0xb13)]=function(){const _0x194b85=_0x44ae36;if(this[_0x194b85(0x2f8)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x194b85(0x2f8)]()[_0x194b85(0x903)][_0x194b85(0x54f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x44ae36(0x137)][_0x44ae36(0x3c9)]=function(){const _0x3ed925=_0x44ae36;if(this['actor']()[_0x3ed925(0x903)][_0x3ed925(0x54f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3ed925(0x2f8)]()[_0x3ed925(0x903)][_0x3ed925(0x54f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x44ae36(0x3ba)]=function(_0x58f8ec){const _0xb244e1=_0x44ae36,_0x53cb63=this['actor'](_0x58f8ec);if(this['showPortraits'](_0x53cb63)){const _0x40af34=_0xb244e1(0x359)[_0xb244e1(0x4be)](_0x53cb63[_0xb244e1(0x27f)]()),_0x970f75=this['createInnerPortrait'](_0x40af34,Sprite),_0x3423a9=_0x53cb63[_0xb244e1(0x544)]();_0x3423a9!==''?_0x970f75[_0xb244e1(0x2ec)]=ImageManager[_0xb244e1(0x2ff)](_0x3423a9):_0x970f75[_0xb244e1(0x2ec)]=ImageManager[_0xb244e1(0x697)];const _0x44c5ee=this[_0xb244e1(0x225)](_0x58f8ec);_0x970f75['anchor']['x']=0.5,_0x970f75[_0xb244e1(0x792)]['y']=0x1;let _0x11affc=Math['round'](_0x44c5ee['x']+_0x44c5ee[_0xb244e1(0xa20)]/0x2)+this[_0xb244e1(0x337)];_0x11affc+=_0x53cb63[_0xb244e1(0xb13)]();let _0x5485a4=Math[_0xb244e1(0x875)](this[_0xb244e1(0x745)]);_0x5485a4+=_0x53cb63[_0xb244e1(0x3c9)](),_0x970f75[_0xb244e1(0x3eb)](_0x11affc,_0x5485a4);const _0x17a975=VisuMZ[_0xb244e1(0x851)]['Settings'][_0xb244e1(0x844)][_0xb244e1(0x796)];_0x970f75[_0xb244e1(0x497)]['x']=_0x17a975,_0x970f75[_0xb244e1(0x497)]['y']=_0x17a975,_0x970f75[_0xb244e1(0xb98)]();}else{const _0x562551=this[_0xb244e1(0x643)](_0x58f8ec);this[_0xb244e1(0x9f3)](_0x53cb63,_0x562551['x'],_0x562551['y'],_0x562551[_0xb244e1(0xa20)],_0x562551[_0xb244e1(0x745)]);}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0xb3a)]=function(_0x13ea7d,_0x418a49){const _0x19af34=_0x44ae36,_0x503a3f=this[_0x19af34(0x136)];if(_0x503a3f[_0x13ea7d])return _0x503a3f[_0x13ea7d];else{const _0x2e02db=new _0x418a49();return _0x503a3f[_0x13ea7d]=_0x2e02db,this[_0x19af34(0x550)](_0x2e02db),this['addChildToBack'](this[_0x19af34(0x7aa)]),_0x2e02db;}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x899)]=function(){const _0x4de769=_0x44ae36;this[_0x4de769(0x3f9)](),this[_0x4de769(0x717)](),Window_StatusBase['prototype'][_0x4de769(0x899)][_0x4de769(0x689)](this),this[_0x4de769(0x99a)]();},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x3f9)]=function(){const _0x38762f=_0x44ae36;this[_0x38762f(0x7aa)]=new Sprite(),this[_0x38762f(0x7aa)][_0x38762f(0x630)]=[new PIXI[(_0x38762f(0x630))][(_0x38762f(0x1c3))]()],this['_cursorArea'][_0x38762f(0x776)]=new Rectangle(),this['_cursorArea'][_0x38762f(0x3eb)](this[_0x38762f(0x8ca)],this[_0x38762f(0x8ca)]),this[_0x38762f(0x33d)](this[_0x38762f(0x7aa)]);},Window_BattleStatus['prototype'][_0x44ae36(0x717)]=function(){const _0x1bade2=_0x44ae36;this[_0x1bade2(0x253)]=new Sprite(),this[_0x1bade2(0x33d)](this['_effectsContainer']);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0xbf1)]=function(){const _0x41d9f0=_0x44ae36;this[_0x41d9f0(0x253)]&&this['addChild'](this[_0x41d9f0(0x253)]);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x99a)]=function(){const _0xf9b46f=_0x44ae36;this['_damageContainer']=new Sprite(),this[_0xf9b46f(0x33d)](this[_0xf9b46f(0x542)]);},Window_BattleStatus['prototype'][_0x44ae36(0x970)]=function(){const _0x52a9ae=_0x44ae36;this[_0x52a9ae(0x3c3)]=new Sprite();for(let _0x34cff6=0x0;_0x34cff6<0x9;_0x34cff6++){this[_0x52a9ae(0x3c3)][_0x52a9ae(0x33d)](new Sprite());}this[_0x52a9ae(0x7aa)][_0x52a9ae(0x33d)](this[_0x52a9ae(0x3c3)]);},Window_BattleStatus['prototype']['_updateClientArea']=function(){const _0x4be9ff=_0x44ae36;Window_StatusBase[_0x4be9ff(0x137)][_0x4be9ff(0x1c7)]['call'](this),this['_updateCursorArea']();},Window_BattleStatus[_0x44ae36(0x137)]['_updateCursorArea']=function(){const _0x27503b=_0x44ae36,_0x2c5e38=this[_0x27503b(0x8ca)];this[_0x27503b(0x7aa)]['move'](_0x2c5e38,_0x2c5e38),this[_0x27503b(0x7aa)]['x']=_0x2c5e38-this[_0x27503b(0x71f)]['x'],this[_0x27503b(0x7aa)]['y']=_0x2c5e38-this['origin']['y'],this['innerWidth']>0x0&&this['innerHeight']>0x0?this[_0x27503b(0x7aa)][_0x27503b(0x7bb)]=this[_0x27503b(0x71a)]():this[_0x27503b(0x7aa)][_0x27503b(0x7bb)]=![];},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x290)]=function(){const _0x1b4fc5=_0x44ae36;Window_StatusBase[_0x1b4fc5(0x137)][_0x1b4fc5(0x290)][_0x1b4fc5(0x689)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x86e)]=function(){const _0x1cde47=_0x44ae36,_0x167909=this[_0x1cde47(0x7aa)][_0x1cde47(0x297)][_0x1cde47(0xb08)](new Point(0x0,0x0)),_0x53d757=this[_0x1cde47(0x7aa)]['filterArea'];_0x53d757['x']=_0x167909['x']+this[_0x1cde47(0x71f)]['x'],_0x53d757['y']=_0x167909['y']+this[_0x1cde47(0x71f)]['y'],_0x53d757[_0x1cde47(0xa20)]=this[_0x1cde47(0x7d6)],_0x53d757[_0x1cde47(0x745)]=this[_0x1cde47(0x8b8)];},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x64f)]=function(_0x167ce3){const _0x608de0=_0x44ae36;if(this['battleLayoutStyle']()!==_0x608de0(0x984))return;this[_0x608de0(0x3ba)](_0x167ce3[_0x608de0(0x8b4)]());},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x51e)]=function(_0x5248f7,_0xe4c4f2){const _0x555f0c=_0x44ae36;if(!this[_0x555f0c(0x542)])return;if(!_0x5248f7)return;if(!_0xe4c4f2)return;const _0x2b0586=this[_0x555f0c(0x225)](_0xe4c4f2[_0x555f0c(0x8b4)]());_0x2b0586['x']+=_0x2b0586[_0x555f0c(0xa20)]/0x2+this[_0x555f0c(0x337)],_0x5248f7['x']=_0x2b0586['x'],_0x5248f7['y']=_0x2b0586['y'],this[_0x555f0c(0x542)]['addChild'](_0x5248f7);},Window_BattleStatus[_0x44ae36(0x137)]['removeDamageSprite']=function(_0x304b37){const _0x356b2c=_0x44ae36;if(!this[_0x356b2c(0x542)])return;if(!_0x304b37)return;this['_damageContainer']['removeChild'](_0x304b37);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x45b)]=function(){const _0x2f0c4a=_0x44ae36;if(!this[_0x2f0c4a(0x771)]())return;if(!this['_borderPortraitSprite'])this[_0x2f0c4a(0x51d)]();this[_0x2f0c4a(0x44e)](),this[_0x2f0c4a(0xa92)]();},Window_BattleStatus['prototype'][_0x44ae36(0x771)]=function(){const _0x24b442=_0x44ae36;if(this[_0x24b442(0x6ea)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ[_0x24b442(0x851)]['Settings'][_0x24b442(0x844)][_0x24b442(0x349)];},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x51d)]=function(){const _0xa22490=_0x44ae36;this[_0xa22490(0xbd1)]=new Sprite();const _0x1089ca=SceneManager[_0xa22490(0x97d)],_0x346a74=_0x1089ca[_0xa22490(0x8ad)][_0xa22490(0x83c)](_0x1089ca[_0xa22490(0x252)]);_0x1089ca[_0xa22490(0x820)](this['_borderPortraitSprite'],_0x346a74),this['_borderPortraitSprite']['anchor']['x']=0.5,this[_0xa22490(0xbd1)][_0xa22490(0x792)]['y']=0x1;const _0x3ecf89=VisuMZ[_0xa22490(0x851)][_0xa22490(0xa08)]['BattleLayout'][_0xa22490(0xba5)];this['_borderPortraitSprite'][_0xa22490(0x497)]['x']=_0x3ecf89,this['_borderPortraitSprite'][_0xa22490(0x497)]['y']=_0x3ecf89,this[_0xa22490(0xbd1)]['y']=this['y']+this['height'],this[_0xa22490(0x27d)]=0x0;},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x1af)]=function(){const _0xc3062e=_0x44ae36;return BattleManager[_0xc3062e(0x6e3)]();},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x44e)]=function(){const _0x335efc=_0x44ae36;this['_borderPortraitSprite']['visible']=this[_0x335efc(0x1af)]();const _0x15ceca=BattleManager[_0x335efc(0x2f8)](),_0x1f8b47=_0x15ceca?_0x15ceca[_0x335efc(0x544)]()||'':'';if(_0x15ceca===this['_borderPortraitSprite'][_0x335efc(0x2f8)]&&_0x1f8b47===this[_0x335efc(0xbd1)][_0x335efc(0x101)])return;this[_0x335efc(0xbd1)]['actor']=_0x15ceca||this['_borderPortraitSprite'][_0x335efc(0x2f8)],this['_borderPortraitSprite'][_0x335efc(0x101)]=_0x1f8b47;if(!_0x15ceca)return;else{if(_0x1f8b47===''){this['_borderPortraitSprite'][_0x335efc(0x2ec)]=ImageManager['_emptyBitmap'],this[_0x335efc(0xbd1)][_0x335efc(0x101)]='';return;}else{const _0x45fd8f=ImageManager[_0x335efc(0x2ff)](_0x1f8b47);this[_0x335efc(0xbd1)][_0x335efc(0x7b5)]=0x0,_0x45fd8f[_0x335efc(0x729)](this[_0x335efc(0x275)][_0x335efc(0x7ab)](this,_0x45fd8f));}}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x275)]=function(_0x58e503){const _0x4ce911=_0x44ae36;this[_0x4ce911(0x27d)]=0x14,this[_0x4ce911(0xbd1)][_0x4ce911(0x2ec)]=_0x58e503;SceneManager[_0x4ce911(0x97d)][_0x4ce911(0x467)]()?(this[_0x4ce911(0xbd1)]['x']=0x0,this[_0x4ce911(0x8ae)]=Math['ceil'](_0x58e503[_0x4ce911(0xa20)]/0x2)):(this[_0x4ce911(0xbd1)]['x']=this['width'],this[_0x4ce911(0x8ae)]=this[_0x4ce911(0xa20)]*0x3/0x4);this['_borderPortraitSprite'][_0x4ce911(0x7b5)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x4ce911(0x745)];const _0x67c9c2=BattleManager[_0x4ce911(0x2f8)]();_0x67c9c2&&(this['_borderPortraitTargetX']+=_0x67c9c2[_0x4ce911(0xb13)](),this[_0x4ce911(0xbd1)]['y']+=_0x67c9c2[_0x4ce911(0x3c9)]());},Window_BattleStatus['prototype'][_0x44ae36(0xa92)]=function(){const _0x25fbd2=_0x44ae36;if(this[_0x25fbd2(0x27d)]>0x0){const _0x4b1028=this['_borderPortraitDuration'],_0x125b68=this['_borderPortraitSprite'];_0x125b68['x']=(_0x125b68['x']*(_0x4b1028-0x1)+this['_borderPortraitTargetX'])/_0x4b1028,_0x125b68['opacity']=(_0x125b68['opacity']*(_0x4b1028-0x1)+0xff)/_0x4b1028,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0x652)]=function(){const _0x5918f2=_0x44ae36;return;this[_0x5918f2(0x253)]&&(this[_0x5918f2(0x253)]['x']=this['x'],this[_0x5918f2(0x253)]['y']=this['y']),this[_0x5918f2(0x542)]&&(this[_0x5918f2(0x542)]['x']=this['x'],this[_0x5918f2(0x542)]['y']=this['y']);},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0xabd)]=function(){const _0x2884f9=_0x44ae36,_0x2525d7=VisuMZ['BattleCore']['Settings'][_0x2884f9(0x844)];if(_0x2525d7[_0x2884f9(0x466)]){const _0x213fbf=new Sprite();_0x213fbf['bitmap']=ImageManager['loadSystem'](_0x2525d7[_0x2884f9(0x466)]),_0x213fbf['x']=_0x2525d7[_0x2884f9(0xa96)]||0x0,_0x213fbf['y']=_0x2525d7[_0x2884f9(0xf5)]||0x0,this[_0x2884f9(0x550)](_0x213fbf),this[_0x2884f9(0x73b)]=_0x213fbf;}if(_0x2525d7[_0x2884f9(0x61f)]){const _0x509579=new Sprite();_0x509579[_0x2884f9(0x2ec)]=ImageManager[_0x2884f9(0x25e)](_0x2525d7['StatusWindowAttachmentFront']),_0x509579['x']=_0x2525d7[_0x2884f9(0x4cc)]||0x0,_0x509579['y']=_0x2525d7[_0x2884f9(0xd2)]||0x0,this[_0x2884f9(0x33d)](_0x509579),this[_0x2884f9(0xbff)]=_0x509579;}},Window_BattleStatus[_0x44ae36(0x137)][_0x44ae36(0xd0)]=function(){const _0xfa14e4=_0x44ae36;this[_0xfa14e4(0xbff)]&&this[_0xfa14e4(0x33d)](this['_frontAttachmentSprite']),this[_0xfa14e4(0x73b)]&&this['addChildToBack'](this[_0xfa14e4(0x73b)]);},Window_BattleActor['prototype'][_0x44ae36(0x7a1)]=function(){const _0x14e55a=_0x44ae36;return this[_0x14e55a(0x9f2)]();},Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0x9f2)]=function(){const _0x2e6e87=_0x44ae36,_0x35fd76=BattleManager['inputtingAction']();if(!_0x35fd76)return!![];if(!_0x35fd76[_0x2e6e87(0x4ec)]())return!![];const _0x1eeda7=this[_0x2e6e87(0x2f8)](this[_0x2e6e87(0x8b4)]()),_0x1e8b2d=_0x35fd76[_0x2e6e87(0x4ec)]()[_0x2e6e87(0x903)];if(_0x35fd76[_0x2e6e87(0x638)]()){if(_0x1eeda7===BattleManager[_0x2e6e87(0x2f8)]())return![];}if(_0x35fd76[_0x2e6e87(0x217)]()){if(!_0x1eeda7[_0x2e6e87(0xb6d)]())return![];}if(_0x35fd76[_0x2e6e87(0x72f)]()){if(!_0x1eeda7[_0x2e6e87(0x1c1)]())return![];}return!![];},Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0xbfd)]=function(_0x779be){const _0x51e67e=_0x44ae36;this[_0x51e67e(0x125)]=_0x779be;},VisuMZ['BattleCore']['Window_BattleActor_processTouch']=Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0xa5a)],Window_BattleActor['prototype']['processTouch']=function(){const _0x309c8b=_0x44ae36;Window_BattleStatus[_0x309c8b(0x137)]['processTouch'][_0x309c8b(0x689)](this),this['_enemyWindowMode']?this[_0x309c8b(0x347)]():VisuMZ[_0x309c8b(0x851)][_0x309c8b(0xbe3)][_0x309c8b(0x689)](this);},Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0x347)]=function(){const _0x41fb97=_0x44ae36,_0x981187=SceneManager[_0x41fb97(0x97d)]['_enemyWindow'];if(!_0x981187)return;this['_doubleTouch']=![];const _0x57b6a5=this['hitIndex']();if(_0x57b6a5>=0x0){this[_0x41fb97(0x70d)](_0x57b6a5);if(TouchInput['isClicked']()){const _0x47ba15=$gameParty[_0x41fb97(0xb30)]()[_0x57b6a5],_0x12e1aa=_0x981187[_0x41fb97(0xea)][_0x41fb97(0x83c)](_0x47ba15);_0x12e1aa>=0x0&&(_0x981187[_0x41fb97(0x70d)](_0x12e1aa),_0x981187[_0x41fb97(0x138)]());}}},Window_BattleActor['prototype']['_makeCursorAlpha']=function(){const _0x73999e=_0x44ae36;this[_0x73999e(0x125)]&&(this['_animationCount']++,this[_0x73999e(0xac7)]=!![]);const _0x452014=Window_BattleStatus['prototype'][_0x73999e(0x91f)]['call'](this);return this[_0x73999e(0x125)]&&(this[_0x73999e(0xac7)]=![]),_0x452014;},VisuMZ[_0x44ae36(0x851)]['Window_BattleActor_show']=Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0xb98)],Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0xb98)]=function(){const _0x2cee88=_0x44ae36;VisuMZ['BattleCore']['Window_BattleActor_show'][_0x2cee88(0x689)](this);const _0x4f2e9f=BattleManager[_0x2cee88(0x3a8)]();if(_0x4f2e9f){const _0x37b6dd=$gameParty[_0x2cee88(0xbad)]();_0x4f2e9f[_0x2cee88(0x6e4)]()&&_0x37b6dd[_0x2cee88(0x2d9)]>0x1&&this[_0x2cee88(0x705)](_0x2cee88(0x983),this[_0x2cee88(0xbf9)][_0x2cee88(0x7ab)](this));}},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xed)]=Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0x5ed)],Window_BattleActor['prototype']['hide']=function(){const _0x281779=_0x44ae36;VisuMZ[_0x281779(0x851)]['Window_BattleActor_hide']['call'](this),delete this['_handlers'][_0x281779(0x76f)],delete this[_0x281779(0x801)]['pagedown'];},Window_BattleActor[_0x44ae36(0x137)][_0x44ae36(0xbf9)]=function(){const _0x3f1993=_0x44ae36,_0x5b35c1=BattleManager[_0x3f1993(0x3a8)]();if(_0x5b35c1)_0x5b35c1[_0x3f1993(0x240)]('all\x20actors');this['processOk']();},VisuMZ[_0x44ae36(0x851)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x44ae36(0x137)]['initialize'],Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(_0x3cda38){const _0x49ca65=_0x44ae36;this[_0x49ca65(0xad8)]=null,VisuMZ[_0x49ca65(0x851)][_0x49ca65(0x949)]['call'](this,_0x3cda38);if(Imported[_0x49ca65(0x95f)]){if(VisuMZ[_0x49ca65(0x88a)]['version']<1.12){let _0x4c575c='';_0x4c575c+=_0x49ca65(0xbbf),_0x4c575c+=_0x49ca65(0x594),_0x4c575c+=_0x49ca65(0xa5b),alert(_0x4c575c),SceneManager[_0x49ca65(0x804)]();}}},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x83d)]=function(){const _0x3029bd=_0x44ae36;return this[_0x3029bd(0x6b9)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x41e)]=Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0xb98)],Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0xb98)]=function(){const _0xaa8f10=_0x44ae36;VisuMZ[_0xaa8f10(0x851)][_0xaa8f10(0x41e)]['call'](this),this['y']=Graphics[_0xaa8f10(0x745)]*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0xaa8f10(0xaa0)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x8fa)]=Window_BattleEnemy[_0x44ae36(0x137)]['hide'],Window_BattleEnemy['prototype'][_0x44ae36(0x5ed)]=function(){const _0x45cfac=_0x44ae36;VisuMZ['BattleCore']['Window_BattleEnemy_hide'][_0x45cfac(0x689)](this),$gameParty['select'](null),delete this[_0x45cfac(0x801)][_0x45cfac(0x76f)],delete this[_0x45cfac(0x801)][_0x45cfac(0x983)];},Window_BattleEnemy[_0x44ae36(0x137)]['validTargets']=function(){const _0x5b5cbe=_0x44ae36;let _0xb077c1=$gameTroop[_0x5b5cbe(0xbad)]();const _0x57c634=BattleManager[_0x5b5cbe(0x3a8)]();if(_0x57c634){_0x57c634[_0x5b5cbe(0x6e4)]()&&_0xb077c1['length']>0x1&&this[_0x5b5cbe(0x705)]('pageup',this[_0x5b5cbe(0x4bb)][_0x5b5cbe(0x7ab)](this));if(_0x57c634['isForAnyone']()){const _0x376fa7=$gameParty[_0x5b5cbe(0xbad)]();_0xb077c1=_0xb077c1[_0x5b5cbe(0x738)](_0x376fa7),_0x57c634['canSingleOrMultipleSelect']()&&_0x376fa7['length']>0x1&&this[_0x5b5cbe(0x705)](_0x5b5cbe(0x983),this['selectAllActors'][_0x5b5cbe(0x7ab)](this));}}return _0xb077c1;},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x749)]=function(){const _0x160500=_0x44ae36;this[_0x160500(0xea)]=this[_0x160500(0x649)](),this[_0x160500(0x9f1)](),Window_Selectable[_0x160500(0x137)][_0x160500(0x749)][_0x160500(0x689)](this);},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x9f1)]=function(){const _0x53ce0a=_0x44ae36;this[_0x53ce0a(0xea)][_0x53ce0a(0x7be)]((_0x991620,_0x673052)=>{const _0x124abb=_0x53ce0a;if(_0x991620[_0x124abb(0x30c)]()!==_0x673052[_0x124abb(0x30c)]()){if(_0x991620[_0x124abb(0x2fe)]())return-0x1;if(_0x673052['isEnemy']())return 0x1;}if(_0x991620[_0x124abb(0x30c)]()&&_0x673052[_0x124abb(0x30c)]())return _0x991620[_0x124abb(0x8b4)]()-_0x673052[_0x124abb(0x8b4)]();return _0x991620[_0x124abb(0x7ef)]()[_0x124abb(0x358)]===_0x673052[_0x124abb(0x7ef)]()['_baseX']?_0x991620['battler']()['_baseY']-_0x673052[_0x124abb(0x7ef)]()[_0x124abb(0x5b5)]:_0x991620['battler']()[_0x124abb(0x358)]-_0x673052[_0x124abb(0x7ef)]()[_0x124abb(0x358)];}),SceneManager['isBattleFlipped']()&&this[_0x53ce0a(0xea)]['reverse']();},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x8f6)]=function(){const _0x48ef80=_0x44ae36,_0x1b6427=VisuMZ['BattleCore'][_0x48ef80(0xa08)][_0x48ef80(0x2e0)];_0x1b6427[_0x48ef80(0x30d)]?this[_0x48ef80(0x4dd)]():this[_0x48ef80(0x57c)]();},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x4dd)]=function(){const _0x3dde6e=_0x44ae36,_0x4f716b=BattleManager[_0x3dde6e(0x3a8)]();if(_0x4f716b&&_0x4f716b[_0x3dde6e(0xa0a)]()){if(_0x4f716b['isForAnyoneFocusFriends']()){if(this[_0x3dde6e(0xb53)]&&this['_enemies']['includes'](this[_0x3dde6e(0xb53)])){const _0x35a14f=this[_0x3dde6e(0xea)]['indexOf'](this['_lastActor']);return this[_0x3dde6e(0x5fd)](_0x35a14f);}else return this[_0x3dde6e(0x57c)]();}}if(this[_0x3dde6e(0xad8)]&&this[_0x3dde6e(0xea)][_0x3dde6e(0x76b)](this[_0x3dde6e(0xad8)])){const _0x4d4efb=this[_0x3dde6e(0xea)][_0x3dde6e(0x83c)](this[_0x3dde6e(0xad8)]);this[_0x3dde6e(0x5fd)](_0x4d4efb);}else this[_0x3dde6e(0x57c)]();},Window_BattleEnemy[_0x44ae36(0x137)]['autoSelectPriority']=function(){const _0x4e285e=_0x44ae36,_0x33310b=BattleManager['inputtingAction']();if(_0x33310b&&_0x33310b[_0x4e285e(0xa0a)]()){const _0x259911=$gameParty[_0x4e285e(0xbad)]()[0x0];let _0x196f5f=this['_enemies']['indexOf'](_0x259911);const _0x2c2f9d=_0x33310b[_0x4e285e(0x4ec)]()[_0x4e285e(0xaa1)];if(_0x2c2f9d['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x4e285e(0x5fd)](_0x196f5f);return;}else{if(_0x2c2f9d[_0x4e285e(0x54f)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x4e285e(0x5fd)](_0x196f5f-0x1);return;}}}const _0x3d24d1=VisuMZ[_0x4e285e(0x851)]['Settings']['Enemy'];let _0x468600=![];$gameSystem[_0x4e285e(0x628)]()?_0x468600=_0x3d24d1[_0x4e285e(0x1be)]:_0x468600=_0x3d24d1[_0x4e285e(0x4d7)],this[_0x4e285e(0x5fd)](_0x468600?this[_0x4e285e(0x6b9)]()-0x1:0x0);},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0xa05)]=function(){const _0x42aee3=_0x44ae36;Window_Selectable[_0x42aee3(0x137)]['callOkHandler'][_0x42aee3(0x689)](this);if(!this[_0x42aee3(0xbcb)]())return;if(this['enemy']()[_0x42aee3(0x2fe)]())this['_lastEnemy']=this[_0x42aee3(0xbcb)]();if(this[_0x42aee3(0xbcb)]()[_0x42aee3(0x30c)]())this[_0x42aee3(0xb53)]=this[_0x42aee3(0xbcb)]();},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x70d)]=function(_0x4a0f28){const _0x99be73=_0x44ae36;Window_Selectable[_0x99be73(0x137)][_0x99be73(0x70d)]['call'](this,_0x4a0f28),$gameTroop['select'](this[_0x99be73(0xbcb)]()),$gameParty['select'](this[_0x99be73(0xbcb)]());if(!this[_0x99be73(0xbcb)]())return;if(this[_0x99be73(0x276)]()){const _0x4e0d37=SceneManager[_0x99be73(0x97d)]['_actorWindow'];this[_0x99be73(0xbcb)]()[_0x99be73(0x30c)]()?_0x4e0d37['select'](this[_0x99be73(0xbcb)]()[_0x99be73(0x8b4)]()):_0x4e0d37[_0x99be73(0x360)]();}},Window_BattleEnemy[_0x44ae36(0x137)]['meetsSelectFrontviewActorConditions']=function(){const _0x43bf2a=_0x44ae36;if(!this[_0x43bf2a(0x7bb)])return![];if($gameSystem[_0x43bf2a(0x628)]())return![];const _0x41dfee=SceneManager[_0x43bf2a(0x97d)]['battleLayoutStyle'](),_0x59aab0=['default','list','xp',_0x43bf2a(0x984),_0x43bf2a(0x449)];return _0x59aab0[_0x43bf2a(0x76b)](_0x41dfee);},Window_BattleEnemy['prototype'][_0x44ae36(0xaa0)]=function(){const _0x39b1d2=_0x44ae36,_0x4ca16a=SceneManager[_0x39b1d2(0x97d)][_0x39b1d2(0xad6)];_0x4ca16a[_0x39b1d2(0xb98)](),_0x4ca16a[_0x39b1d2(0xbfd)](!![]),_0x4ca16a[_0x39b1d2(0x749)](),_0x4ca16a['deselect']();const _0x43e38b=SceneManager[_0x39b1d2(0x97d)][_0x39b1d2(0x36d)](),_0xab821a=['xp',_0x39b1d2(0x984),_0x39b1d2(0x449)];if(_0xab821a[_0x39b1d2(0x76b)](_0x43e38b)){const _0x2d5286=SceneManager['_scene'][_0x39b1d2(0x154)];_0x2d5286[_0x39b1d2(0x497)]['y']=0x0;}},Window_BattleEnemy['prototype'][_0x44ae36(0x75e)]=function(){const _0x2763da=_0x44ae36,_0x38725a=SceneManager['_scene'][_0x2763da(0xad6)];_0x38725a[_0x2763da(0x5ed)](),_0x38725a[_0x2763da(0xbfd)](![]),_0x38725a['deselect']();const _0x2352f9=SceneManager[_0x2763da(0x97d)]['_statusWindow'];_0x2352f9[_0x2763da(0x497)]['y']=0x1;},Window_BattleEnemy['prototype'][_0x44ae36(0x4bb)]=function(){const _0x796157=_0x44ae36,_0x1af19a=BattleManager[_0x796157(0x3a8)]();if(_0x1af19a)_0x1af19a[_0x796157(0x240)]('all\x20enemies');this[_0x796157(0x138)]();},Window_BattleEnemy[_0x44ae36(0x137)]['selectAllActors']=function(){const _0xa3d914=_0x44ae36,_0x373752=BattleManager[_0xa3d914(0x3a8)]();if(_0x373752)_0x373752[_0xa3d914(0x240)](_0xa3d914(0x909));this[_0xa3d914(0x138)]();},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x7a1)]=function(){const _0x48c180=_0x44ae36;return this[_0x48c180(0x9f2)]();},Window_BattleEnemy[_0x44ae36(0x137)][_0x44ae36(0x9f2)]=function(){const _0x2fb8a6=_0x44ae36,_0x8ad6a5=BattleManager['inputtingAction']();if(!_0x8ad6a5)return!![];if(!_0x8ad6a5[_0x2fb8a6(0x4ec)]())return!![];const _0x21969f=this[_0x2fb8a6(0xbcb)](),_0x54322d=_0x8ad6a5[_0x2fb8a6(0x4ec)]()['note'];if(_0x8ad6a5[_0x2fb8a6(0x638)]()){if(_0x21969f===BattleManager['actor']())return![];}return!![];},Window_BattleItem[_0x44ae36(0x137)][_0x44ae36(0x76b)]=function(_0x28cbc7){const _0xbde57a=_0x44ae36;if(!_0x28cbc7)return![];return _0x28cbc7[_0xbde57a(0x533)]===0x0||_0x28cbc7[_0xbde57a(0x533)]===0x1;};function Window_AutoBattleCancel(){const _0x596442=_0x44ae36;this[_0x596442(0x58b)](...arguments);}Window_AutoBattleCancel['prototype']=Object['create'](Window_Base['prototype']),Window_AutoBattleCancel[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(_0x41feb2){const _0x56d6cd=_0x44ae36;Window_Base['prototype'][_0x56d6cd(0x58b)]['call'](this,_0x41feb2),this[_0x56d6cd(0x517)](this[_0x56d6cd(0x24f)]()),this['refresh']();},Window_AutoBattleCancel[_0x44ae36(0x137)]['bgType']=function(){const _0x2a3d58=_0x44ae36;return VisuMZ['BattleCore'][_0x2a3d58(0xa08)]['AutoBattle'][_0x2a3d58(0x980)];},Window_AutoBattleCancel[_0x44ae36(0x137)][_0x44ae36(0x749)]=function(){const _0x89354f=_0x44ae36;this[_0x89354f(0x526)][_0x89354f(0x87b)]();const _0x2f5b7b=VisuMZ[_0x89354f(0x851)][_0x89354f(0xa08)][_0x89354f(0xa30)][_0x89354f(0x97e)],_0x35e698=_0x2f5b7b[_0x89354f(0x4be)](this[_0x89354f(0x4ed)](),this['cancelButtonText']()),_0x2518e9=this[_0x89354f(0x1eb)](_0x35e698)['width'],_0x48748a=Math[_0x89354f(0xb78)]((this[_0x89354f(0x7d6)]-_0x2518e9)/0x2);this[_0x89354f(0xb3c)](_0x35e698,_0x48748a,0x0,_0x2518e9);},Window_AutoBattleCancel[_0x44ae36(0x137)]['okButtonText']=function(){const _0x1a2ae6=_0x44ae36;return Imported[_0x1a2ae6(0x6c8)]?TextManager[_0x1a2ae6(0x328)]('ok'):VisuMZ[_0x1a2ae6(0x851)]['Settings'][_0x1a2ae6(0xa30)][_0x1a2ae6(0xa1a)];},Window_AutoBattleCancel[_0x44ae36(0x137)][_0x44ae36(0xb71)]=function(){const _0x598c18=_0x44ae36;return Imported['VisuMZ_0_CoreEngine']?TextManager['getInputButtonString'](_0x598c18(0xbda)):VisuMZ[_0x598c18(0x851)][_0x598c18(0xa08)]['AutoBattle'][_0x598c18(0x950)];},Window_AutoBattleCancel[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x564dab=_0x44ae36;Window_Base[_0x564dab(0x137)][_0x564dab(0xa8a)][_0x564dab(0x689)](this),this[_0x564dab(0x4b2)](),this[_0x564dab(0x8dd)]();},Window_AutoBattleCancel[_0x44ae36(0x137)][_0x44ae36(0x4b2)]=function(){this['visible']=BattleManager['_autoBattle'];},Window_AutoBattleCancel[_0x44ae36(0x137)]['updateCancel']=function(){const _0x458b00=_0x44ae36;if(!BattleManager[_0x458b00(0x789)])return;(Input[_0x458b00(0x877)]('ok')||Input[_0x458b00(0x877)](_0x458b00(0xbda))||TouchInput['isClicked']()||TouchInput['isCancelled']())&&(SoundManager[_0x458b00(0x92d)](),BattleManager['_autoBattle']=![],Input[_0x458b00(0x87b)](),TouchInput[_0x458b00(0x87b)]());};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x44ae36(0x137)]=Object[_0x44ae36(0x318)](Window_StatusBase[_0x44ae36(0x137)]),Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Window_EnemyName,Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(_0x592ba3){const _0x3109be=_0x44ae36;this[_0x3109be(0x362)]=_0x592ba3,this[_0x3109be(0x926)]='';const _0x32a6fe=new Rectangle(0x0,0x0,Graphics[_0x3109be(0x345)],this['lineHeight']()*0x4);Window_StatusBase[_0x3109be(0x137)][_0x3109be(0x58b)]['call'](this,_0x32a6fe),this[_0x3109be(0x517)](0x2),this[_0x3109be(0x397)]=0x0;},Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x5e7)]=function(){const _0x421e96=_0x44ae36;this[_0x421e96(0x337)]=0x0;},Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xbcb)]=function(){const _0x440939=_0x44ae36;return $gameTroop[_0x440939(0xb30)]()[this[_0x440939(0x362)]];},Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x202307=_0x44ae36;Window_StatusBase[_0x202307(0x137)][_0x202307(0xa8a)]['call'](this),this[_0x202307(0xbcb)]()&&this[_0x202307(0xbcb)]()['name']()!==this[_0x202307(0x926)]&&(this[_0x202307(0x926)]=this[_0x202307(0xbcb)]()['name'](),this[_0x202307(0x749)]()),this['updateOpacity'](),this[_0x202307(0xbc3)]();},Window_EnemyName['prototype'][_0x44ae36(0x462)]=function(){const _0x12a279=_0x44ae36;if(!this[_0x12a279(0xbcb)]()){if(this[_0x12a279(0x397)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x12a279(0xbcb)]()[_0x12a279(0xb6d)]()){if(this[_0x12a279(0x397)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager['_scene'][_0x12a279(0x9bc)]&&SceneManager[_0x12a279(0x97d)][_0x12a279(0x9bc)][_0x12a279(0xac7)]&&SceneManager[_0x12a279(0x97d)]['_enemyWindow'][_0x12a279(0xea)]['includes'](this[_0x12a279(0xbcb)]())){if(this[_0x12a279(0x397)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x12a279(0x397)]>0x0&&(this[_0x12a279(0x397)]-=0x10);}}},Window_EnemyName[_0x44ae36(0x137)]['updatePosition']=function(){const _0x5c679c=_0x44ae36;if(!this[_0x5c679c(0xbcb)]())return;SceneManager[_0x5c679c(0xab7)]()?this['x']=Graphics[_0x5c679c(0x345)]-this[_0x5c679c(0xbcb)]()[_0x5c679c(0x7ef)]()[_0x5c679c(0x358)]:this['x']=this[_0x5c679c(0xbcb)]()[_0x5c679c(0x7ef)]()['_baseX'];this['x']-=Math[_0x5c679c(0x875)](this['width']/0x2),this['y']=this['enemy']()[_0x5c679c(0x7ef)]()[_0x5c679c(0x5b5)]-Math[_0x5c679c(0x875)](this[_0x5c679c(0xb7b)]()*1.5);const _0x309719=VisuMZ[_0x5c679c(0x851)]['Settings']['Enemy'];this['x']+=_0x309719['NameOffsetX']||0x0,this['y']+=_0x309719['NameOffsetY']||0x0;},Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0xbb5)]=function(){const _0x85475e=_0x44ae36;Window_Base[_0x85475e(0x137)][_0x85475e(0xbb5)][_0x85475e(0x689)](this),this['contents'][_0x85475e(0xb67)]=VisuMZ[_0x85475e(0x851)][_0x85475e(0xa08)][_0x85475e(0x2e0)][_0x85475e(0x12e)];},Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x749)]=function(){const _0x5903be=_0x44ae36;Window_StatusBase[_0x5903be(0x137)][_0x5903be(0x749)]['call'](this),this['contents']['clear']();if(!this[_0x5903be(0xbcb)]())return;this[_0x5903be(0x77b)]();},Window_EnemyName[_0x44ae36(0x137)][_0x44ae36(0x77b)]=function(){const _0x441db1=_0x44ae36;this[_0x441db1(0x926)]=this['enemy']()[_0x441db1(0x674)]();const _0xe593c8=this[_0x441db1(0x1eb)](this['_text'])['width'],_0x10eac8=Math[_0x441db1(0x875)]((this['innerWidth']-_0xe593c8)/0x2);this['drawTextEx'](this[_0x441db1(0x926)],_0x10eac8,0x0,_0xe593c8+0x8);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x3a6)]=function(){const _0x4c88da=_0x44ae36;return VisuMZ[_0x4c88da(0x851)][_0x4c88da(0xa08)][_0x4c88da(0x162)][_0x4c88da(0x4b3)];},Window_BattleLog['prototype'][_0x44ae36(0x896)]=function(){const _0x4dc179=_0x44ae36;return VisuMZ[_0x4dc179(0x851)][_0x4dc179(0xa08)]['BattleLog']['MessageWait'];},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x587)]=function(){const _0x288e7b=_0x44ae36;return VisuMZ['BattleCore'][_0x288e7b(0xa08)][_0x288e7b(0x162)]['BackColor'];},Window_BattleLog['prototype'][_0x44ae36(0xab4)]=function(){return![];},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x115)]=function(_0x3b6cc9,_0x180d2c){const _0x584f07=_0x44ae36;this[_0x584f07(0xa21)](_0x584f07(0xba9)),BattleManager[_0x584f07(0xb1c)](_0x3b6cc9,_0x180d2c),this[_0x584f07(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x11b)]=function(_0x4c2167,_0x391f56,_0x3b5115){const _0x130a68=_0x44ae36;this['unshift'](_0x130a68(0xba9)),BattleManager[_0x130a68(0x3df)](_0x4c2167,_0x391f56,_0x3b5115),this[_0x130a68(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xba9)]=function(){const _0x5ae9b9=_0x44ae36;this[_0x5ae9b9(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)]['push']=function(_0x249e16){const _0x511e6d=_0x44ae36,_0x28c8da=Array[_0x511e6d(0x137)][_0x511e6d(0xb46)][_0x511e6d(0x689)](arguments,0x1),_0x3a066a={'name':_0x249e16,'params':_0x28c8da},_0x2ccba1=this[_0x511e6d(0x323)]['map'](_0x1f4dd9=>_0x1f4dd9['name'])[_0x511e6d(0x83c)](_0x511e6d(0xba9));_0x2ccba1>=0x0?this[_0x511e6d(0x323)]['splice'](_0x2ccba1,0x0,_0x3a066a):this['_methods'][_0x511e6d(0xa04)](_0x3a066a);},Window_BattleLog[_0x44ae36(0x137)]['unshift']=function(_0x1936ed){const _0x4853e0=_0x44ae36,_0x45b1fe=Array[_0x4853e0(0x137)][_0x4853e0(0xb46)][_0x4853e0(0x689)](arguments,0x1);this['_methods']['unshift']({'name':_0x1936ed,'params':_0x45b1fe});},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x548)]=function(){const _0x27d232=_0x44ae36;if(!$gameTemp['isPlaytest']())return;console['log'](this[_0x27d232(0x323)][_0x27d232(0x6e5)](_0x4b1435=>_0x4b1435[_0x27d232(0x674)])[_0x27d232(0x2bd)]('\x0a'));},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x514)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x749)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x749)]=function(){const _0x986039=_0x44ae36;this[_0x986039(0x69f)]=!![];},VisuMZ['BattleCore'][_0x44ae36(0x55f)]=Window_BattleLog[_0x44ae36(0x137)]['update'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x791cc6=_0x44ae36;VisuMZ[_0x791cc6(0x851)][_0x791cc6(0x55f)][_0x791cc6(0x689)](this);if(this[_0x791cc6(0x69f)])this['processRefresh']();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x665)]=function(){const _0x3e2b34=_0x44ae36;this[_0x3e2b34(0x69f)]=![],VisuMZ[_0x3e2b34(0x851)]['Window_BattleLog_refresh'][_0x3e2b34(0x689)](this);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x3cb)]=function(_0x4859ea){const _0x54aa38=_0x44ae36;let _0xbcd31b=VisuMZ['BattleCore']['Settings'][_0x54aa38(0x162)][_0x54aa38(0x104)][_0x54aa38(0x672)]()['trim'](),_0x12c674=this[_0x54aa38(0x531)][_0x4859ea];if(_0x12c674[_0x54aa38(0x54f)](/<LEFT>/i))_0xbcd31b='left';else{if(_0x12c674[_0x54aa38(0x54f)](/<CENTER>/i))_0xbcd31b=_0x54aa38(0x4e2);else _0x12c674[_0x54aa38(0x54f)](/<RIGHT>/i)&&(_0xbcd31b=_0x54aa38(0x657));}_0x12c674=_0x12c674[_0x54aa38(0xae9)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x12c674=_0x12c674['replace'](/\\I\[0\]/gi,'');const _0x284a68=this[_0x54aa38(0x310)](_0x4859ea);this[_0x54aa38(0x526)][_0x54aa38(0x446)](_0x284a68['x'],_0x284a68['y'],_0x284a68[_0x54aa38(0xa20)],_0x284a68[_0x54aa38(0x745)]);const _0x237d5e=this[_0x54aa38(0x1eb)](_0x12c674)[_0x54aa38(0xa20)];let _0x3280bd=_0x284a68['x'];if(_0xbcd31b===_0x54aa38(0x4e2))_0x3280bd+=(_0x284a68[_0x54aa38(0xa20)]-_0x237d5e)/0x2;else _0xbcd31b===_0x54aa38(0x657)&&(_0x3280bd+=_0x284a68[_0x54aa38(0xa20)]-_0x237d5e);this[_0x54aa38(0xb3c)](_0x12c674,_0x3280bd,_0x284a68['y'],_0x237d5e+0x8);},Window_BattleLog[_0x44ae36(0x137)]['addText']=function(_0x5da636){const _0x1ab616=_0x44ae36;this['_lines']['push'](_0x5da636),this[_0x1ab616(0x749)](),this['callNextMethod']();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x1d3)]=function(){const _0x51e653=_0x44ae36;let _0x23ce65=![];switch(this['_waitMode']){case _0x51e653(0xa2b):_0x23ce65=this['_spriteset'][_0x51e653(0x43e)]();break;case _0x51e653(0x448):_0x23ce65=this[_0x51e653(0x4b4)]['isAnyoneMoving']();break;case _0x51e653(0xa4c):_0x23ce65=this[_0x51e653(0x4b4)][_0x51e653(0xe4)]();break;case _0x51e653(0xbfc):_0x23ce65=this[_0x51e653(0x4b4)][_0x51e653(0xa70)]();break;case _0x51e653(0xf7):_0x23ce65=this[_0x51e653(0x4b4)]['isAnyoneJumping']();break;case _0x51e653(0x7b5):_0x23ce65=this['_spriteset'][_0x51e653(0xaac)]();break;}return!_0x23ce65&&(this['_waitMode']=''),_0x23ce65;},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x879)]=function(){const _0x2dea86=_0x44ae36;this[_0x2dea86(0x6d7)]('animation');},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xad3)]=function(){const _0x3a9e82=_0x44ae36;this[_0x3a9e82(0x6d7)](_0x3a9e82(0xbfc));},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xb70)]=function(){const _0x1a53d1=_0x44ae36;this[_0x1a53d1(0x6d7)]('jump');},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x8a8)]=function(){const _0x364900=_0x44ae36;this['setWaitMode'](_0x364900(0x7b5));},Window_BattleLog['prototype'][_0x44ae36(0xb33)]=function(){const _0x4d7e5c=_0x44ae36,_0xb20284=VisuMZ[_0x4d7e5c(0x851)][_0x4d7e5c(0xa08)][_0x4d7e5c(0x162)];if(!_0xb20284[_0x4d7e5c(0xb89)])return;this['push']('addText',_0xb20284[_0x4d7e5c(0x785)][_0x4d7e5c(0x4be)]($gameTroop[_0x4d7e5c(0x5f2)]())),this[_0x4d7e5c(0xa04)](_0x4d7e5c(0x707),_0xb20284[_0x4d7e5c(0x34d)]),this[_0x4d7e5c(0xa04)](_0x4d7e5c(0x87b));};function _0x48fa(_0x5db90e,_0x1eb2bc){const _0x2aab64=_0x2aab();return _0x48fa=function(_0x48fad5,_0x5f15d2){_0x48fad5=_0x48fad5-0xca;let _0x149e6a=_0x2aab64[_0x48fad5];return _0x149e6a;},_0x48fa(_0x5db90e,_0x1eb2bc);}var $subject,$action,$targets;Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x37a)]=function(_0x1e8587,_0x56ef30,_0x3c30f3){const _0x26544c=_0x44ae36;$subject=_0x1e8587,$action=_0x56ef30,$targets=_0x3c30f3,this[_0x26544c(0x6e7)](_0x56ef30)?BattleManager[_0x26544c(0x8bf)]():this[_0x26544c(0xbb8)](_0x1e8587,_0x56ef30,_0x3c30f3);},Window_BattleLog[_0x44ae36(0x137)]['isCustomActionSequence']=function(_0x5a129e){const _0xa48135=_0x44ae36;if(!SceneManager[_0xa48135(0xb75)]())return![];if(!_0x5a129e)return![];if(!_0x5a129e[_0xa48135(0x4ec)]())return![];if(_0x5a129e[_0xa48135(0x4ec)]()[_0xa48135(0x903)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0xa48135(0x4b0)](_0x5a129e[_0xa48135(0x4ec)]()))return!![];return![];},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xbb8)]=function(_0xf3f78f,_0x3ba170,_0x989ee2){const _0x3d5442=_0x44ae36;this[_0x3d5442(0x28a)](_0xf3f78f,_0x3ba170,_0x989ee2),this[_0x3d5442(0xa01)](_0xf3f78f,_0x3ba170,_0x989ee2),this[_0x3d5442(0xae8)](_0xf3f78f,_0x3ba170,_0x989ee2);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xaa3)]=function(_0x5f1491,_0x58c01f){const _0x1b5c98=_0x44ae36,_0x17d55d=VisuMZ[_0x1b5c98(0x851)][_0x1b5c98(0xa08)][_0x1b5c98(0x162)];_0x17d55d[_0x1b5c98(0xaec)]&&this[_0x1b5c98(0xa04)]('addText',_0x1b5c98(0xbd8)[_0x1b5c98(0x4be)](DataManager['battleDisplayText'](_0x58c01f)));if(DataManager[_0x1b5c98(0x5d2)](_0x58c01f)){if(_0x17d55d['ActionSkillMsg1'])this[_0x1b5c98(0xa61)](_0x58c01f['message1'],_0x5f1491,_0x58c01f);if(_0x17d55d[_0x1b5c98(0xa7b)])this[_0x1b5c98(0xa61)](_0x58c01f[_0x1b5c98(0x39d)],_0x5f1491,_0x58c01f);}else{if(_0x17d55d[_0x1b5c98(0x3a9)])this['displayItemMessage'](TextManager[_0x1b5c98(0x856)],_0x5f1491,_0x58c01f);}},Window_BattleLog['prototype'][_0x44ae36(0x28a)]=function(_0x399731,_0x476520,_0x12bf21){const _0x3af929=_0x44ae36,_0x47195c=_0x476520[_0x3af929(0x4ec)]();this[_0x3af929(0xaa3)](_0x399731,_0x47195c),this['push'](_0x3af929(0xb8a),_0x399731,_0x12bf21,!![]),this[_0x3af929(0xa04)]('performActionStart',_0x399731,_0x476520),this['push'](_0x3af929(0x8a2)),this[_0x3af929(0xa04)](_0x3af929(0x65f),_0x399731,_0x476520),this[_0x3af929(0xa04)](_0x3af929(0x879));},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa01)]=function(_0x4f7ab7,_0x244764,_0x5c1287){const _0x249089=_0x44ae36;if(this[_0x249089(0xa5e)](_0x244764))this[_0x249089(0xa9d)](_0x4f7ab7,_0x244764,_0x5c1287);else{if(this['isMeleeMultiTargetAction'](_0x244764))this[_0x249089(0x753)](_0x4f7ab7,_0x244764,_0x5c1287);else _0x244764[_0x249089(0x352)]()?this['targetActionSet'](_0x4f7ab7,_0x244764,_0x5c1287):this[_0x249089(0x588)](_0x4f7ab7,_0x244764,_0x5c1287);}},Window_BattleLog['prototype'][_0x44ae36(0x69c)]=function(_0x6a60f0,_0x3f33c2,_0x34c55a,_0xb40d91){const _0x2a87ac=_0x44ae36;if(_0x3f33c2){const _0x131a73=_0x6a60f0['battler']();this[_0x2a87ac(0xa04)]('performJump',[_0x6a60f0],_0x34c55a,_0xb40d91),this[_0x2a87ac(0xa04)](_0x2a87ac(0xbe8),_0x6a60f0,_0x131a73['_homeX'],_0x131a73['_homeY'],_0xb40d91,![],_0x2a87ac(0x45a)),this[_0x2a87ac(0xa04)](_0x2a87ac(0x7f4),[_0x6a60f0],_0x2a87ac(0x862)),this[_0x2a87ac(0xa04)]('waitForMovement'),this[_0x2a87ac(0xa04)](_0x2a87ac(0x7f4),[_0x6a60f0],'walk');}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x437938){const _0x4ac151=_0x44ae36;if(!_0x437938['isPhysical']())return![];if(!_0x437938['isForOne']())return![];if(!_0x437938['isForOpponent']())return![];return VisuMZ['BattleCore']['Settings']['ActionSequence'][_0x4ac151(0x549)];},Window_BattleLog[_0x44ae36(0x137)]['autoMeleeSingleTargetActionSet']=function(_0x19d55a,_0x415c08,_0x5a10ab){const _0x20c905=_0x44ae36,_0x2dbc49=_0x19d55a[_0x20c905(0x6b5)]()[_0x20c905(0x4d5)]<0x2,_0x4add11=0x14,_0x464d2b=0x30;let _0x551361=!![];_0x5a10ab[_0x20c905(0x2d9)]>0x0&&_0x19d55a[_0x20c905(0x30c)]()===_0x5a10ab[0x0][_0x20c905(0x30c)]()&&(_0x551361=![]);_0x2dbc49&&_0x551361&&(this[_0x20c905(0xa04)](_0x20c905(0x6d1),[_0x19d55a],_0x464d2b,_0x4add11),this[_0x20c905(0xa04)](_0x20c905(0x515),_0x19d55a,_0x5a10ab,_0x20c905(0x22c),_0x4add11,!![],_0x20c905(0x45a),!![]),this[_0x20c905(0xa04)](_0x20c905(0x7f4),[_0x19d55a],'walk'),this['push'](_0x20c905(0x8a2)));let _0x5d234c=_0x415c08[_0x20c905(0x3d5)]()?this[_0x20c905(0x724)](_0x19d55a):0x1;for(let _0x12571e=0x0;_0x12571e<_0x5d234c;_0x12571e++){_0x415c08[_0x20c905(0x3d5)]()&&_0x19d55a['isActor']()&&this[_0x20c905(0xa04)](_0x20c905(0x2b6),_0x19d55a,_0x12571e),_0x415c08[_0x20c905(0x4ec)]()[_0x20c905(0xa94)]<0x0?this[_0x20c905(0x545)](_0x19d55a,_0x415c08,_0x5a10ab):this[_0x20c905(0x588)](_0x19d55a,_0x415c08,_0x5a10ab);}_0x415c08['isAttack']()&&_0x19d55a[_0x20c905(0x30c)]()&&this[_0x20c905(0xa04)](_0x20c905(0xf8),_0x19d55a),this[_0x20c905(0xa04)](_0x20c905(0xb8a),_0x19d55a,_0x5a10ab,![]),this['addMeleeReturnActionSet'](_0x19d55a,_0x2dbc49,_0x464d2b,_0x4add11);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x204)]=function(_0x5449b5){const _0x98e5b9=_0x44ae36;if(!_0x5449b5[_0x98e5b9(0x72d)]())return![];if(!_0x5449b5[_0x98e5b9(0x695)]())return![];if(!_0x5449b5['isForOpponent']())return![];return VisuMZ[_0x98e5b9(0x851)]['Settings'][_0x98e5b9(0x512)][_0x98e5b9(0x94a)];},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x753)]=function(_0x4db9a3,_0x408869,_0x4cdcfe){const _0x5a0563=_0x44ae36,_0x572601=_0x4db9a3[_0x5a0563(0x6b5)]()[_0x5a0563(0x4d5)]<0x2,_0x3ce3c7=0x14,_0x4cac65=0x30;if(_0x572601){this[_0x5a0563(0xa04)](_0x5a0563(0x6d1),[_0x4db9a3],_0x4cac65,_0x3ce3c7);const _0x3a8441=_0x4cdcfe[_0x5a0563(0x2d9)]>0x1?_0x5a0563(0xa1d):_0x5a0563(0x22c);this['push'](_0x5a0563(0x515),_0x4db9a3,_0x4cdcfe,_0x3a8441,_0x3ce3c7,!![],_0x5a0563(0x45a),!![]),this['push'](_0x5a0563(0x7f4),[_0x4db9a3],_0x5a0563(0x6a3)),this[_0x5a0563(0xa04)]('waitForMovement');}let _0x5c9ae7=_0x408869['isAttack']()?this['getDualWieldTimes'](_0x4db9a3):0x1;for(let _0x75696=0x0;_0x75696<_0x5c9ae7;_0x75696++){_0x408869['isAttack']()&&_0x4db9a3[_0x5a0563(0x30c)]()&&this[_0x5a0563(0xa04)](_0x5a0563(0x2b6),_0x4db9a3,_0x75696),this['wholeActionSet'](_0x4db9a3,_0x408869,_0x4cdcfe);}_0x408869['isAttack']()&&_0x4db9a3['isActor']()&&this[_0x5a0563(0xa04)]('clearActiveWeaponSet',_0x4db9a3),this[_0x5a0563(0xa04)](_0x5a0563(0xb8a),_0x4db9a3,_0x4cdcfe,![]),this[_0x5a0563(0x69c)](_0x4db9a3,_0x572601,_0x4cac65,_0x3ce3c7);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x545)]=function(_0x204a0b,_0x5d2652,_0x157e72){const _0x15560a=_0x44ae36,_0x1efdb6=_0x5d2652[_0x15560a(0x4ec)]();for(const _0x46fa69 of _0x157e72){if(!_0x46fa69)continue;this[_0x15560a(0xa04)](_0x15560a(0x23a),_0x204a0b,_0x5d2652),this[_0x15560a(0xa04)](_0x15560a(0x707),Sprite_Battler[_0x15560a(0x906)]),this[_0x15560a(0xa04)](_0x15560a(0x8e3),_0x204a0b,[_0x46fa69],_0x1efdb6[_0x15560a(0xa94)]),this[_0x15560a(0xa04)](_0x15560a(0x707),0x18),this[_0x15560a(0xa04)](_0x15560a(0x115),_0x204a0b,_0x46fa69);}},Window_BattleLog[_0x44ae36(0x137)]['wholeActionSet']=function(_0x391b54,_0x153f44,_0x1b0d1d){const _0x3d8786=_0x44ae36,_0x559b58=_0x153f44[_0x3d8786(0x4ec)]();let _0x38699c=_0x153f44['isAttack']()?0x1+_0x391b54[_0x3d8786(0x1b6)]():0x1;while(_0x38699c--){this['push'](_0x3d8786(0x23a),_0x391b54,_0x153f44),this[_0x3d8786(0xa04)](_0x3d8786(0x707),Sprite_Battler[_0x3d8786(0x906)]),this[_0x3d8786(0xa04)](_0x3d8786(0x8e3),_0x391b54,_0x1b0d1d[_0x3d8786(0x577)](),_0x559b58[_0x3d8786(0xa94)]),this['push'](_0x3d8786(0x879));}for(const _0x3a2c85 of _0x1b0d1d){if(!_0x3a2c85)continue;this[_0x3d8786(0xa04)](_0x3d8786(0x115),_0x391b54,_0x3a2c85);}},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xae8)]=function(_0x412c07,_0x3d4d87,_0x485ee1){const _0x404980=_0x44ae36,_0x26b3d2=_0x3d4d87[_0x404980(0x4ec)]();this[_0x404980(0xa04)]('applyImmortal',_0x412c07,_0x485ee1,![]),this[_0x404980(0xa04)]('waitForNewLine'),this[_0x404980(0xa04)](_0x404980(0x47a)),this[_0x404980(0xa04)]('clear'),this['push'](_0x404980(0xa7f),_0x412c07),this[_0x404980(0xa04)](_0x404980(0x8a2));},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x51c)]=function(_0x369405){$subject=null,$action=null,$targets=[];},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x5a9)]=Window_BattleLog['prototype'][_0x44ae36(0x5e3)],Window_BattleLog['prototype'][_0x44ae36(0x5e3)]=function(_0x14ccfe){const _0x3dec6f=_0x44ae36;if(!VisuMZ['BattleCore'][_0x3dec6f(0xa08)][_0x3dec6f(0x162)][_0x3dec6f(0x737)])return;VisuMZ[_0x3dec6f(0x851)]['Window_BattleLog_displayCurrentState']['call'](this,_0x14ccfe);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x3ca)]=function(_0x17c9b9){const _0x58b465=_0x44ae36;this[_0x58b465(0xa04)]('performCounter',_0x17c9b9);VisuMZ[_0x58b465(0x851)][_0x58b465(0xa08)]['ActionSequence'][_0x58b465(0x8fb)]&&this[_0x58b465(0xa04)]('showAnimation',_0x17c9b9,[BattleManager[_0x58b465(0xb62)]],-0x1);if(!VisuMZ[_0x58b465(0x851)]['Settings']['BattleLog']['ShowCounter'])return;this[_0x58b465(0xa04)](_0x58b465(0x91d),TextManager[_0x58b465(0x3d2)][_0x58b465(0x4be)](_0x17c9b9[_0x58b465(0x674)]()));const _0x3d6bd8=VisuMZ[_0x58b465(0x851)][_0x58b465(0xa08)][_0x58b465(0x162)][_0x58b465(0xb02)]??0x0;if(_0x3d6bd8>0x0)this[_0x58b465(0xa04)](_0x58b465(0x707),_0x3d6bd8);;},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x97a)]=function(_0x359e15){const _0x9d0146=_0x44ae36;this[_0x9d0146(0xa04)](_0x9d0146(0x78a),_0x359e15);if(!VisuMZ['BattleCore']['Settings'][_0x9d0146(0x162)][_0x9d0146(0xba6)])return;this[_0x9d0146(0xa04)](_0x9d0146(0x91d),TextManager[_0x9d0146(0xa36)][_0x9d0146(0x4be)](_0x359e15[_0x9d0146(0x674)]()));const _0x59c7e7=VisuMZ[_0x9d0146(0x851)]['Settings'][_0x9d0146(0x162)][_0x9d0146(0x29a)]??0x0;if(_0x59c7e7>0x0)this[_0x9d0146(0xa04)]('waitCount',_0x59c7e7);;},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa58)]=function(_0x530ca0,_0x5e6347){const _0xbf496=_0x44ae36;if(VisuMZ[_0xbf496(0x851)][_0xbf496(0xa08)]['ActionSequence'][_0xbf496(0x675)]){const _0x56ddc4=_0x5e6347[_0xbf496(0x4ec)]();this[_0xbf496(0xa04)](_0xbf496(0x8e3),_0x530ca0,[_0x530ca0],_0x56ddc4[_0xbf496(0xa94)]);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x4f9feb,_0x1c7af9){const _0x31e297=_0x44ae36;this['push']('performSubstitute',_0x4f9feb,_0x1c7af9);if(!VisuMZ[_0x31e297(0x851)]['Settings']['BattleLog'][_0x31e297(0x8eb)])return;const _0x37a4ec=_0x4f9feb['name'](),_0x1f46bd=TextManager['substitute'][_0x31e297(0x4be)](_0x37a4ec,_0x1c7af9[_0x31e297(0x674)]());this[_0x31e297(0xa04)](_0x31e297(0x91d),_0x1f46bd);const _0x2ac5c1=VisuMZ[_0x31e297(0x851)]['Settings'][_0x31e297(0x162)][_0x31e297(0xde)]??0x0;if(_0x2ac5c1>0x0)this[_0x31e297(0xa04)](_0x31e297(0x707),_0x2ac5c1);;},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x4b5)]=Window_BattleLog['prototype']['displayActionResults'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x9fe)]=function(_0xc4ec1f,_0x5b2dec){const _0x564c93=_0x44ae36;VisuMZ[_0x564c93(0x851)][_0x564c93(0x4b5)][_0x564c93(0x689)](this,_0xc4ec1f,_0x5b2dec);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xbb6)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x712)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x712)]=function(_0x43f596){const _0x1e7929=_0x44ae36;if(!VisuMZ[_0x1e7929(0x851)]['Settings'][_0x1e7929(0x162)][_0x1e7929(0x6d5)])return;VisuMZ[_0x1e7929(0x851)][_0x1e7929(0xbb6)][_0x1e7929(0x689)](this,_0x43f596);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xba4)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xb0e)],Window_BattleLog['prototype'][_0x44ae36(0xb0e)]=function(_0x42444c){const _0x1bb337=_0x44ae36;if(!VisuMZ[_0x1bb337(0x851)]['Settings']['BattleLog']['ShowCritical'])return;VisuMZ['BattleCore'][_0x1bb337(0xba4)][_0x1bb337(0x689)](this,_0x42444c);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x727)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xb5a)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xb5a)]=function(_0x3ae5a0){const _0x146377=_0x44ae36;!VisuMZ[_0x146377(0x851)][_0x146377(0xa08)]['BattleLog'][_0x146377(0x178)]?this[_0x146377(0xa04)](_0x146377(0x45e),_0x3ae5a0):VisuMZ[_0x146377(0x851)]['Window_BattleLog_displayMiss'][_0x146377(0x689)](this,_0x3ae5a0);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x74c)]=Window_BattleLog[_0x44ae36(0x137)]['displayEvasion'],Window_BattleLog[_0x44ae36(0x137)]['displayEvasion']=function(_0x1c87e2){const _0x1112ca=_0x44ae36;!VisuMZ[_0x1112ca(0x851)][_0x1112ca(0xa08)]['BattleLog'][_0x1112ca(0x178)]?_0x1c87e2[_0x1112ca(0x70f)]()[_0x1112ca(0xb6c)]?this[_0x1112ca(0xa04)](_0x1112ca(0x9bd),_0x1c87e2):this['push'](_0x1112ca(0x257),_0x1c87e2):VisuMZ['BattleCore']['Window_BattleLog_displayEvasion'][_0x1112ca(0x689)](this,_0x1c87e2);},Window_BattleLog['prototype']['displayHpDamage']=function(_0x2694f5){const _0x432929=_0x44ae36;_0x2694f5[_0x432929(0x70f)]()[_0x432929(0x733)]&&(_0x2694f5[_0x432929(0x2b3)]=0x0,_0x2694f5[_0x432929(0x70f)]()[_0x432929(0x3ac)]>0x0&&!_0x2694f5[_0x432929(0x70f)]()[_0x432929(0x210)]&&(_0x2694f5[_0x432929(0x2b3)]=_0x2694f5[_0x432929(0x70f)]()[_0x432929(0x3ac)],this[_0x432929(0xa04)](_0x432929(0x477),_0x2694f5)),_0x2694f5[_0x432929(0x70f)]()[_0x432929(0x3ac)]<0x0&&this[_0x432929(0xa04)]('performRecovery',_0x2694f5),VisuMZ[_0x432929(0x851)][_0x432929(0xa08)]['BattleLog'][_0x432929(0x4ea)]&&this['push']('addText',this[_0x432929(0x52a)](_0x2694f5)));},VisuMZ[_0x44ae36(0x851)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa32)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa32)]=function(_0x21b0a9){const _0x518069=_0x44ae36;if(!VisuMZ[_0x518069(0x851)][_0x518069(0xa08)]['BattleLog'][_0x518069(0xa2c)])return;VisuMZ['BattleCore'][_0x518069(0x547)][_0x518069(0x689)](this,_0x21b0a9);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x2a0)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x2ab)],Window_BattleLog[_0x44ae36(0x137)]['displayTpDamage']=function(_0x28a23f){const _0x66c707=_0x44ae36;if(!VisuMZ[_0x66c707(0x851)][_0x66c707(0xa08)][_0x66c707(0x162)]['ShowTpDmg'])return;VisuMZ[_0x66c707(0x851)][_0x66c707(0x2a0)]['call'](this,_0x28a23f);},Window_BattleLog[_0x44ae36(0x137)]['displayAffectedStatus']=function(_0xd98a61){const _0x3ba189=_0x44ae36;_0xd98a61[_0x3ba189(0x70f)]()[_0x3ba189(0xa26)]()&&(this[_0x3ba189(0xa04)]('pushBaseLine'),this[_0x3ba189(0x3a7)](_0xd98a61),this[_0x3ba189(0xb92)](_0xd98a61),this[_0x3ba189(0xa04)](_0x3ba189(0xb41)));},Window_BattleLog['prototype'][_0x44ae36(0x596)]=function(_0x376830){const _0xc1dbb=_0x44ae36,_0x5a49a8=_0x376830[_0xc1dbb(0x70f)](),_0xb6047e=_0x5a49a8[_0xc1dbb(0x642)]();for(const _0x56c17d of _0xb6047e){const _0x1524c7=_0x376830[_0xc1dbb(0x30c)]()?_0x56c17d[_0xc1dbb(0xcd)]:_0x56c17d[_0xc1dbb(0x39d)];_0x1524c7&&VisuMZ[_0xc1dbb(0x851)][_0xc1dbb(0xa08)][_0xc1dbb(0x162)][_0xc1dbb(0xa49)]&&(this[_0xc1dbb(0xa04)]('fnordAddedStates'),this[_0xc1dbb(0xa04)](_0xc1dbb(0x4c7)),this[_0xc1dbb(0xa04)](_0xc1dbb(0x6ad)),this[_0xc1dbb(0xa04)](_0xc1dbb(0x91d),_0x1524c7[_0xc1dbb(0x4be)](_0x376830[_0xc1dbb(0x674)]())),this[_0xc1dbb(0xa04)](_0xc1dbb(0x26f))),_0x56c17d['id']===_0x376830[_0xc1dbb(0x102)]()&&this['push'](_0xc1dbb(0x228),_0x376830);}},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x452)]=function(){},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x8fe)]=function(_0x35dc28){const _0x25a9a1=_0x44ae36;if(!VisuMZ[_0x25a9a1(0x851)][_0x25a9a1(0xa08)][_0x25a9a1(0x162)][_0x25a9a1(0xa77)])return;const _0x244140=_0x35dc28[_0x25a9a1(0x70f)](),_0x487696=_0x244140[_0x25a9a1(0xa29)]();for(const _0x447d65 of _0x487696){_0x447d65[_0x25a9a1(0x88f)]&&(this['push'](_0x25a9a1(0x342)),this[_0x25a9a1(0xa04)](_0x25a9a1(0x4c7)),this[_0x25a9a1(0xa04)](_0x25a9a1(0x6ad)),this['push']('addText',_0x447d65[_0x25a9a1(0x88f)][_0x25a9a1(0x4be)](_0x35dc28[_0x25a9a1(0x674)]())),this[_0x25a9a1(0xa04)]('wait'));}},Window_BattleLog['prototype']['fnordRemovedStates']=function(){},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xb92)]=function(_0x19eeeb){const _0x881021=_0x44ae36,_0x59552a=VisuMZ['BattleCore']['Settings'][_0x881021(0x162)],_0x515d11=_0x19eeeb[_0x881021(0x70f)]();if(_0x59552a[_0x881021(0x35a)])this[_0x881021(0x88b)](_0x19eeeb,_0x515d11['addedBuffs'],TextManager[_0x881021(0x93a)]);if(_0x59552a[_0x881021(0xa78)])this['displayBuffs'](_0x19eeeb,_0x515d11['addedDebuffs'],TextManager[_0x881021(0x3f4)]);if(_0x59552a[_0x881021(0x66f)])this[_0x881021(0x88b)](_0x19eeeb,_0x515d11['removedBuffs'],TextManager[_0x881021(0x756)]);},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x88b)]=function(_0x56d773,_0xaafabc,_0x488462){const _0x5a6e84=_0x44ae36;for(const _0x123d98 of _0xaafabc){const _0x357704=_0x488462[_0x5a6e84(0x4be)](_0x56d773[_0x5a6e84(0x674)](),TextManager[_0x5a6e84(0x95a)](_0x123d98));this['push'](_0x5a6e84(0x4c7)),this[_0x5a6e84(0xa04)](_0x5a6e84(0x6ad)),this[_0x5a6e84(0xa04)](_0x5a6e84(0x91d),_0x357704),this[_0x5a6e84(0xa04)](_0x5a6e84(0x26f));}},VisuMZ['BattleCore'][_0x44ae36(0x693)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x87b)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x87b)]=function(){const _0x37ddc8=_0x44ae36;VisuMZ['BattleCore']['Window_BattleLog_clear']['call'](this),this[_0x37ddc8(0x55b)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x483)]=Window_BattleLog[_0x44ae36(0x137)]['pushBaseLine'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x6ad)]=function(){const _0x59c5a1=_0x44ae36;VisuMZ['BattleCore'][_0x59c5a1(0x483)][_0x59c5a1(0x689)](this),this['callNextMethod']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x619)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x4c7)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x4c7)]=function(){const _0x7ac366=_0x44ae36;VisuMZ['BattleCore'][_0x7ac366(0x619)]['call'](this),this[_0x7ac366(0x665)](),this['callNextMethod']();},VisuMZ['BattleCore'][_0x44ae36(0x425)]=Window_BattleLog[_0x44ae36(0x137)]['popupDamage'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xae7)]=function(_0x9910bb){const _0x2b01d9=_0x44ae36;VisuMZ[_0x2b01d9(0x851)][_0x2b01d9(0x425)][_0x2b01d9(0x689)](this,_0x9910bb),this['callNextMethod']();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xb41)]=function(){const _0x1368bc=_0x44ae36;let _0x58a55b=0x0;this['_baseLineStack'][_0x1368bc(0x2d9)]>0x0&&(_0x58a55b=this['_baseLineStack'][this['_baseLineStack']['length']-0x1]),this[_0x1368bc(0x531)][_0x1368bc(0x2d9)]>_0x58a55b?this['wait']():this['callNextMethod']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x300)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xfc)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xfc)]=function(_0x4fbda7,_0x1b9688){const _0x2f5783=_0x44ae36;VisuMZ[_0x2f5783(0x851)][_0x2f5783(0x300)][_0x2f5783(0x689)](this,_0x4fbda7,_0x1b9688),this[_0x2f5783(0x55b)]();},VisuMZ[_0x44ae36(0x851)]['Window_BattleLog_performAction']=Window_BattleLog[_0x44ae36(0x137)]['performAction'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x23a)]=function(_0x430b7b,_0x509561){const _0x5e4c6c=_0x44ae36;VisuMZ[_0x5e4c6c(0x851)][_0x5e4c6c(0x179)][_0x5e4c6c(0x689)](this,_0x430b7b,_0x509561),this[_0x5e4c6c(0x55b)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa9f)]=Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa7f)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xa7f)]=function(_0x44e0e0){const _0x324137=_0x44ae36;VisuMZ['BattleCore'][_0x324137(0xa9f)][_0x324137(0x689)](this,_0x44e0e0);for(const _0x431243 of BattleManager[_0x324137(0x765)]()){if(!_0x431243)continue;if(_0x431243[_0x324137(0xb6d)]())continue;_0x431243[_0x324137(0x365)]();}this[_0x324137(0x55b)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x62d)]=Window_BattleLog[_0x44ae36(0x137)]['performDamage'],Window_BattleLog['prototype'][_0x44ae36(0x477)]=function(_0x5bbf56){const _0x27124f=_0x44ae36;VisuMZ[_0x27124f(0x851)][_0x27124f(0x62d)][_0x27124f(0x689)](this,_0x5bbf56),this[_0x27124f(0x55b)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x78c)]=Window_BattleLog['prototype'][_0x44ae36(0x45e)],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x45e)]=function(_0xb35c6e){const _0x102ef8=_0x44ae36;VisuMZ['BattleCore'][_0x102ef8(0x78c)]['call'](this,_0xb35c6e),this[_0x102ef8(0x55b)]();},VisuMZ[_0x44ae36(0x851)]['Window_BattleLog_performRecovery']=Window_BattleLog['prototype'][_0x44ae36(0xa63)],Window_BattleLog[_0x44ae36(0x137)]['performRecovery']=function(_0x4a3ac4){const _0x52cd29=_0x44ae36;VisuMZ[_0x52cd29(0x851)][_0x52cd29(0x37b)]['call'](this,_0x4a3ac4),this[_0x52cd29(0x55b)]();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x437)]=Window_BattleLog[_0x44ae36(0x137)]['performEvasion'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x9bd)]=function(_0x34e90f){const _0x3a9b57=_0x44ae36;VisuMZ[_0x3a9b57(0x851)]['Window_BattleLog_performEvasion'][_0x3a9b57(0x689)](this,_0x34e90f),this[_0x3a9b57(0x55b)]();},VisuMZ['BattleCore'][_0x44ae36(0x475)]=Window_BattleLog[_0x44ae36(0x137)]['performMagicEvasion'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x257)]=function(_0x40c85b){const _0x18fd96=_0x44ae36;VisuMZ[_0x18fd96(0x851)]['Window_BattleLog_performMagicEvasion'][_0x18fd96(0x689)](this,_0x40c85b),this['callNextMethod']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x1ea)]=Window_BattleLog['prototype']['performCounter'],Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x530)]=function(_0x4e5c82){const _0x5ae21f=_0x44ae36;VisuMZ[_0x5ae21f(0x851)]['Window_BattleLog_performCounter'][_0x5ae21f(0x689)](this,_0x4e5c82),this['callNextMethod']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x865)]=Window_BattleLog['prototype'][_0x44ae36(0x78a)],Window_BattleLog['prototype'][_0x44ae36(0x78a)]=function(_0x36eecc){const _0x306e84=_0x44ae36;VisuMZ[_0x306e84(0x851)][_0x306e84(0x865)][_0x306e84(0x689)](this,_0x36eecc),this['callNextMethod']();},VisuMZ['BattleCore'][_0x44ae36(0x778)]=Window_BattleLog['prototype'][_0x44ae36(0xaaa)],Window_BattleLog[_0x44ae36(0x137)]['performSubstitute']=function(_0x5dde13,_0x132461){const _0x1930d9=_0x44ae36;VisuMZ[_0x1930d9(0x851)][_0x1930d9(0x778)][_0x1930d9(0x689)](this,_0x5dde13,_0x132461),this['callNextMethod']();},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x6e1)]=Window_BattleLog[_0x44ae36(0x137)]['performCollapse'],Window_BattleLog['prototype'][_0x44ae36(0x228)]=function(_0x106206){const _0x2e6e8d=_0x44ae36;VisuMZ['BattleCore']['Window_BattleLog_performCollapse'][_0x2e6e8d(0x689)](this,_0x106206),this[_0x2e6e8d(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x65f)]=function(_0x3b91a9,_0x50e708){const _0xd49b06=_0x44ae36;_0x3b91a9[_0xd49b06(0x65f)](_0x50e708),this[_0xd49b06(0x55b)]();},Window_BattleLog['prototype'][_0x44ae36(0x236)]=function(_0x3de948,_0x226899){const _0x221d53=_0x44ae36,_0x31b5ea=_0x3de948[_0x221d53(0x79b)]();_0x31b5ea<=0x0?SoundManager[_0x221d53(0x86d)]():this[_0x221d53(0x4c6)](_0x226899,_0x31b5ea);},Window_BattleLog['prototype'][_0x44ae36(0xb8a)]=function(_0x16eb20,_0x7f51bb,_0x52bc26){const _0x3c2be3=_0x44ae36,_0x54a4f0=[_0x16eb20]['concat'](_0x7f51bb);for(const _0x520b88 of _0x54a4f0){if(!_0x520b88)continue;_0x520b88[_0x3c2be3(0x570)](_0x52bc26);}this[_0x3c2be3(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)]['waitCount']=function(_0x57014b){this['_waitCount']=_0x57014b;},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x7f4)]=function(_0x5bbfd8,_0x2cc03f){const _0xf763b8=_0x44ae36;for(const _0x13be15 of _0x5bbfd8){if(!_0x13be15)continue;_0x13be15[_0xf763b8(0x7f4)](_0x2cc03f);}this[_0xf763b8(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0xbe8)]=function(_0x4ca82b,_0xf9792b,_0x3b2b79,_0x4b00d4,_0x26a6c5,_0x4770e6){const _0x175d97=_0x44ae36;_0x4ca82b['moveBattlerToPoint'](_0xf9792b,_0x3b2b79,_0x4b00d4,_0x26a6c5,_0x4770e6,-0x1),this[_0x175d97(0x55b)]();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x515)]=function(_0x896d85,_0x178415,_0x444e95,_0xa161d7,_0x184837,_0x210c11,_0x52973f){const _0x3e516e=_0x44ae36,_0x2e7bce=Math[_0x3e516e(0x920)](..._0x178415[_0x3e516e(0x6e5)](_0x419f2d=>_0x419f2d[_0x3e516e(0x7ef)]()['_baseX']-_0x419f2d[_0x3e516e(0x7ef)]()['mainSpriteWidth']()/0x2)),_0x55cade=Math[_0x3e516e(0x131)](..._0x178415[_0x3e516e(0x6e5)](_0x4dd875=>_0x4dd875[_0x3e516e(0x7ef)]()[_0x3e516e(0x358)]+_0x4dd875[_0x3e516e(0x7ef)]()['mainSpriteWidth']()/0x2)),_0x367ec9=Math[_0x3e516e(0x920)](..._0x178415[_0x3e516e(0x6e5)](_0x343e4f=>_0x343e4f[_0x3e516e(0x7ef)]()[_0x3e516e(0x5b5)]-_0x343e4f[_0x3e516e(0x7ef)]()[_0x3e516e(0x977)]())),_0xc7001e=Math[_0x3e516e(0x131)](..._0x178415[_0x3e516e(0x6e5)](_0x970664=>_0x970664[_0x3e516e(0x7ef)]()[_0x3e516e(0x5b5)])),_0x1d1795=_0x178415[_0x3e516e(0x1e5)](_0xf198ce=>_0xf198ce[_0x3e516e(0x30c)]())[_0x3e516e(0x2d9)],_0x4e5df1=_0x178415[_0x3e516e(0x1e5)](_0x15d83d=>_0x15d83d['isEnemy']())[_0x3e516e(0x2d9)];let _0x2ac231=0x0,_0x52a076=0x0;if(_0x444e95[_0x3e516e(0x54f)](/front/i))_0x2ac231=_0x1d1795>=_0x4e5df1?_0x2e7bce:_0x55cade;else{if(_0x444e95['match'](/middle/i))_0x2ac231=(_0x2e7bce+_0x55cade)/0x2,_0x52973f=-0x1;else _0x444e95[_0x3e516e(0x54f)](/back/i)&&(_0x2ac231=_0x1d1795>=_0x4e5df1?_0x55cade:_0x2e7bce);}if(_0x444e95[_0x3e516e(0x54f)](/head/i))_0x52a076=_0x367ec9;else{if(_0x444e95['match'](/center/i)){_0x52a076=(_0x367ec9+_0xc7001e)/0x2;if(_0x896d85[_0x3e516e(0x7ef)]())_0x52a076+=_0x896d85[_0x3e516e(0x7ef)]()['height']/0x2;}else _0x444e95[_0x3e516e(0x54f)](/base/i)&&(_0x52a076=_0xc7001e);}_0x896d85[_0x3e516e(0x3db)](_0x2ac231,_0x52a076,_0xa161d7,_0x184837,_0x210c11,_0x52973f),this['callNextMethod']();},Window_BattleLog[_0x44ae36(0x137)][_0x44ae36(0x6d1)]=function(_0x4eeef3,_0x30fd06,_0x592c76){const _0x2039da=_0x44ae36;for(const _0x417098 of _0x4eeef3){if(!_0x417098)continue;_0x417098[_0x2039da(0x7c1)](_0x30fd06,_0x592c76);}this[_0x2039da(0x55b)]();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget['prototype']=Object['create'](Window_Command[_0x44ae36(0x137)]),Window_BattleMultiTarget[_0x44ae36(0x137)]['constructor']=Window_BattleMultiTarget,VisuMZ['BattleCore']['Settings'][_0x44ae36(0x1bc)]=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x1bc)]||{},Window_BattleMultiTarget[_0x44ae36(0xacf)]=VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x1bc)][_0x44ae36(0xb8e)]??0x118,Window_BattleMultiTarget[_0x44ae36(0x3bf)]=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)]['MultiTarget']['BgType']??0x2,Window_BattleMultiTarget[_0x44ae36(0x3d8)]=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x1bc)][_0x44ae36(0x3f8)]??!![],Window_BattleMultiTarget[_0x44ae36(0x700)]=VisuMZ[_0x44ae36(0x851)]['Settings']['MultiTarget'][_0x44ae36(0x948)]??_0x44ae36(0x56b),Window_BattleMultiTarget[_0x44ae36(0x581)]=VisuMZ[_0x44ae36(0x851)]['Settings']['MultiTarget'][_0x44ae36(0xb74)]??_0x44ae36(0x504),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x1bc)][_0x44ae36(0x7d0)]??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x1bc)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x44ae36(0x59d)]=VisuMZ['BattleCore']['Settings']['MultiTarget'][_0x44ae36(0x1a8)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_Y']=VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)]['MultiTarget'][_0x44ae36(0x901)]??0x0,Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0x58b)]=function(_0x10e8cb,_0x5d0b98){const _0x3af82c=_0x44ae36;this[_0x3af82c(0x574)]=_0x5d0b98,Window_Command[_0x3af82c(0x137)][_0x3af82c(0x58b)][_0x3af82c(0x689)](this,_0x10e8cb),this[_0x3af82c(0x517)](Window_BattleMultiTarget[_0x3af82c(0x3bf)]),this[_0x3af82c(0x1f2)](),this[_0x3af82c(0x5ed)](),this[_0x3af82c(0x360)]();},Window_BattleMultiTarget['prototype'][_0x44ae36(0x97c)]=function(){const _0x4cc74f=_0x44ae36;return this[_0x4cc74f(0x574)];},Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0x82a)]=function(){const _0x423c30=_0x44ae36;let _0x147206=this[_0x423c30(0x97c)]()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget[_0x423c30(0x581)];if(Imported[_0x423c30(0x6c8)]&&Window_BattleMultiTarget['SHOW_BUTTON']){this[_0x423c30(0xa23)]=this[_0x423c30(0x97c)]()?_0x423c30(0x983):_0x423c30(0x76f),this[_0x423c30(0xb4c)]=TextManager[_0x423c30(0x328)](this['_buttonKey']);const _0x228a5d=VisuMZ['CoreEngine'][_0x423c30(0xa08)][_0x423c30(0x1d2)]['TextFmt'];_0x147206=_0x228a5d[_0x423c30(0x4be)](this[_0x423c30(0xb4c)],_0x147206);}this[_0x423c30(0x967)](_0x147206,_0x423c30(0x410));},Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0x607)]=function(_0x3adde9){const _0xf93ac0=_0x44ae36,_0xb4d5e1=this[_0xf93ac0(0x8db)](_0x3adde9);this[_0xf93ac0(0xec)](),this['changePaintOpacity'](this[_0xf93ac0(0x41a)](_0x3adde9));const _0x146a80=this[_0xf93ac0(0x793)](_0x3adde9),_0x3c3f36=this[_0xf93ac0(0x1eb)](_0x146a80)[_0xf93ac0(0xa20)],_0x277bb0=_0xb4d5e1['x']+Math[_0xf93ac0(0xb78)]((_0xb4d5e1[_0xf93ac0(0xa20)]-_0x3c3f36)/0x2);this[_0xf93ac0(0xb3c)](_0x146a80,_0x277bb0,_0xb4d5e1['y'],_0xb4d5e1['width']);},Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x4e3ca3=_0x44ae36;Window_Command[_0x4e3ca3(0x137)][_0x4e3ca3(0xa8a)][_0x4e3ca3(0x689)](this),this[_0x4e3ca3(0x4b2)](),this[_0x4e3ca3(0x7e4)]();},Window_BattleMultiTarget['prototype']['updateVisibility']=function(){const _0x4bb9cd=_0x44ae36;this[_0x4bb9cd(0x7bb)]=this[_0x4bb9cd(0xbab)]();},Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0xbab)]=function(){const _0x3f74cb=_0x44ae36,_0x58914e=BattleManager[_0x3f74cb(0x3a8)](),_0x58e8d6=_0x58914e&&_0x58914e[_0x3f74cb(0x6e4)]();if(!_0x58e8d6)return![];const _0x1bfb5c=SceneManager[_0x3f74cb(0x97d)];if(this['forActor']()){if(_0x1bfb5c['_actorWindow'][_0x3f74cb(0xac7)]&&_0x1bfb5c[_0x3f74cb(0xad6)]['_handlers'][_0x3f74cb(0x983)])return!![];if(_0x1bfb5c[_0x3f74cb(0x9bc)]['active']&&_0x1bfb5c[_0x3f74cb(0x9bc)][_0x3f74cb(0x801)][_0x3f74cb(0x983)])return!![];}else{if(_0x1bfb5c['_enemyWindow'][_0x3f74cb(0xac7)]&&_0x1bfb5c[_0x3f74cb(0x9bc)]['_handlers'][_0x3f74cb(0x76f)])return!![];}return![];},Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0x7e4)]=function(){const _0xaff34f=_0x44ae36;if(!Imported['VisuMZ_0_CoreEngine'])return;this[_0xaff34f(0xb4c)]!==TextManager[_0xaff34f(0x328)](this['_buttonKey'])&&this[_0xaff34f(0x749)]();},Window_BattleMultiTarget[_0x44ae36(0x137)][_0x44ae36(0xa5a)]=function(){const _0x219b7d=_0x44ae36;if(this[_0x219b7d(0x7bb)]&&TouchInput[_0x219b7d(0xbe4)]()){const _0x9b4b14=this[_0x219b7d(0x880)]();if(_0x9b4b14>=0x0){const _0x86d8b7=this['forActor']()?_0x219b7d(0x983):_0x219b7d(0x76f);Input[_0x219b7d(0x185)](_0x86d8b7);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter[_0x44ae36(0x137)]=Object['create'](Window_Base[_0x44ae36(0x137)]),Window_DamageCounter['prototype'][_0x44ae36(0x6ea)]=Window_DamageCounter,Window_DamageCounter[_0x44ae36(0x81b)]={'enabled':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)]['Enable']??!![],'customFontFace':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)]['CustomFontFace']??'','textAlign':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)][_0x44ae36(0x104)]??_0x44ae36(0x5fb),'hitsDmgFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)][_0x44ae36(0x346)]??_0x44ae36(0xad2),'hitsHealFmt':VisuMZ['BattleCore'][_0x44ae36(0xa08)]['ComboWindow'][_0x44ae36(0x2ee)]??_0x44ae36(0x1ad),'totalDmgFmt':VisuMZ['BattleCore']['Settings'][_0x44ae36(0x89f)][_0x44ae36(0x135)]??_0x44ae36(0x64b),'totalHealFmt':VisuMZ[_0x44ae36(0x851)]['Settings'][_0x44ae36(0x89f)]['totalHealFmt']??_0x44ae36(0x77f),'fadeShiftX':VisuMZ[_0x44ae36(0x851)]['Settings'][_0x44ae36(0x89f)][_0x44ae36(0x1d4)]??-0x2,'fadeShiftY':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)][_0x44ae36(0x6b1)]??0x0,'positionOffsetX':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x89f)][_0x44ae36(0x39b)]??0x0,'positionOffsetY':VisuMZ['BattleCore'][_0x44ae36(0xa08)]['ComboWindow'][_0x44ae36(0x5ea)]??0x0,'updateDuration':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)][_0x44ae36(0x2a5)]??0x14,'minimumStayDuration':VisuMZ['BattleCore']['Settings'][_0x44ae36(0x89f)]['minimumStayDuration']??0x28,'minimumHits':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x89f)]['minimumHits']??0x1,'opacitySpeed':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x89f)][_0x44ae36(0x991)]??0x10},Window_DamageCounter['prototype']['initialize']=function(_0x25936b){const _0x53c30b=_0x44ae36;this[_0x53c30b(0x688)]=0x0,Window_Base[_0x53c30b(0x137)][_0x53c30b(0x58b)][_0x53c30b(0x689)](this,_0x25936b),this[_0x53c30b(0x9df)]=_0x25936b['x'],this['_targetY']=_0x25936b['y'],this[_0x53c30b(0xa55)](),this[_0x53c30b(0x517)](0x2);},Window_DamageCounter['prototype'][_0x44ae36(0xa55)]=function(){const _0x4bb5d3=_0x44ae36;this[_0x4bb5d3(0xb12)]=0x0,this[_0x4bb5d3(0x13e)]=0x0,this['_totalDamage']=0x0,this[_0x4bb5d3(0x26d)]=0x0,this['_targetDamage']=0x0;},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0xbb5)]=function(){const _0x4a1268=_0x44ae36;Window_Base[_0x4a1268(0x137)]['resetFontSettings']['call'](this);const _0x11fd80=Window_DamageCounter[_0x4a1268(0x81b)];_0x11fd80['customFontFace']?this['contents'][_0x4a1268(0x18b)]=_0x11fd80[_0x4a1268(0xb7f)]:this[_0x4a1268(0x526)][_0x4a1268(0x18b)]=$gameSystem['numberFontFace']();};var $comboWindowReset=function(){const _0x45244c=_0x44ae36;if(!SceneManager[_0x45244c(0xb75)]())return;const _0x5aa9a8=SceneManager[_0x45244c(0x97d)]['_damageCounterWindow'];if(_0x5aa9a8)_0x5aa9a8[_0x45244c(0xa55)]();};Window_DamageCounter[_0x44ae36(0x137)]['increaseHits']=function(_0x4b1569){const _0xa2f378=_0x44ae36;this['_targetHits']+=Math[_0xa2f378(0x875)](_0x4b1569);const _0x42f681=Window_DamageCounter[_0xa2f378(0x81b)];this[_0xa2f378(0xb12)]=_0x42f681[_0xa2f378(0x2a5)],this['_targetHits']>=_0x42f681['minimumHits']&&(this[_0xa2f378(0x688)]=_0x42f681[_0xa2f378(0x5a8)]);};var $comboWindowIncreaseHits=function(_0x12f8b5){const _0x5089a2=_0x44ae36;if(!SceneManager[_0x5089a2(0xb75)]())return;const _0x1350f7=SceneManager[_0x5089a2(0x97d)]['_damageCounterWindow'];if(_0x1350f7)_0x1350f7[_0x5089a2(0x636)](_0x12f8b5);};Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0x895)]=function(_0x626e3f){const _0x3a1ef8=_0x44ae36;this[_0x3a1ef8(0x3bd)]+=Math[_0x3a1ef8(0x875)](_0x626e3f);const _0x3feb6b=Window_DamageCounter[_0x3a1ef8(0x81b)];this[_0x3a1ef8(0xb12)]=_0x3feb6b[_0x3a1ef8(0x2a5)],this[_0x3a1ef8(0x26d)]>=_0x3feb6b[_0x3a1ef8(0x29e)]&&(this[_0x3a1ef8(0x688)]=_0x3feb6b[_0x3a1ef8(0x5a8)]);};var $comboWindowIncreaseDamage=function(_0x3a53cf){const _0x2e1e50=_0x44ae36;if(!SceneManager[_0x2e1e50(0xb75)]())return;const _0x387a7a=SceneManager['_scene'][_0x2e1e50(0x79d)];if(_0x387a7a)_0x387a7a[_0x2e1e50(0x895)](_0x3a53cf);},$comboWindowIncreaseHealing=function(_0xfdd3bf){const _0x98bc2=_0x44ae36;if(!SceneManager[_0x98bc2(0xb75)]())return;const _0x3506a0=SceneManager[_0x98bc2(0x97d)][_0x98bc2(0x79d)];if(_0x3506a0)_0x3506a0[_0x98bc2(0x895)](-_0xfdd3bf);};VisuMZ['BattleCore'][_0x44ae36(0x20f)]=Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xbe2)],Scene_Battle['prototype'][_0x44ae36(0xbe2)]=function(){const _0x4056da=_0x44ae36;this[_0x4056da(0x818)](),VisuMZ[_0x4056da(0x851)]['Scene_Battle_createAllWindows_ComboWindow']['call'](this);},Scene_Battle['prototype'][_0x44ae36(0x818)]=function(){const _0x392c69=_0x44ae36;if(!Window_DamageCounter[_0x392c69(0x81b)][_0x392c69(0x218)])return;const _0x480931=this['damageCounterWindowRect'](),_0x3a4694=new Window_DamageCounter(_0x480931);this[_0x392c69(0x56c)](_0x3a4694),this[_0x392c69(0x79d)]=_0x3a4694;},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0xaa8)]=function(){const _0xf98e3e=_0x44ae36;if(VisuMZ[_0xf98e3e(0x851)]['Settings'][_0xf98e3e(0x89f)][_0xf98e3e(0x329)])return VisuMZ['BattleCore'][_0xf98e3e(0xa08)][_0xf98e3e(0x89f)][_0xf98e3e(0x329)][_0xf98e3e(0x689)](this);const _0x28cc93=Math[_0xf98e3e(0xb2f)](Graphics[_0xf98e3e(0xa20)]/0x4),_0x51e000=this[_0xf98e3e(0x6c1)](0x2,!![]),_0x4be200=0x0+this[_0xf98e3e(0x442)](),_0x2add31=Math['round'](Graphics[_0xf98e3e(0x7a7)]*0x1/0x3)+this['comboWindowOffsetY']();return new Rectangle(_0x4be200,_0x2add31,_0x28cc93,_0x51e000);},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x442)]=function(){const _0x5c85b0=_0x44ae36;return Window_DamageCounter[_0x5c85b0(0x81b)][_0x5c85b0(0x5e8)];},Scene_Battle[_0x44ae36(0x137)][_0x44ae36(0x3ff)]=function(){const _0x596860=_0x44ae36;return Window_DamageCounter[_0x596860(0x81b)]['positionOffsetY'];},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0xa8a)]=function(){const _0x55b93f=_0x44ae36;Window_Base[_0x55b93f(0x137)][_0x55b93f(0xa8a)]['call'](this),this[_0x55b93f(0x767)](),this['updateOpacity']();},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0x767)]=function(){const _0x4ccf30=_0x44ae36;if(this[_0x4ccf30(0xb12)]<=0x0)return;const _0x3efef6=this[_0x4ccf30(0xb12)];this[_0x4ccf30(0x13e)]=this[_0x4ccf30(0x26d)],this[_0x4ccf30(0x4a5)]=(this[_0x4ccf30(0x4a5)]*(_0x3efef6-0x1)+this[_0x4ccf30(0x3bd)])/_0x3efef6,this[_0x4ccf30(0xb12)]--,this[_0x4ccf30(0xb12)]<=0x0&&(this[_0x4ccf30(0x13e)]=this[_0x4ccf30(0x26d)],this[_0x4ccf30(0x4a5)]=this[_0x4ccf30(0x3bd)]),this[_0x4ccf30(0x749)]();},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0x462)]=function(){const _0x11aeb1=_0x44ae36,_0xf646f7=Window_DamageCounter[_0x11aeb1(0x81b)],_0x1e6690=this[_0x11aeb1(0xbab)](),_0x27665e=_0xf646f7[_0x11aeb1(0x991)]||0x1;if(_0x1e6690&&this['contentsOpacity']<0xff)this[_0x11aeb1(0x397)]+=_0x27665e;else!_0x1e6690&&this[_0x11aeb1(0x397)]>0x0&&(this['contentsOpacity']-=_0x27665e,this['x']+=_0xf646f7[_0x11aeb1(0x1d4)]||0x0,this['y']+=_0xf646f7['fadeShiftY']||0x0);},Window_DamageCounter[_0x44ae36(0x137)]['visibilityState']=function(){const _0x24f104=_0x44ae36,_0x5b4f39=Window_DamageCounter['SETTINGS'];if(this[_0x24f104(0x26d)]>=_0x5b4f39['minimumHits'])return!![];if(this[_0x24f104(0x688)]-->0x0)return!![];return![];},VisuMZ['BattleCore']['Game_Action_executeHpDamage_ComboWindow']=Game_Action[_0x44ae36(0x137)][_0x44ae36(0x6e2)],Game_Action[_0x44ae36(0x137)][_0x44ae36(0x6e2)]=function(_0x2b8e60,_0x1ba638){const _0x4e2bb7=_0x44ae36;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x1ba638),VisuMZ[_0x4e2bb7(0x851)]['Game_Action_executeHpDamage_ComboWindow']['call'](this,_0x2b8e60,_0x1ba638);},VisuMZ[_0x44ae36(0x851)][_0x44ae36(0x90e)]=BattleManager[_0x44ae36(0x51c)],BattleManager['endAction']=function(){const _0xfecbb5=_0x44ae36;$comboWindowReset(),VisuMZ[_0xfecbb5(0x851)][_0xfecbb5(0x90e)]['call'](this);},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0x749)]=function(){const _0x4f157a=_0x44ae36;this[_0x4f157a(0x526)][_0x4f157a(0x87b)](),this[_0x4f157a(0xafe)](),this['x']=this[_0x4f157a(0x9df)],this['y']=this[_0x4f157a(0x7ba)];},Window_DamageCounter['prototype'][_0x44ae36(0x317)]=function(){const _0x1adeda=_0x44ae36,_0x589761=Window_DamageCounter[_0x1adeda(0x81b)];return _0x589761['textAlign']||'left';},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0x355)]=function(){const _0x1d8748=_0x44ae36,_0x3a2a9a=Window_DamageCounter['SETTINGS'];let _0x912f12=this[_0x1d8748(0x4a5)]>=0x0?_0x3a2a9a['hitsDmgFmt']:_0x3a2a9a[_0x1d8748(0x2ee)];return _0x912f12[_0x1d8748(0x4be)](Math['abs'](Math['ceil'](this[_0x1d8748(0x13e)])));},Window_DamageCounter[_0x44ae36(0x137)]['damageText']=function(){const _0x4a442a=_0x44ae36,_0x8f61af=Window_DamageCounter[_0x4a442a(0x81b)];let _0x241c17=this['_totalDamage']>=0x0?_0x8f61af['totalDmgFmt']:_0x8f61af[_0x4a442a(0x248)];return _0x241c17[_0x4a442a(0x4be)](Math[_0x4a442a(0x8d7)](Math[_0x4a442a(0x875)](this[_0x4a442a(0x4a5)])));},Window_DamageCounter[_0x44ae36(0x137)][_0x44ae36(0xafe)]=function(){const _0x449578=_0x44ae36;if(VisuMZ[_0x449578(0x851)][_0x449578(0xa08)][_0x449578(0x89f)][_0x449578(0x552)])return VisuMZ[_0x449578(0x851)][_0x449578(0xa08)]['ComboWindow'][_0x449578(0x552)][_0x449578(0x689)](this);let _0x5eac5a=0x0,_0xa613ac=0x0;const _0x80223e=this[_0x449578(0x355)](),_0x1d1504=this[_0x449578(0x1eb)](_0x80223e);if(this[_0x449578(0x317)]()==='right')_0x5eac5a=this['innerWidth']-this[_0x449578(0x7e0)]()-_0x1d1504['width'];else this[_0x449578(0x317)]()===_0x449578(0x4e2)?_0x5eac5a=Math[_0x449578(0xb78)]((this['innerWidth']-_0x1d1504['width'])/0x2):_0x5eac5a=this[_0x449578(0x7e0)]();this['drawTextEx'](_0x80223e,_0x5eac5a,_0xa613ac),_0xa613ac+=Math[_0x449578(0xb2f)](this[_0x449578(0xb7b)]()*0x2/0x3);const _0x5692f1=this[_0x449578(0x4f3)](),_0x265436=this[_0x449578(0x1eb)](_0x5692f1);if(this['textAlignment']()===_0x449578(0x657))_0x5eac5a=this[_0x449578(0x7d6)]-this[_0x449578(0x7e0)]()-_0x265436[_0x449578(0xa20)];else this[_0x449578(0x317)]()===_0x449578(0x4e2)?_0x5eac5a=Math['floor']((this[_0x449578(0x7d6)]-_0x265436[_0x449578(0xa20)])/0x2):_0x5eac5a=this[_0x449578(0x7e0)]();this[_0x449578(0xb3c)](_0x5692f1,_0x5eac5a,_0xa613ac);};function Window_InBattleStatus(){const _0x54d3c5=_0x44ae36;this[_0x54d3c5(0x58b)](...arguments);}Window_InBattleStatus[_0x44ae36(0x137)]=Object[_0x44ae36(0x318)](Window_StatusBase[_0x44ae36(0x137)]),Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x6ea)]=Window_InBattleStatus,Window_InBattleStatus[_0x44ae36(0x81b)]={'bgType':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x7e1)]??0x0,'statusGraphic':VisuMZ['BattleCore']['Settings'][_0x44ae36(0x4e1)][_0x44ae36(0x4fd)]??_0x44ae36(0x33c),'statusHelpDesc':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x2f2)]??_0x44ae36(0x8ac),'pageButtons':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x1ef)]??!![],'pageButtonPosition':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x16a)]??_0x44ae36(0x5fb),'pageOffsetX':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0xa51)]??0x0,'pageOffsetY':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)]['pageOffsetY']??0x0,'buffValueFmt':VisuMZ['BattleCore']['Settings']['InBattleStatus']['buffValueFmt']??_0x44ae36(0xa88),'debuffValueFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x48c)]??_0x44ae36(0x13f),'enemyStatus':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x44ae36(0x843)]??!![],'enemyShowLevel':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x24c)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)]['enemyHiddenParameter']??_0x44ae36(0x341),'enemyShowParametersAlways':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0xa9b)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x44ae36(0x851)]['Settings'][_0x44ae36(0x4e1)][_0x44ae36(0x19f)]??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x44ae36(0x851)]['Settings'][_0x44ae36(0x4e1)][_0x44ae36(0xb43)]??!![]},Window_InBattleStatus['prototype'][_0x44ae36(0x58b)]=function(_0xbb4593){const _0x356af3=_0x44ae36;Window_StatusBase['prototype'][_0x356af3(0x58b)][_0x356af3(0x689)](this,_0xbb4593),this[_0x356af3(0x517)](Window_InBattleStatus['SETTINGS'][_0x356af3(0x24f)]),this[_0x356af3(0x42e)](),this['createStatesWindow'](),this['createPageButtons']();},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x37e)]=function(_0x4d6baf){const _0x57c5c1=_0x44ae36;this['_battler']=_0x4d6baf,this[_0x57c5c1(0x749)](),this['_statesWindow']&&this[_0x57c5c1(0x2b8)][_0x57c5c1(0x37e)](_0x4d6baf);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0xa8e)]=function(){const _0x5b65de=_0x44ae36;Window_StatusBase[_0x5b65de(0x137)]['open']['call'](this);if(this['_statesWindow'])this[_0x5b65de(0x2b8)]['open']();this['updatePageButtonVisibility'](),Imported[_0x5b65de(0x31f)]&&SceneManager[_0x5b65de(0x1d7)](null);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x1aa)]=function(){const _0x3774bf=_0x44ae36;Window_StatusBase[_0x3774bf(0x137)][_0x3774bf(0x1aa)]['call'](this);if(this[_0x3774bf(0x2b8)])this[_0x3774bf(0x2b8)][_0x3774bf(0x1aa)]();},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x32e)]=function(_0x2e0a51){const _0x25e3f1=_0x44ae36;this[_0x25e3f1(0xa72)]=_0x2e0a51;},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0xd5)]=function(){const _0xce8a18=_0x44ae36;return this[_0xce8a18(0xa72)]||SceneManager['_scene'][_0xce8a18(0x2b5)];},Window_InBattleStatus[_0x44ae36(0x137)]['loadFaceImages']=function(){const _0x4d760c=_0x44ae36;Window_StatusBase[_0x4d760c(0x137)][_0x4d760c(0x79e)][_0x4d760c(0x689)](this),this[_0x4d760c(0x292)]();},Window_InBattleStatus[_0x44ae36(0x137)]['loadOtherActorImages']=function(){const _0x2f5e40=_0x44ae36;for(const _0x4b34dd of $gameParty[_0x2f5e40(0xb30)]()){if(!_0x4b34dd)continue;_0x4b34dd[_0x2f5e40(0x40b)]()&&ImageManager[_0x2f5e40(0x5c6)](_0x4b34dd['characterName']()),_0x4b34dd['battlerName']()&&ImageManager[_0x2f5e40(0xd6)](_0x4b34dd[_0x2f5e40(0x998)]()),_0x4b34dd[_0x2f5e40(0x59b)]&&ImageManager[_0x2f5e40(0x2ff)](_0x4b34dd[_0x2f5e40(0x59b)]());}},Window_InBattleStatus['prototype'][_0x44ae36(0x42e)]=function(){const _0x2cd6db=_0x44ae36;this[_0x2cd6db(0x82b)]=new Sprite(),this[_0x2cd6db(0x82b)][_0x2cd6db(0x792)]['x']=0.5,this['_enemySprite'][_0x2cd6db(0x792)]['y']=0x1,this[_0x2cd6db(0x33d)](this[_0x2cd6db(0x82b)]);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x5cc)]=function(){const _0x34bc50=_0x44ae36,_0x21b895=this[_0x34bc50(0x823)](),_0x504505=new Window_InBattleStatusStates(_0x21b895);this[_0x34bc50(0x33d)](_0x504505),_0x504505[_0x34bc50(0x521)](SceneManager[_0x34bc50(0x97d)][_0x34bc50(0xb0f)]),this[_0x34bc50(0x2b8)]=_0x504505;},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x823)]=function(){const _0x33a4b9=_0x44ae36,_0xf69ca0=Window_InBattleStatusStates[_0x33a4b9(0x81b)][_0x33a4b9(0x662)],_0x42abe7=Math[_0x33a4b9(0x920)](_0xf69ca0,Math[_0x33a4b9(0xb78)](this[_0x33a4b9(0xa20)]/0x2)),_0x460989=Graphics[_0x33a4b9(0x345)]>0x44c?this[_0x33a4b9(0x745)]:this['lineHeight']()*0x4+this[_0x33a4b9(0x337)]*0x2,_0x2bea59=this[_0x33a4b9(0xa20)]-_0x42abe7,_0x37de1f=this['height']-_0x460989;return new Rectangle(_0x2bea59,_0x37de1f,_0x42abe7,_0x460989);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x472)]=function(){const _0x3d3c42=_0x44ae36;if(!ConfigManager[_0x3d3c42(0x53e)])return;if(!Window_InBattleStatus['SETTINGS'][_0x3d3c42(0x1ef)])return;this['_pageupButton']=new Sprite_Button(_0x3d3c42(0x76f)),this[_0x3d3c42(0x87f)]['x']=this[_0x3d3c42(0x1c8)]()+Window_InBattleStatus[_0x3d3c42(0x81b)]['pageOffsetX'],this['_pageupButton']['y']=this['pageButtonY']()+Window_InBattleStatus['SETTINGS'][_0x3d3c42(0x163)];const _0x582702=this[_0x3d3c42(0x87f)]['x']+this[_0x3d3c42(0x87f)][_0x3d3c42(0xa20)];this[_0x3d3c42(0x1d8)]=new Sprite_Button(_0x3d3c42(0x983)),this[_0x3d3c42(0x1d8)]['x']=_0x582702+0x4,this[_0x3d3c42(0x1d8)]['y']=this[_0x3d3c42(0x87f)]['y'],this[_0x3d3c42(0x33d)](this['_pageupButton']),this[_0x3d3c42(0x33d)](this['_pagedownButton']),this['_pageupButton'][_0x3d3c42(0x9a2)](this[_0x3d3c42(0x679)]['bind'](this)),this[_0x3d3c42(0x1d8)][_0x3d3c42(0x9a2)](this['nextActor'][_0x3d3c42(0x7ab)](this));},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x1c8)]=function(){const _0x27a247=_0x44ae36;if(Graphics[_0x27a247(0x345)]>0x44c&&Graphics[_0x27a247(0x7a7)]>0x2bc){if(Window_InBattleStatus['SETTINGS'][_0x27a247(0x16a)]===_0x27a247(0x5fb)){let _0x1f5ea0=Math[_0x27a247(0xb2f)]((-this['x']-0x64)/0x2);if(_0x1f5ea0>=-0x64)_0x1f5ea0=this['padding'];return _0x1f5ea0;}else{const _0x3a8212=Graphics[_0x27a247(0x345)]-this['x']-this['width'];let _0x54f55c=Math['floor']((_0x3a8212-0x64)/0x2)+this['width'];return _0x54f55c;}}else return this[_0x27a247(0xa20)]-0x64-this[_0x27a247(0x337)]/0x2;},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x1e3)]=function(){const _0xe5e910=_0x44ae36;return Graphics['boxWidth']>0x44c&&Graphics[_0xe5e910(0x7a7)]>0x2bc?this[_0xe5e910(0x745)]-0x30-this[_0xe5e910(0x337)]:0x30+this[_0xe5e910(0x337)];},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x679)]=function(){const _0x412844=_0x44ae36;let _0x2b4a5c=this['getBattleMembers']();if(_0x2b4a5c['length']<=0x1&&!Window_InBattleStatus[_0x412844(0x81b)][_0x412844(0x843)])return;let _0x145a30=_0x2b4a5c[_0x412844(0x83c)](this['_battler']);_0x145a30--;_0x145a30<0x0&&(Window_InBattleStatus[_0x412844(0x81b)]['enemyStatus']&&(_0x2b4a5c=this['getBattleMembers'](!![])),_0x145a30=_0x2b4a5c[_0x412844(0x2d9)]-0x1);const _0x57264a=_0x2b4a5c[_0x145a30];this[_0x412844(0x37e)](_0x57264a),SoundManager[_0x412844(0x46a)]();},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0xa12)]=function(){const _0x5a9251=_0x44ae36;let _0x31e609=this[_0x5a9251(0x271)]();if(_0x31e609[_0x5a9251(0x2d9)]<=0x1&&!Window_InBattleStatus[_0x5a9251(0x81b)][_0x5a9251(0x843)])return;let _0x3c2398=_0x31e609[_0x5a9251(0x83c)](this[_0x5a9251(0x93d)]);_0x3c2398++;_0x3c2398>=_0x31e609['length']&&(Window_InBattleStatus[_0x5a9251(0x81b)][_0x5a9251(0x843)]&&(_0x31e609=this[_0x5a9251(0x271)](!![])),_0x3c2398=0x0);const _0x53c6f4=_0x31e609[_0x3c2398];this[_0x5a9251(0x37e)](_0x53c6f4),SoundManager[_0x5a9251(0x46a)]();},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x271)]=function(_0x5f56a0){const _0x45ed4b=_0x44ae36;let _0x3e00b6=[];const _0x4539e0=_0x5f56a0?this[_0x45ed4b(0x93d)][_0x45ed4b(0x867)]():this[_0x45ed4b(0x93d)][_0x45ed4b(0xd9)]();return _0x4539e0===$gameParty?_0x3e00b6=$gameParty[_0x45ed4b(0xb63)]():_0x3e00b6=$gameTroop['aliveMembers'](),_0x3e00b6[_0x45ed4b(0xac9)](null);},Window_InBattleStatus[_0x44ae36(0x137)]['update']=function(){const _0x1b6b16=_0x44ae36;Window_Base['prototype']['update'][_0x1b6b16(0x689)](this),this[_0x1b6b16(0x936)]();},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x936)]=function(){const _0x3c8edb=_0x44ae36;if(this[_0x3c8edb(0xad7)]()){if(this[_0x3c8edb(0x8f8)]())return this[_0x3c8edb(0x62b)]();if(Input[_0x3c8edb(0x968)](_0x3c8edb(0x657)))return this[_0x3c8edb(0xa12)]();if(Input['isRepeated']('left'))return this['previousActor']();}},SoundManager['playCursor']=function(){const _0x459531=_0x44ae36;this[_0x459531(0xb79)](0x0);},Window_InBattleStatus[_0x44ae36(0x137)]['isOpenAndActive']=function(){const _0x5cf04d=_0x44ae36;return this[_0x5cf04d(0x71a)]()&&this[_0x5cf04d(0x7bb)];},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x8f8)]=function(){const _0x138eca=_0x44ae36;if(Input['isTriggered'](_0x138eca(0xbda)))return!![];if(TouchInput['isCancelled']())return!![];return![];},Window_InBattleStatus[_0x44ae36(0x137)]['processCancel']=function(){const _0x294773=_0x44ae36;SoundManager[_0x294773(0x92d)](),this[_0x294773(0x1f2)](),this['_statesWindow']&&(this[_0x294773(0x2b8)]['deselect'](),this[_0x294773(0x2b8)][_0x294773(0x1f2)]()),SceneManager['_scene'][_0x294773(0x2fa)]();},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0xe8)]=function(){const _0x2bfd37=_0x44ae36;if(!this[_0x2bfd37(0x87f)])return;if(!this['_pagedownButton'])return;const _0x3ca1a2=$gameParty[_0x2bfd37(0xb63)]()['length']>0x0||Window_InBattleStatus[_0x2bfd37(0x81b)]['enemyStatus'];this[_0x2bfd37(0x87f)][_0x2bfd37(0x7bb)]=_0x3ca1a2,this[_0x2bfd37(0x1d8)][_0x2bfd37(0x7bb)]=_0x3ca1a2;},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x749)]=function(){const _0x459395=_0x44ae36;Window_StatusBase[_0x459395(0x137)]['refresh'][_0x459395(0x689)](this);if(this[_0x459395(0x82b)])this[_0x459395(0x82b)][_0x459395(0x5ed)]();this[_0x459395(0x526)][_0x459395(0x87b)](),this[_0x459395(0x24d)][_0x459395(0x87b)]();if(!this[_0x459395(0x93d)])return;this['drawBattlerData']();},Window_InBattleStatus['prototype'][_0x44ae36(0x66d)]=function(){const _0x25bacf=_0x44ae36;if(VisuMZ[_0x25bacf(0x851)][_0x25bacf(0xa08)][_0x25bacf(0x4e1)][_0x25bacf(0x752)])return VisuMZ[_0x25bacf(0x851)][_0x25bacf(0xa08)]['InBattleStatus'][_0x25bacf(0x752)][_0x25bacf(0x689)](this);{const _0xc55d30=this[_0x25bacf(0xbb4)]()/0x2,_0x5299da=ImageManager['faceHeight'],_0x51fd0f=_0x5299da/0x2-this[_0x25bacf(0xb7b)]()*1.5;this['drawActorGraphic'](this['_battler'],_0xc55d30+0x1,0x0,ImageManager[_0x25bacf(0x17f)],_0x5299da),this[_0x25bacf(0xb44)](this[_0x25bacf(0x93d)],_0xc55d30+0xb4,_0x51fd0f);}{let _0x29e00c=this[_0x25bacf(0xbbc)](),_0x11f6ce=0x0,_0x445533=Math[_0x25bacf(0xb2f)](this['drawingAreaWidth']()/0x2),_0x585939=0x0;const _0x440f93=this[_0x25bacf(0x287)]();let _0x16f570=_0x11f6ce;const _0x3d7367=this[_0x25bacf(0x8b8)]-ImageManager[_0x25bacf(0x84b)],_0x38f0a5=Math['ceil'](_0x440f93[_0x25bacf(0x2d9)]/0x2)*this[_0x25bacf(0xb7b)]();let _0x8109db=Math[_0x25bacf(0xb2f)]((_0x3d7367-_0x38f0a5)/0x2)+ImageManager['faceHeight'],_0x272133=Math['floor'](_0x29e00c/0x2);this[_0x25bacf(0x2b8)]['y']!==0x0&&(this['_statesWindow']['y']=_0x8109db);for(const _0x2f27bf of _0x440f93){this['drawDarkRect'](_0x16f570,_0x8109db,_0x272133,this[_0x25bacf(0xb7b)]()),this[_0x25bacf(0xb69)](_0x2f27bf,_0x16f570,_0x8109db,_0x272133),_0x585939++,_0x585939%0x2===0x0?(_0x16f570=_0x11f6ce,_0x8109db+=this[_0x25bacf(0xb7b)]()):_0x16f570=_0x445533;}}},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x683)]=function(){const _0x232886=_0x44ae36;return VisuMZ[_0x232886(0x851)][_0x232886(0xa08)][_0x232886(0x4e1)][_0x232886(0x4fd)];},Window_InBattleStatus[_0x44ae36(0x137)]['drawActorGraphic']=function(_0x37b9fb,_0x11e95f,_0x1e3343,_0xdf027f,_0x3f9505){const _0xd2d3f9=_0x44ae36;if(_0x37b9fb[_0xd2d3f9(0x30c)]())switch(this[_0xd2d3f9(0x683)]()){case _0xd2d3f9(0x8b0):break;case _0xd2d3f9(0x333):this['drawItemActorSprite'](_0x37b9fb,_0x11e95f,_0x1e3343+0x1,_0xdf027f,_0x3f9505-0x2);break;case _0xd2d3f9(0xaa2):this[_0xd2d3f9(0xafc)](_0x37b9fb,_0x11e95f,_0x1e3343+0x1,_0xdf027f,_0x3f9505-0x2);break;default:this['drawItemActorFace'](_0x37b9fb,_0x11e95f,_0x1e3343,_0xdf027f,_0x3f9505);break;}else this['drawEnemyBattler'](_0x37b9fb,_0x11e95f,_0x1e3343,_0xdf027f,_0x3f9505);},Window_InBattleStatus[_0x44ae36(0x137)]['drawItemActorFace']=function(_0x26d1ce,_0x5ee47a,_0x173fe1,_0x18c480,_0x1e8a6e){const _0xaa2e13=_0x44ae36;_0x18c480=_0x18c480||ImageManager[_0xaa2e13(0x17f)],_0x1e8a6e=_0x1e8a6e||ImageManager[_0xaa2e13(0x84b)];const _0x4d21c4=ImageManager['faceWidth'],_0x49c793=_0x1e8a6e-0x2,_0xcf61fd=_0x5ee47a+Math['floor']((_0x18c480-_0x4d21c4)/0x2);this[_0xaa2e13(0x6ea)]===Window_MenuStatus&&this['changePaintOpacity'](_0x26d1ce['isBattleMember']()),this[_0xaa2e13(0x9f3)](_0x26d1ce,_0xcf61fd,_0x173fe1,_0x4d21c4,_0x49c793),this[_0xaa2e13(0xbaa)](!![]);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x682)]=function(_0x117a2f,_0x51d64f,_0x37c5f9,_0xd9a503,_0x22220a){const _0x45d0d6=_0x44ae36;_0xd9a503=_0xd9a503||ImageManager['faceWidth'],_0x22220a=_0x22220a||ImageManager['faceHeight'];const _0x106e21=_0x117a2f[_0x45d0d6(0x40b)](),_0x57710f=_0x117a2f['characterIndex'](),_0x318aca=ImageManager['loadCharacter'](_0x106e21),_0x1a91b5=ImageManager[_0x45d0d6(0x9f8)](_0x106e21),_0x5c45d3=_0x318aca[_0x45d0d6(0xa20)]/(_0x1a91b5?0x3:0xc),_0x287fa4=_0x318aca[_0x45d0d6(0x745)]/(_0x1a91b5?0x4:0x8),_0x20f561=_0xd9a503,_0x3233b6=_0x22220a-0x2,_0x4272ff=_0x51d64f+Math[_0x45d0d6(0xb78)](_0x20f561/0x2),_0x1e6536=_0x37c5f9+Math[_0x45d0d6(0xb2f)]((_0x22220a+_0x287fa4)/0x2);this[_0x45d0d6(0x6ea)]===Window_MenuStatus&&this['changePaintOpacity'](_0x117a2f[_0x45d0d6(0x97b)]());const _0x439e79=Math[_0x45d0d6(0x920)](_0xd9a503,_0x5c45d3),_0x3d8958=Math['min'](_0x22220a,_0x287fa4),_0x25b95c=Math[_0x45d0d6(0xb78)](_0x51d64f+Math[_0x45d0d6(0x131)](_0xd9a503-_0x5c45d3,0x0)/0x2),_0x58bde4=Math[_0x45d0d6(0xb78)](_0x37c5f9+Math[_0x45d0d6(0x131)](_0x22220a-_0x287fa4,0x0)/0x2),_0x2df807=_0x1a91b5?0x0:_0x57710f,_0x3c5ca0=(_0x2df807%0x4*0x3+0x1)*_0x5c45d3,_0x5d5930=Math['floor'](_0x2df807/0x4)*0x4*_0x287fa4;this[_0x45d0d6(0x526)][_0x45d0d6(0x4cb)](_0x318aca,_0x3c5ca0,_0x5d5930,_0x439e79,_0x3d8958,_0x25b95c,_0x58bde4),this[_0x45d0d6(0xbaa)](!![]);},Window_InBattleStatus['prototype'][_0x44ae36(0xafc)]=function(_0x5aed93,_0x191085,_0xb8af5f,_0x4cf6d1,_0xea2ab6,_0x548273){const _0x49bfff=_0x44ae36;_0x4cf6d1=_0x4cf6d1||ImageManager[_0x49bfff(0x17f)],_0xea2ab6=_0xea2ab6||ImageManager[_0x49bfff(0x84b)];const _0x37b2e6=ImageManager[_0x49bfff(0xd6)](_0x548273?_0x5aed93['svBattlerName']():_0x5aed93[_0x49bfff(0x998)]()),_0x38d388=_0x37b2e6[_0x49bfff(0xa20)]/ImageManager[_0x49bfff(0x167)],_0x2d0cae=_0x37b2e6['height']/ImageManager[_0x49bfff(0xb99)],_0x5032cc=_0x4cf6d1,_0x59d500=_0xea2ab6-0x2,_0x41c162=_0x191085+Math[_0x49bfff(0xb78)](_0x5032cc/0x2),_0x34a374=_0xb8af5f+Math['ceil']((_0xea2ab6+_0x2d0cae)/0x2);this[_0x49bfff(0x6ea)]===Window_MenuStatus&&this[_0x49bfff(0xbaa)](_0x5aed93['isBattleMember']());const _0x2a62d6=_0x5aed93[_0x49bfff(0xb37)]&&_0x5aed93['hasStaticSvBattler'](),_0x3419df=0x0,_0x399257=0x0,_0x476392=_0x2a62d6?_0x37b2e6['width']:_0x38d388,_0xf8d17d=_0x2a62d6?_0x37b2e6[_0x49bfff(0x745)]:_0x2d0cae,_0x49d70f=Math[_0x49bfff(0x920)](0x1,_0x4cf6d1/_0x476392,_0xea2ab6/_0xf8d17d),_0x380315=_0x49d70f*_0x476392,_0x43fbe7=_0x49d70f*_0xf8d17d,_0x32ec17=Math[_0x49bfff(0xb78)](_0x191085+Math[_0x49bfff(0x131)](_0x4cf6d1-_0x380315,0x0)/0x2),_0x1333cf=Math[_0x49bfff(0xb78)](_0xb8af5f+Math[_0x49bfff(0x131)](_0xea2ab6-_0x43fbe7,0x0)/0x2);this[_0x49bfff(0x526)]['blt'](_0x37b2e6,_0x3419df,_0x399257,_0x476392,_0xf8d17d,_0x32ec17,_0x1333cf,_0x380315,_0x43fbe7),this[_0x49bfff(0xbaa)](!![]);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x75a)]=function(_0x18e02b,_0x24bab2,_0x49ab39,_0x2cfcb5,_0x1f1462){const _0x259c29=_0x44ae36;if(_0x18e02b['hasSvBattler']()){this[_0x259c29(0xafc)](_0x18e02b,_0x24bab2,_0x49ab39+0x1,_0x2cfcb5,_0x1f1462-0x2,!![]);return;}const _0xe062e5=_0x18e02b[_0x259c29(0x998)](),_0x201b67=$gameSystem['isSideView']()?ImageManager[_0x259c29(0x1e0)](_0xe062e5):ImageManager[_0x259c29(0x881)](_0xe062e5);_0x201b67[_0x259c29(0x729)](this[_0x259c29(0x99b)][_0x259c29(0x7ab)](this,_0x18e02b,_0x201b67,_0x24bab2,_0x49ab39,_0x2cfcb5,_0x1f1462));},Window_InBattleStatus['prototype']['processDrawEnemyBattler']=function(_0x5d411e,_0x590bca,_0xd46704,_0x3f7df5,_0x458f39,_0x2c6f1a){const _0x15d805=_0x44ae36;if(this['_battler']!==_0x5d411e)return;this['_enemySprite']['show'](),this[_0x15d805(0x82b)][_0x15d805(0x2ec)]=new Bitmap(_0x458f39,_0x2c6f1a);const _0x417c02=_0x458f39,_0xca1768=_0x2c6f1a,_0x3a5fab=Math['min'](_0x417c02,_0xca1768),_0x1b15f6=this[_0x15d805(0x82b)][_0x15d805(0x2ec)],_0x22b968=Math['min'](0x1,_0x3a5fab/_0x590bca[_0x15d805(0xa20)],_0x3a5fab/_0x590bca[_0x15d805(0x745)]),_0x1387d0=_0x590bca[_0x15d805(0xa20)]*_0x22b968,_0x3e72fb=_0x590bca[_0x15d805(0x745)]*_0x22b968,_0x162e6f=Math[_0x15d805(0x875)]((_0x417c02-_0x1387d0)/0x2),_0x2add49=Math['round']((_0xca1768-_0x3e72fb)/0x2);_0x1b15f6['blt'](_0x590bca,0x0,0x0,_0x590bca[_0x15d805(0xa20)],_0x590bca[_0x15d805(0x745)],_0x162e6f,_0x2add49,_0x1387d0,_0x3e72fb),this[_0x15d805(0x82b)][_0x15d805(0x792)]['x']=0.5,this[_0x15d805(0x82b)]['anchor']['y']=0x1,this[_0x15d805(0x82b)]['x']=_0xd46704+_0x458f39/0x2+this[_0x15d805(0x337)],this['_enemySprite']['y']=_0x3f7df5+_0x2c6f1a+this[_0x15d805(0x337)],this[_0x15d805(0x82b)]['setHue'](this[_0x15d805(0x93d)]['battlerHue']());},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x3b3)]=function(_0x5ad4f0,_0x4659c0,_0x49eeb4,_0x553280){const _0x1e6132=_0x44ae36;if(_0x5ad4f0[_0x1e6132(0x2fe)]())_0x553280=this[_0x1e6132(0x7d6)]-_0x4659c0;Window_StatusBase[_0x1e6132(0x137)]['drawActorName']['call'](this,_0x5ad4f0,_0x4659c0,_0x49eeb4,_0x553280);},Window_InBattleStatus[_0x44ae36(0x137)]['drawActorClass']=function(_0x5c1272,_0x17bd7b,_0x2879aa,_0x11273f){const _0x1ab85b=_0x44ae36;if(!_0x5c1272[_0x1ab85b(0x30c)]())return;Window_StatusBase['prototype']['drawActorClass'][_0x1ab85b(0x689)](this,_0x5c1272,_0x17bd7b,_0x2879aa,_0x11273f);},Window_InBattleStatus['prototype'][_0x44ae36(0x180)]=function(_0x2c8b68,_0x3fa5d2,_0x488fd8){const _0x19a55b=_0x44ae36;if(_0x2c8b68[_0x19a55b(0x2fe)]()&&!Window_InBattleStatus[_0x19a55b(0x81b)][_0x19a55b(0x24c)])return;Window_StatusBase[_0x19a55b(0x137)][_0x19a55b(0x180)][_0x19a55b(0x689)](this,_0x2c8b68,_0x3fa5d2,_0x488fd8);},Window_InBattleStatus[_0x44ae36(0x137)]['drawActorIcons']=function(_0x212551,_0x32230b,_0xc1e435,_0x279768){const _0x4e7a1e=_0x44ae36;_0x212551[_0x4e7a1e(0xaba)]=!![],Window_StatusBase[_0x4e7a1e(0x137)]['drawActorIcons'][_0x4e7a1e(0x689)](this,_0x212551,_0x32230b,_0xc1e435,_0x279768),_0x212551[_0x4e7a1e(0xaba)]=undefined;},VisuMZ['BattleCore']['Game_BattlerBase_allIconsIBS']=Game_BattlerBase[_0x44ae36(0x137)][_0x44ae36(0xa2a)],Game_BattlerBase[_0x44ae36(0x137)]['allIcons']=function(){const _0x578963=_0x44ae36;if(this[_0x578963(0xaba)])return[];return VisuMZ[_0x578963(0x851)][_0x578963(0x979)]['call'](this);},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0x580)]=function(_0x433e59,_0x1f4191,_0x3ae4d2,_0x1eae48){const _0x4e8dd7=_0x44ae36,_0x228495=_0x4e8dd7(0x54a)[_0x4e8dd7(0x4be)](_0x433e59['battlerKey'](),_0x1f4191);let _0x2cefdb=![];if(_0x433e59[_0x4e8dd7(0x2fe)]()){const _0x6f65b6=Window_InBattleStatus[_0x4e8dd7(0x81b)];if(_0x1f4191==='hp'&&_0x6f65b6[_0x4e8dd7(0x586)])_0x2cefdb=!![];if(_0x1f4191==='mp'&&_0x6f65b6[_0x4e8dd7(0x994)])_0x2cefdb=!![];if(_0x1f4191==='tp'&&_0x6f65b6[_0x4e8dd7(0x8cc)])_0x2cefdb=!![];}const _0x4e2b0f=this['createInnerSprite'](_0x228495,_0x2cefdb?Sprite_GaugeRate:Sprite_Gauge);_0x4e2b0f[_0x4e8dd7(0x93c)](_0x433e59,_0x1f4191),_0x4e2b0f['move'](_0x3ae4d2,_0x1eae48),_0x4e2b0f[_0x4e8dd7(0xb98)]();},Window_InBattleStatus[_0x44ae36(0x137)]['drawingAreaWidth']=function(){const _0x32d70d=_0x44ae36,_0x2dc814=this['_statesWindow']?this[_0x32d70d(0x2b8)][_0x32d70d(0xa20)]:0x0;return this[_0x32d70d(0x7d6)]-_0x2dc814+this['padding']*0x2;},Window_InBattleStatus[_0x44ae36(0x137)]['displayedParams']=function(){const _0x4382b6=_0x44ae36;return Imported[_0x4382b6(0x6c8)]?VisuMZ[_0x4382b6(0xb6b)][_0x4382b6(0xa08)][_0x4382b6(0x74f)][_0x4382b6(0x4e4)]:[_0x4382b6(0x1f1),_0x4382b6(0x3b6),_0x4382b6(0x5e6),'DEF',_0x4382b6(0x6a7),_0x4382b6(0xb7a),'AGI',_0x4382b6(0x5a1)];},Window_InBattleStatus[_0x44ae36(0x137)][_0x44ae36(0xb69)]=function(_0x6a040,_0x557935,_0x33430f,_0x1f4e9b){const _0x122436=_0x44ae36,_0x5742c0=Window_InBattleStatus[_0x122436(0x81b)],_0x33db21=Imported[_0x122436(0x6c8)];this['resetFontSettings']();let _0x114c11='',_0x9dea3d=0x0,_0x22e6f0=[_0x122436(0x262),_0x122436(0x748),_0x122436(0x5e6),_0x122436(0xfb),_0x122436(0x6a7),_0x122436(0xb7a),_0x122436(0x176),_0x122436(0x5a1)][_0x122436(0x83c)](String(_0x6a040)['toUpperCase']()[_0x122436(0x9de)]());if(_0x33db21)_0x114c11=TextManager[_0x122436(0x18e)](_0x6a040),_0x9dea3d=VisuMZ[_0x122436(0x5ba)](_0x6a040);else{if(_0x22e6f0>=0x0&&_0x22e6f0<0x8)_0x114c11=TextManager[_0x122436(0x95a)](_0x22e6f0);}if(_0x22e6f0>=0x0&&_0x22e6f0<0x8){const _0x47831c=this[_0x122436(0x93d)][_0x122436(0x857)][_0x22e6f0];this[_0x122436(0x93d)][_0x122436(0x2c4)](_0x47831c,_0x22e6f0)!==0x0&&(_0x9dea3d=this[_0x122436(0x93d)]['buffIconIndex'](_0x47831c,_0x22e6f0));}if(_0x114c11){let _0x2329fe=_0x122436(0x918)['format'](_0x114c11,_0x9dea3d);_0x1f4e9b<=0xd4&&(_0x2329fe=_0x122436(0xa38)[_0x122436(0x4be)](_0x114c11));const _0x1b5209=_0x1f4e9b<=0xd4?'\x20':'\x20\x20';this['drawTextEx'](_0x1b5209+_0x2329fe,_0x557935,_0x33430f);}this['resetTextColor']();let _0x34e86e='';_0x33db21?_0x34e86e=this[_0x122436(0x93d)][_0x122436(0xbf7)](_0x6a040,!![]):_0x34e86e=String(this[_0x122436(0x93d)]['param'](_0x22e6f0));if(this[_0x122436(0x93d)][_0x122436(0x2fe)]()){let _0x3ccf11=!![];if(_0x5742c0[_0x122436(0xa9b)])_0x3ccf11=![];if(_0x5742c0[_0x122436(0x19f)]&&BattleManager['isBattleTest']())_0x3ccf11=![];if(_0x5742c0[_0x122436(0xb43)]&&$gameSystem[_0x122436(0xae5)]()[_0x122436(0x76b)](this[_0x122436(0x93d)][_0x122436(0xa2f)]()))_0x3ccf11=![];_0x3ccf11&&(_0x34e86e=_0x5742c0[_0x122436(0x604)]);}if(_0x22e6f0>=0x0&&_0x22e6f0<0x8){if(this[_0x122436(0x93d)][_0x122436(0x9dd)](_0x22e6f0)>0x1)_0x34e86e=_0x5742c0[_0x122436(0x841)][_0x122436(0x4be)](_0x34e86e),Imported[_0x122436(0x9a3)]?this['changeTextColor'](ColorManager[_0x122436(0x1e6)]()):this[_0x122436(0xb8d)](ColorManager[_0x122436(0x632)]());else this[_0x122436(0x93d)]['getParamBuffAndStateRate'](_0x22e6f0)<0x1&&(_0x34e86e=_0x5742c0[_0x122436(0x48c)][_0x122436(0x4be)](_0x34e86e),Imported['VisuMZ_1_SkillsStatesCore']?this[_0x122436(0xb8d)](ColorManager[_0x122436(0x57b)]()):this[_0x122436(0xb8d)](ColorManager[_0x122436(0x8c8)]()));}if(String(_0x34e86e)){const _0x4e86f3=_0x1f4e9b<=0xd4?'\x20':'\x20\x20';this[_0x122436(0xf3)](_0x34e86e+_0x4e86f3,_0x557935,_0x33430f,_0x1f4e9b,_0x122436(0x657));}},Window_InBattleStatus[_0x44ae36(0x137)]['drawDarkRect']=function(_0x451641,_0x53b1bf,_0x11cb89,_0x4a4d2f){const _0x1b5624=_0x44ae36;_0x4a4d2f=_0x4a4d2f||this[_0x1b5624(0xb7b)](),this[_0x1b5624(0x24d)]['paintOpacity']=0xa0;const _0x133070=ColorManager[_0x1b5624(0x8cf)]();this[_0x1b5624(0x24d)][_0x1b5624(0x7d5)](_0x451641+0x1,_0x53b1bf+0x1,_0x11cb89-0x2,_0x4a4d2f-0x2,_0x133070),this[_0x1b5624(0x24d)]['paintOpacity']=0xff;},Game_BattlerBase[_0x44ae36(0x137)]['getParamBuffAndStateRate']=function(_0x21a6e1){const _0x4cb2f8=_0x44ae36;let _0x4d81a6=0x1;_0x4d81a6*=this[_0x4cb2f8(0xbef)](_0x21a6e1);for(const _0x1621f6 of this[_0x4cb2f8(0x8b9)]()){if(!_0x1621f6)continue;for(const _0x74da91 of _0x1621f6[_0x4cb2f8(0x9c8)]){if(!_0x74da91)continue;if(_0x74da91[_0x4cb2f8(0x741)]!==Game_BattlerBase[_0x4cb2f8(0x1b1)])continue;if(_0x74da91[_0x4cb2f8(0x7a2)]!==_0x21a6e1)continue;_0x4d81a6*=_0x74da91[_0x4cb2f8(0x92b)];}}return _0x4d81a6;};function _0x2aab(){const _0x303570=['startOpacity','abort','ShowAddedState','VisualCutinEffect','_visualHpGauge_JustDied','animation','isPlaying','testApply','Shadow2','gaugeRate','pageOffsetX','AnchorX','Game_Temp_requestAnimation','startTpbTurn','resetCounter','mpDamage','expRate','displayReflectionPlayBack','_jumpMaxHeight','processTouch','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','CriticalDmgRate','displayBattleCoreTransitionErrorMsg','isMeleeSingleTargetAction','isBusy','Game_Action_executeMpDamage','displayItemMessage','createBattleUIOffsetX','performRecovery','createHpGaugeSprite','_actions','_weaponSprite','_itemWindow','chantStyle','Window_ItemList_maxCols','needsSelectionBattleCore','ActSeq_Mechanics_EmulateSkillCost','WaitCount1','\x20to\x20%1\x20midbattle.','drawItemImageListStyle','isAnyoneSpinning','isAnyoneFloating','NOTE','_returnWindow','actionsFmt','maxCommands','_opacityDuration','createAttachedSprites','ShowRemovedState','ShowAddedDebuff','_linkedSprite','startInBattleStatus','ActionSkillMsg2','_stateTurns','resize','%1RegenerateJS','performActionEnd','alive\x20friends\x20not\x20user','NameAttachStateIcon','PostApplyAsTargetJS','Window_ActorCommand_setup','clearOnceParallelInterpreters','ActSeq_Motion_ClearFreezeFrame','States','adjustPosition_1for1','▲%1','PopupPosition','update','WaitForCamera','okTargetSelectionVisibility','startDamagePopup','open','collapseType','onMoveEnd','gainFullActionsPTB','updateBorderSprite','FocusX','animationId','clearWeaponAnimation','StatusWindowAttachmentBackOffsetX','onBattleEndBattleCore','Scene_Battle_createAllWindows','ActSeq_Zoom_Reset','_colorFilter','enemyShowParametersAlways','Game_Battler_onBattleEnd','autoMeleeSingleTargetActionSet','auto','Window_BattleLog_performActionEnd','openBattleActorWindow','scope','svbattler','displayAction','PrioritySortActive','STYPES','createWeather','playReflection','damageCounterWindowRect','addBuff','performSubstitute','jsCritRateAsUser','isAnyoneChangingOpacity','command283','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','battleFloat','FaceAway','\x5cHEXCOLOR<%1>','dimColor1','FocusY','isFastForward','reserveCommonEvent','AS\x20TARGET','isBattleFlipped','currentClass','isDrain','_hideAllIcons','Class-%1-%2','ConvertActionSequenceTarget','createAttachmentSprites','DTB','silentHomeMove','ActSeq_Set_FinishAction','addCombatLogCommand','checkTpbInputOpen','setupTextPopup','isAnimationShownOnBattlePortrait','updateWeather','Scale','active','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','remove','_action','PreApplyAsTargetJS','resetBreakShield','ActionEffect','FaceDirection','WIDTH','setupChild','Game_Battler_onTurnEnd','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','waitForFloat','ActSeq_Animation_PlayAtCoordinate','WaitForEffect','_actorWindow','isOpenAndActive','_lastEnemy','ActSeq_Mechanics_StateTurnsChangeBy','undecided','_armorPenetration','drawDebuffs','changeBattlebacks','Game_BattlerBase_refresh','rec','createLowerLayer','onHomeMoveEnd','VisuMZ_4_BreakShields','addShowHpGaugeCommand','HalfActions','getDefeatedEnemies','criticalHitFlat','popupDamage','finishActionSet','replace','setHue','changeCtbCastTime','ActionCenteredName','_stateSprite','VisuMZ_3_WeaknessDisplay','moveToStartPositionBattleCore','SvMotionIdleSolo-%1-%2','_displayBattleCoreTransitionErrorMsg','toUpperCase','_floatWholeDuration','MpGaugeOffsetY','onAllActionsEnd','setupMotion','speed','ArRedFlat','createActionSequenceProjectile','-----','BattleManager_makeActionOrders','drawItemActorSvBattler','mhp','drawComboText','ActSeq_Motion_MotionType','startPartyCommandSelection','battleCamera','ShowCounterWait','setFullActionsPTB','setupDesaturateImpactFilter','_motionCount','makeData','IconSet','apply','Reveal','Sprite_AnimationMV_updatePosition','svBattlerShadowVisible','setupBattleback','makeSpeed','displayCritical','_helpWindow','drawBackgroundRect','HelpOptions','_updateDuration','getBattlePortraitOffsetX','updateLastTarget','statusDescription','_battleBalloonSprites','base','_blendColor','makeTargetsBattleCore','invokeMagicReflection','ActSeq_Impact_ShockwaveEachTargets','invokeAction','command119','setupBattleCoreData','Sprite_Actor_moveToStartPosition','finalizeScale','COMBATLOG','ActSeqProjectiles','HpGaugeOffsetY','onJumpEnd','createUIContainer','eraseState','spell','skillItemWindowRectBorderStyle','list','ShowFacesListStyle','Game_Action_needsSelection','normal','setBattlerFacePoint','addBattleCoreAutoBattleStartupCommand','ceil','members','onRegeneratePlayStateAnimation','_updateTargetValue','startTurn','fight','setupNegativeImpactFilter','AllowCollapse','hasStaticSvBattler','MUSICNOTE','Game_Battler_onBattleStart','createInnerPortrait','CreateActionSequenceTargets','drawTextEx','setAttack','NameAlwaysVisible','statusTextAutoBattleStyle','command301','waitForNewLine','context','enemyShowParametersIfDefeated','drawActorSimpleStatus','Debuffs','slice','Sprite_Battler_setHome','initVisibility','BattleVictoryJS','sliceMax','hidden','_buttonText','isShownOnBattlePortrait','_targetHomeX','isAnyProjectilePresent','SLEEP','ActSeq_Animation_ChangeBattlePortrait','updateShadowScale','_lastActor','Text','placeTimeGauge','Game_Action_isForRandom','_tempEquipCheck','tpbCommandFight','ActSeq_BattleLog_Clear','displayMiss','_preemptive','anchorY','ActSeq_Impact_Oversaturate','105188ALndeB','alive\x20actors\x20not\x20target','stypeId','Normal','_subject','battleMembers','updateShadowBattleCore','_enemy','makeBattleCommand','fontSize','onSkewEnd','drawParamData','CheckVisibleBattleNotetags','CoreEngine','physical','isDead','Scene_Battle_itemWindowRect','ActSeq_Mechanics_ArmorPenetration','waitForJump','cancelButtonText','checkShowHideSkillNotetags','Direction','AllEnemiesText','isSceneBattle','_targetOpacity','STRUCT','floor','playSystemSound','MDF','lineHeight','Scene_Map_updateCallMenu','_commandNameWindow','BindCommonEventKeysForObj','customFontFace','alterPriority','performAttackSlot','BattleManager_updatePhase','adjustWeaponSpriteOffset','_skewEasing','initMembersBattleCore','battleInjectAni','setActiveWeaponSlot','iconHeight','StartTurnShow','applyImmortal','VisuMZ_2_HorrorEffects','ActSeq_Movement_WaitForSpin','changeTextColor','WindowWidth','iconWidth','EmergeText','OffsetY','displayChangedBuffs','_phase','Sprite_Battler_startMove','invokeCounterAttack','multiTargetWindowRect','HP_Flat','show','svActorVertCells','Game_Action_isForOne','#ffffff','clearBattleCoreData','ActSeq_Grid_AnimationTypeAtNode','portraitHue','updateAction','HelpSkillType','performWeaponAnimation','jsScaleToFit','GroupDigits','Window_BattleLog_displayCritical','PortraitScaleBorderStyle','ShowReflect','\x5cC[%1]','_tempActor','actionSplicePoint','changePaintOpacity','visibilityState','AsTarget','aliveMembers','useDigitGrouping','MotionType','WaitForEntrance','11864YLVVEL','ActSeq_Mechanics_PtbFullHalfAction','SkewX','colSpacing','resetFontSettings','Window_BattleLog_displayFailure','gainHp','usePremadeActionSequence','CommandAddStatus','_battleField','_aspectData','drawingAreaWidth','ActSeq_Mechanics_DeathBreak','_appeared','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','stateRate','itemHit','setHelpWindowItem','updatePosition','createDigits','commandFight','_actorCommandWindow','getLastPluginCommandInterpreter','requestBalloon','updateSkew','ActSeq_Movement_WaitForJump','enemy','angle','target','removeBuffsAuto','%1Event','ActSeq_Inject_WaitForInjectAni','_borderPortraitSprite','ActSeq_Element_ForceElements','_createColorFilter','setupBattleCore','isItem','findIndex','Scene_Battle_windowAreaHeight','<CENTER>%1','BindCommonEventKeysForGroup','cancel','ActorJS','WaitForSpin','_multipliers','DefaultSoftCap','setItem','BattleManager_initMembers','JS\x20%1START\x20BATTLE','createAllWindows','Window_BattleActor_processTouch','isClicked','isFloating','ActSeq_Mechanics_StateTurnsChangeTo','excludeListing','performMoveToPoint','Game_Battler_forceAction','applyBattleCoreHitRateJS','value2','meetsUsableItemConditions','ColorManager_mpColor','top','paramBuffRate','BattleSystemCTB','updateEffectsContainer','StateIconOffsetY','updateFlip','_damages','removeBuff','_wtypeIDs','paramValueByName','bottom','selectAllActors','isTpb','Game_BattlerBase_die','float','setEnemyWindowMode','repeatTargets','_frontAttachmentSprite','ActSeq_Cutin_EndVisualCutinEffectAll','PostEndActionJS','_growX','message1','iconText','retreat','updateAttachmentSprites','Scene_Map_initialize','StatusWindowAttachmentFrontOffsetY','STR','Game_BattlerBase_canGuard','getReturnWindow','loadSvActor','svBattlerAnchorX','CriticalHitRate','friendsUnit','bitmapHeight','isOpponent','createPartyCommandWindowBattleCore','isForOne','ShowSubstituteWait','Parse_Notetags_Action','isJumping','ActSeq_Impact_MotionTrailCreate','VisuMZ_3_VisualCutinEffect','requestMotionRefresh','isAnimationPlaying','autoBattleUseSkills','\x5cC[0]','_battleCoreForcedElements','updatePageButtonVisibility','animationShouldMirror','_enemies','ActSeq_Movement_WaitForSkew','resetTextColor','Window_BattleActor_hide','\x5cI[%1]%2','finishActorInput','setHome','clamp','turnOrderChangeOTB','drawText','Interrupt','StatusWindowAttachmentBackOffsetY','registerCommand','jump','clearActiveWeaponSet','changeCtbChargeTime','onSelectAction','DEF','performActionStart','Scene_Battle_logWindowRect','textAlign','Damage','dead','lastFilename','deathStateId','drawItemBackground','TextAlign','setBattleZoom','isCTB','evaded','PARTY','wtypeId','executeDamage','skill','ActSeq_Movement_FaceTarget','gaugeLineHeight','ANGLE','updateMain','getWtypeIdWithName','StateIconOffsetX','ActSeq_Animation_WaitForAnimation','_allTargets','ActSeq_Motion_WaitMotionFrame','actionEffect','cameraOffsetDuration','alive\x20enemies\x20not\x20target','redraw','setupHpGaugeSprite','BattleManager_invokeCounterAttack','emulateActionEffect','Shadow','compatibilityVisible','setBalloonPose','onEnemyOk','updateBattlebackBitmap2','battleback2Name','HelpFight','FlashColor','ActSeq_Mechanics_PtbConvert','_enemyWindowMode','toUseBoostPoints','toString','targetBattlerContainerOpacity','_activeWeaponSlot','NameAsTarget','itemEffectAddNormalState','startJump','originalName','NameFontSize','ActSeq_Projectile_Picture','ActSeq_Animation_SkillAnimation','max','battleUIOffsetX','ActSeq_Element_NullElements','Game_Action_clear','totalDmgFmt','_additionalSprites','prototype','processOk','GetActionSequenceSpecialTarget','targetObject','LifeStealRegExp','partyCommandWindowRectXPStyle','NameOffsetX','_totalHits','▼%1','requestAnimation','_damagePopupArray','WaitForAngle','Scene_Boot_onDatabaseLoaded','Parse_Notetags_HelpDescription','forceEscapeSprite','POST-','drawStates','Formula','BattleEndEvent','Buffs','updatePositionBattleCore','_shake','ActSeq_Cutin_WaitForExit','_dimmerSprite','createDistortionSprite','Game_Battler_performMiss','drawSingleSkillCost','BattleAI','Defeat','_statusWindow','customDamageFormula','clearBattleBalloons','Scene_Battle_commandEscape','Targets','isForFriendBattleCore','callUpdateHelp','createActorCommandWindowBattleCore','_currentAngle','extraPositionX','dimColor2','status','battleProjectiles','CommandVisible','BattleLog','pageOffsetY','MIN_SAFE_INTEGER','reduce','jsScaleUp','svActorHorzCells','command339','changeTurnOrderByCTB','pageButtonPosition','ActSeq_Impact_TimeScale','processVictory','Game_Interpreter_PluginCommand','lastBattleSkill','jsAccuracyAsTarget','ConvertParams','statusHelpDesc','checkBattleEnd','onDisabledPartyCommandSelection','ActSeq_Impact_Negative','_angleEasing','AGI','ActSeq_Grid_MoveTargetsInDirection','ShowMissEvasion','Window_BattleLog_performAction','setSkill','StatusWindowSkinHide','_executeHpDamage','battleCoreTpbMainPhase','Scene_Battle_stop','faceWidth','drawActorLevel','isAlwaysHidden','CriticalHitMultiplier','VisuMZ_2_PartySystem','setSubject','virtualClick','turns','setEventCallback','battleGrow','maxTp','_angleDuration','fontFace','moveBattlerDistance','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','paramName','Scene_Battle_onEnemyOk','%1EndTurnJS','ParseActorNotetags','isItemCommandEnabled','VarianceFormulaJS','makeAutoBattleActions','Game_Action_setSkill','ActSeq_Mechanics_FtbAction','AutoBattleRect','_angleRevertOnFinish','default','pause','ACTOR_OFFSET_X','autoBattleWindowRect','VisuMZ_2_DragonbonesUnion','%1Apply%2JS','enemyShowParametersIfBattleTest','obj','StateOverlayOffsetY','_enemyId','damagePopupPosition','createString','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','OverallFormulaJS','ParseEnemyNotetags','EnemyOffsetX','angleDuration','close','disarmHpLifeSteal','passive','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','getTraitSetKeys','isBorderPortraitSpriteVisible','_drawTextBody','TRAIT_PARAM','adjustPosition_ScaleToFit','Scene_Battle_update','_opacityWholeDuration','clearGlobalVariables','attackTimesAdd','_opacityEasing','ActSeq_Mechanics_EnemyEscape','stateMotionIndex','inputting','Game_Action_makeDamageValueDisperse','MultiTarget','PopupShiftX','SideviewSelect','visualCutinPortraitType','Sprite_Enemy_updateCollapse','isAlive','setupBattlebackBattleCore','AlphaFilter','MP_Flat','Game_BattlerBase_eraseState','commandSymbol','_updateClientArea','pageButtonX','BattleStartEvent','EscapeFailureJS','displayType','isQueueOptionsMenu','weaponImageId','guardSkillId','ActSeq_Mechanics_AtbGauge','ActSeq_Grid_ClearPassiveStatesFromNode','+%1\x20MP','ButtonAssist','updateWaitMode','fadeShiftX','PreEndActionJS','Window_ActorCommand_initialize','setStateTooltipBattler','_pagedownButton','TpGaugeOffsetY','criticalDmgRate','attackAnimationId2','AspectNameFmt','PerformAction','updateHelp','ActSeq_Grid_PushFromTargetNode','loadSvEnemy','ArPenRate','ARRAYSTR','pageButtonY','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','filter','buffColor','BattleManager_startAction','_flinched','createBattleFieldBattleCore','Window_BattleLog_performCounter','textSizeEx','BattlebackScale','activate','current\x20target','pageButtons','restore','MaxHP','deactivate','_colorTone','_floatDuration','performShakeFlinch','isForOpponentBattleCore','svBattlerName','attack','ReflectAnimation','parameters','clearDamagePopup','softDamageCapRate','_baseTexture','isBattlerFlipped','isAutoBattleCommandEnabled','performAttack','thrust','ActSeq_Horror_TVCreate','ActSeq_Movement_BattleStep','isMeleeMultiTargetAction','repeats','_battlePortrait','PostEndBattleJS','Radius','VariableID','ShowCosts','canBattlerMove','isBattleTest','PreStartBattleJS','startWeaponAnimation','Scene_Battle_createAllWindows_ComboWindow','drain','JS\x20BATTLE\x20DEFEAT','process_VisuMZ_BattleCore_Failsafes','AttachStateOffsetY','refreshBattlerMotions','DefaultHardCap','TargetLocation','isForDeadFriend','enabled','setBattlerBattleCore','ActSeq_Weapon_ClearActiveWeapon','AddHpGaugeOption','NameOffsetY','initBattlePortrait','showHelpWindow','VisuMZ_3_ActSeqImpact','createContents','addBattlerAspect','updateUiContainerPosition','troop','ElementStatusCore','itemRect','startActorSelection','battleSys','performCollapse','Variable','loadBitmap','makeDeepCopy','front\x20base','StepDuration','regenerateAllBattleCore','commandStyle','NewPopupBottom','needsActorInputCancel','ActSeq_Element_Clear','prepare','Actor-%1-%2','gainMp','showEnemyAttackAnimation','Filename','transform','ActSeq_BattleLog_Refresh','performAction','destroyDamageSprite','FvAniCenterAll','launchBattle','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','resetResultSwitches','setTargetBattlerKey','Height','isForFriend','shouldDisperseDamage','XPSpriteYLocation','inBattleStatusWindowRect','svAnchorX','isTpbCharged','totalHealFmt','addEscapeCommand','getEnemyIdWithName','getAttackWeaponAnimationId','enemyShowLevel','contentsBack','commandNameWindowDrawBackground','bgType','setBattlePortrait','updateActors','_windowLayer','_effectsContainer','compareBattlerSprites','_list','_regionBattleback1','performMagicEvasion','allowRandomSpeed','setBattleCameraOffset','drawIcon','processTurn','swapEnemyIDs','Game_Action_setItem','loadSystem','7641iZzHUm','SkillID','ActSeq_DB_DragonbonesMotionAni','MAXHP','_regionBattleback2','setHorrorEffectSettings','setupBattleCoreAspects','frameCount','ActSeq_Movement_HomeMoveToPoint','prev\x20target','%1▼','_flashColor','setupFont','resizeWindowBorderStyle','_targetHits','State-%1-%2','wait','ANGER','getBattleMembers','playBattleVoice','battleSkew','alphabetic','processBorderActor','meetsSelectFrontviewActorConditions','battleStatusWindowAnimationContainer','globalAlpha','9WQIzRb','isAnyoneSkewing','commandStyleCheck','battleAngle','_borderPortraitDuration','ActSeq_Weapon_NextActiveWeapon','actorId','_skillIDs','CommandAddOptions','frontviewSpriteY','isETB','LIGHTBULB','_tpbState','_makeFontNameText','displayedParams','CombatLogIcon','Scene_Map_initializeAfter','setupActionSet','updateLink','_actorSprites','Enable','Game_Map_battleback2Name','3dqyDpN','_updateFilterArea','BattleManager_setup','loadOtherActorImages','DistanceX','%1▲','isNextSceneBattleTransitionable','makeSuccess','worldTransform','battleCommandIcon','VisuMZ_3_BattleAI','ShowReflectWait','_indent','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','ActSeq_Grid_AnimationJsAtNode','minimumHits','lifeStealTrait','Window_BattleLog_displayTpDamage','isDying','process_VisuMZ_BattleCore_TraitObject_Notetags','onBattleEnd','createMultiTargetWindows','updateDuration','ActSeq_Impact_MotionBlurTarget','_commonEventIDs','JumpToLabel','needsSelection','isDebuffAffected','displayTpDamage','isPlaytest','BattleManager_onEscapeSuccess','EFFECT_COMMON_EVENT','Scene_Options','getNextDamagePopup','targetObjects','updateBitmap','_lastHpDamage','updateShadow','_partyWindow','setActiveWeaponSet','Scene_Battle_startActorSelection','_statesWindow','ActSeq_Grid_AddTriggerToNode','smoothSelect','_enemyMultiTargetWindow','addExtendedTroopMembers','join','CriticalColor','createCancelButton','updateShadowPosition','Sprite_Battler_updatePosition','HelpItem','isDuringNonLoopingMotion','buffIconIndex','isOptionsCommandAdded','ActSeq_Mechanics_StbExploit','addSingleSkillCommand','statusText','DistanceY','Sprite_Weapon_loadBitmap','battleVoices','addAutoBattleCommands','selectPreviousCommand','PostDamage%1JS','_battleLayoutStyle','updateSelectionEffect','Letter','FlinchDistanceY','isGrowing','_customDamageFormula','Window_BattleStatus_initialize','skewDuration','FRUSTRATION','smoothness','length','targetDistortionSpritePosition','\x5cI[%1]\x5cHEXCOLOR<%3>%2','isForAnyoneFocusOpponents','Sprite_Enemy_update','_growEasing','flashDuration','Enemy','BattleManager_abort','clearNameTempVisibility','FvAniEachTarget','TpbActiveChangeEnabled','drawActorBuffTurns','_targetSkewY','_lastRegenFrameCount','isCustomBattleScope','onBattleStart','svActor','damageOffsetX','bitmap','evalDamageFormula','hitsHealFmt','iterateBattler','Game_Action_isForAliveFriend','getNextSubjectFromPool','HelpStatus','onEscapeSuccess','mainFontSize','getNextSubject','VoiceLineType','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','actor','_bypassCanCounterCheck','endInBattleStatus','TpbGaugeOffsetX','AniDuration','createJS','isEnemy','loadPicture','Window_BattleLog_performActionStart','addImmortal','_animationSprites','Scene_QuickLoad','skillTypes','Game_Action_setAttack','onFloatEnd','process_VisuMZ_BattleCore_DamageStyles','updateAttachedSprites','ActSeq_Mechanics_PtbAlterCost','moveToStartPosition','onOpacityEnd','isActor','LastSelected','slices','LIGHT-BULB','lineRect','ActSeq_Cutin_WaitForEntrance','skewBattler','_stateIconSprite','ActSeq_Movement_MoveToJsPoint','bossCollapse','alive\x20actors','textAlignment','create','_escapeRatio','updateCustomActionSequence','battleAnimation','StyleOFF','HitRate','ActSeq_Mechanics_BreakShieldChange','VisuMZ_3_StateTooltips','EscapeFail','_bypass_applyBattleCoreHitRateJS','initBattleCore','_methods','AS\x20USER','ActSeq_BattleLog_UI','passiveText','partyCommandWindowRect','getInputButtonString','ComboWindow_RectJS','Sprite_Battler_initMembers','magicSkills','drawTextTopAligned','itemWindowRect','setReturnWindow','Scene_Battle_initialize','isAutoBattle','DestinationJS','addItemCommand','sprite','cancelHpLifeSteal','endBattle','isDisarmLifeSteal','padding','_index','setupShockwaveImpactFilter','hitType','DefaultSoftScaler','face','addChild','Sprite_Battleback_adjustPosition','setCursorRect','_battleCoreBattleResumeAfter','???','fnordRemovedStates','removeActor','ActSeq_Grid_RemovePassiveStatesFromNode','boxWidth','hitsDmgFmt','processEnemyModeTouchBattleCore','DisablePartyCmd','ShowPortraitsBorderStyle','createCommandVisibleJS','itemEffectAddAttackState','Game_Actor_equips','StartTurnWait','setVisibleUI','isActiveTpbReady','evalDamageFormulaBattleCore','updateStaticSvBattlerFrames','isForRandom','createSeparateDamagePopups','trueRandomTarget','hitText','getCommonEventIdWithName','clearForcedGameTroopSettingsBattleCore','_baseX','actor%1-portrait','ShowAddedBuff','Scene_Battle_partyCommandWindowRect','battleZoom','SyncBuffExpire','equips','BARE\x20HANDS','deselect','createPartyCommandWindow','_enemyID','ActSeq_Mechanics_VariablePopup','_animationContainer','performActionEndMembers','font','isForAliveFriendBattleCore','StatusWindowSelectableBackHide','_callSceneOptions','DefeatEvent','_lastAction','Scene_Battle_startActorCommandSelection','battleLayoutStyle','ActSeq_Impact_ColorBreak','isAnyoneInjectAniPrepping','temporaryVisibile','_currentActor','power','performLifeSteal','BattleManager_cancelActorInput','makeTurnsText','VisuMZ_3_ActSeqProjectiles','ShakeFlinchPower','_back2Sprite','shadow','startAction','Window_BattleLog_performRecovery','ActSeq_Animation_ItemAnimation','TpGaugeOffsetX','setBattler','StatusWindowSkinFilename','hpHealingFmt','updateBattlebackBitmap1','ActionEndUpdate','blockWidth','ActSeq_Mechanics_BreakShieldReset','ActSeq_Mechanics_EtbAction','Sprite_Animation_targetSpritePosition','growBattler','isPartyTpbInputtable','CmdIconStatus','isDisplayEmergedEnemies','startMove','maxBattleMembers','random','critical','ChantStyle','Scene_Battle_needsInputWindowChangeIBS','Game_Temp_initialize','AttachStateOffsetX','Elements','drawItemStyleIconText','BattleGridSystem','updateBossCollapse','contentsOpacity','DamageFlat','alterBreakShield','rowSpacing','PosOffsetX','some','message2','ActSeq_Mechanics_BoostPointsStoreData','lastCommandSymbol','startInjectAnimation','changeAtbCastTime','updateStyleOpacity','addSkillCommands','isAutoBattleCommandAdded','ActSeq_Mechanics_RemoveBuffDebuff','maxLines','displayChangedStates','inputtingAction','ActionItemMsg','portraitType','ActSeq_Horror_TVRemove','hpDamage','XPActorCommandLines','Mechanics','AttackAnimation','PreEndBattleJS','missile','PrioritySortActors','drawActorName','skills','SkillItemMiddleLayout','MaxMP','_shakeFlinchDuration','updateAngleCalculations','_back1Sprite','drawItemImagePortraitStyle','motionIdle','_battlerName','_targetDamage','ext','BG_TYPE','ActSeq_Mechanics_EmulateAttackEffect','BattleDefeatJS','createDamageContainer','_cursorSprite','setFrame','forceWeaponAnimation','createAnimationSprite','commandEscape','createHelpWindowBattleCore','getBattlePortraitOffsetY','displayCounter','drawLineText','actorCommandEscape','CmdTextAutoBattle','actionBattleCoreJS','shouldHideBattleEndPopups','Frame','refreshRequest','counterAttack','battleback1Name','startGrow','isAttack','mainSpriteScaleX','normalText','SHOW_BUTTON','arPenFlat','isTickBased','moveBattlerToPoint','isSpinning','MeleeDistance','removeAnimationFromContainer','emulateAction','debuffNameFmt','createAnimationContainer','applyFreezeMotionFrames','DualWield','skillWindowRect','hardDamageCap','createEnemyNames','all\x20targets','loop','JS\x20%1APPLY\x20%2','_forcedBattleLayout','move','ActSeq_Projectile_Animation','isImmortal','setBattleCameraPoint','ITEM','VisuMZ_2_BattleGridSystem','updateCollapse','battleSpin','requestRefresh','debuffAdd','isGuard','WaitForZoom','TextColor','ShowButton','_createCursorArea','Armor-%1-%2','setupRgbSplitImpactFilter','isHiddenSkill','Scene_Battle_updateStatusWindowPosition','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','comboWindowOffsetY','isEscapeCommandEnabled','SkillsStatesCore','Sprite_Battler_damageOffsetY','alive\x20friends','gainStoredBoostPoints','isForOneBattleCore','applyData','alive\x20opponents\x20not\x20target','ActSeq_Mechanics_CtbSpeed','Scene_ItemBase_applyItem','11782078EKFCjE','characterName','Game_Battler_performActionStart','BTestBypass','_dragonbonesSpriteContainer','_weather','selectAll','sortDamageSprites','SkillItemBorderCols','HITTYPE_MAGICAL','getDragonbones','onBattleStartOnceParallels','\x5cI[%1]\x5cC[%3]%2','svShadow','isAnyoneGrowing','attackStates','isCommandEnabled','uiMenuStyle','battlelog','addAttackCommand','Window_BattleEnemy_show','startFloat','SkipPartyCmd','Angle','_targetHomeY','BTB','BattleManager_checkSubstitute','Window_BattleLog_popupDamage','iconIndex','debuffHelpFmt','buffHelpFmt','VisuMZ_2_BattleSystemETB','isTpbReady','PreApply%1JS','redrawForGaugeRate','Skills','createEnemySprite','arRedFlat','addWeaponSwapCommand','atbInterrupt','Game_Battler_clearMotion','gaugeX','jsOneForOne','processAbort','ActSeq_Movement_Spin','Window_BattleLog_performEvasion','ActSeq_Animation_BalloonIconSpecific','_forcedBattlers','updateForceAction','removeImmortal','Exploited','Spriteset_Battle_updateActors','isEffecting','_enemyIDs','setupZoomBlurImpactFilter','flipVisualCutinVert','comboWindowOffsetX','initMembers','WaitForMovement','CriticalDuration','clearRect','Game_Party_addActor','movement','border','canMove','actorCommandAutoBattle','clearTargetBattlerKey','isFightCommandEnabled','prepareBorderActor','dying','isNextScene','ActSeq_Horror_GlitchCreate','fnordAddedStates','updateStateSprite','%1Damage%2JS','EnableSoftCap','_performActionEnd','USER-DEFINED\x204','refreshDimmerBitmap','ArRedRate','Linear','updateBorderStyle','buff','loadWindowskin','performMiss','battleInjectPrep','_forceAction','setupCriticalEffect','updateOpacity','VisuMZ_3_ActiveChainSkills','requestFauxAnimation','_endBattle','StatusWindowAttachmentBack','isRightInputMode','setActorHome','onEncounterBattleCore','playCursor','_autoBattleWindow','PostStartActionJS','process_VisuMZ_BattleCore_PluginParams','collapse','isDTB','ScaleX','QoL','createPageButtons','SvBattlerSolo-%1-%2','CheckVisibleSwitchNotetags','Window_BattleLog_performMagicEvasion','HEART','performDamage','Game_BattlerBase_canAttack','shift','waitForEffect','Scene_Battle_createHelpWindow','position','ActSeq_Mechanics_Immortal','negativeLifeSteal','getStateDisplay','isSTB','textColor','Scene_Battle_createEnemyWindow','Window_BattleLog_pushBaseLine','showPortraits','CmdIconAutoBattle','WaitForJump','PreApplyAsUserJS','_homeWholeDuration','updateGrow','Intensity','_cache','debuffValueFmt','BattleManager_endAction','alive\x20enemies\x20not\x20user','forceMotion','processEscape','OffsetX','destroy','#%1','battleBalloon','CopyCombatLog','_homeY','scale','VisuMZ_2_BattleSystemSTB','CriticalDmgFlat','_weaponImageId','VisuMZ_3_SideviewBattleUI','startMotion','skew','canAttackBattleCore','createCommandNameWindow','setGuard','attackAnimationIdSlot','EscapeSuccessJS','abnormal','updateEvent','_totalDamage','Sprite_Actor_updateShadow','cutinExit','ActSeq_Mechanics_HpMpTp','JS\x20%1END\x20ACTION','createMultiTargetWindow','_jumpHeight','updateShadowVisibility','VisuMZ_4_CombatLog','GetActionSequenceSpecialTargetWithFlags','weapons','checkAutoCustomActionSequenceNotetagEffect','findSymbolExt','updateVisibility','MaxLines','_spriteset','Window_BattleLog_displayActionResults','updateScale','skillId','Pre','ActSeq_Movement_Opacity','setupOversaturateImpactFilter','selectAllEnemies','putActiveBattlerOnTop','DamageDisplay','format','processRandomizedData','applyGlobal','setStateTurns','checkSceneBattleTransitionable','basicGaugesY','duration','removeCurrentAction','showNormalAnimation','popBaseLine','CmdIconFight','_battlerHue','battleCameraData','blt','StatusWindowAttachmentFrontOffsetX','stop','isAppeared','ActSeq_BattleLog_WaitForBattleLog','removeOnceParallelInterpreter','svBattlerAnchorY','_injectAnimationSprite','isVisualHpGaugeDisplayed','damageContainer','type','updateStatusWindowPosition','FrontViewSelect','updateHpGaugePosition','turn','applyVariance','options','Amp','autoSelectLastSelected','getItemDamageAmountTextBattleCore','updateInterpreter','ActiveTpbOptionsMessage','InBattleStatus','center','startHomeMove','ExtDisplayedParams','expTotal','Game_Enemy_transform','isStateResist','ActSeq_Mechanics_EmulateSkillEffect','loadBattleback2','ShowHpDmg','WaitForScale','item','okButtonText','refreshCursor','_interpreter','AspectColor','_targetSkewX','ActSeq_Grid_PullToTargetNode','damageText','regenerateAll','ActionEnd','autoBattleStyle','unchanged','CmdIconOptions','isActiveTpb','ACTOR_OFFSET_Y','BaseTroopIDs','JS\x20%1START\x20TURN','StatusGraphic','isSelected','ScaleUp','getChildIndex','ActSeq_Skew_WaitForSkew','processBattleBalloonRequests','makeActionListAutoAttack','All\x20Enemies','attachSpritesToDistortionSprite','DigitGroupingDamageSprites','Scene_Map_launchBattle','createEnemies','centerFrontViewSprite','StepDistanceY','emerge','itemCri','_homeX','ScaleY','clearActiveWeaponSlot','ShowActorGauge','VisuMZ_2_BattleSystemPTB','ActionSequence','_immortal','Window_BattleLog_refresh','performMoveToTargets','Game_BattlerBase_initMembers','setBackgroundType','updateCallMenu','ActSeq_ChangeSkew','Game_Map_encounterList','isFriendly','endAction','createBorderStylePortraitSprite','addDamageSprite','ForceExploited','battleStatusSprite','setHelpWindow','drawItemStatusListStyle','_homeDuration','targetSpritePosition','SmoothImage','contents','updateFloat','cancelLifeSteal','makeDamageValue','makeHpDamageText','isAffectedByBreakShield','addOnceParallelInterpreter','textWidth','becomeSTBExploited','ActSeq_Mechanics_StbExtraAction','performCounter','_lines','addCustomCommands','occasion','applyEasing','time','PreDamageAsUserJS','removeState','processBattleCoreJS','MUSIC\x20NOTE','missed','encounterList','Game_Action_apply','process_VisuMZ_BattleCore_Action_Notetags','touchUI','moveBattlerHomeToPoint','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','Game_Interpreter_terminate','_damageContainer','refreshMotion','getBattlePortraitFilename','targetActionSet','currentDisplayedValue','Window_BattleLog_displayMpDamage','logActionList','AutoMeleeSolo','actor%1-gauge-%2','makeBuffName','Scene_Battle_onActorCancel','createHelpWindow','optDisplayTp','match','addChildToBack','_logWindow','ComboWindow_DrawJS','ActSeq_Grid_AnimationIDAtNode','createKeyJS','string','windowAreaHeight','Game_BattlerBase_isStateResist','BattleManager_checkBattleEnd','Skill-%1-%2','createStateIconSprite','callNextMethod','ActSeq_Movement_FacePoint','setupWeaponAnimation','setupBlueRedInvertImpactFilter','Window_BattleLog_update','playOkSound','ConfigManager_applyData','USER-DEFINED\x201','_executedValue','windowPadding','battleUIOffsetY','Scene_Battle_updateCancelButton','adjustPosition_ScaleDown','smooth','tpbActorSwitchConditionsMet','BattleManager_selectNextCommand','All\x20Allies','addWindow','ActSeq_Impact_TimeStop','drawItemImageXPStyle','HpGauge','setImmortal','TurnsFmt','statusWindowRect','commandOptions','_forActor','isSkewing','applyResultSwitches','clone','isSpriteVisible','placeStateIcon','Point','debuffColor','autoSelectPriority','Game_Action_isForDeadFriend','Sprite_Enemy_initVisibility','Game_Action_itemEffectAddAttackState','placeGauge','ALL_ENEMIES','notFocusValid','ActSeq_Impact_BlueRedInvert','PreDamageAsTargetJS','StartName','enemyHpGaugeRate','backColor','wholeActionSet','Override','ActSeq_Mechanics_DamagePopup','initialize','isTeamBased','isNegativeLifeSteal','start','DigitGrouping','guardLifeSteal','ConvertCount','addFightCommand','gainHalfActionsPTB','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','missle','displayAddedStates','Strength','Game_Action_testApply','onAngleEnd','autoBattleAtStart','getMenuImage','getBattlePortrait','ENEMY_OFFSET_X','VariableDmg','_targetFloatHeight','currentSymbol','LUK','onEncounter','PopupDuration','ForceRandom','Scene_Battle_selectPreviousCommand','BattleManager_onEncounter','updateRefresh','minimumStayDuration','Window_BattleLog_displayCurrentState','createEnemyWindow','_nameTempVisibleDuration','requestBattleBalloon','makeActionList','Exploiter','pauseInjectAnimation','setCustomDamageFormula','_skewY','canUse','Game_Interpreter_command301','removeHorrorEffect','_baseY','_deathStateApplied','floatBattler','setBattlerFlip','_reflectionTarget','GetParamIcon','drawActorBuffRates','NameAlwaysSelectOnly','nameColor','bitmapWidth','process_VisuMZ_BattleCore_Notetags','statusWindowRectXPStyle','ActSeq_Mechanics_TextPopup','criticalHitRate','setBattleSkew','surprise','helpWindowRect','loadCharacter','AutoAddState','StateID','rate','addBattleCoreAutoBattleStyleCommand','AddOption','createStatesWindow','362184tzxUtk','jsAccuracy','allowCollapse','parent','setTroopPage','isSkill','%1EndActionJS','ActSeq_Mechanics_AnalyzeWeakness','statusWindowRectBorderStyle','alive\x20battlers\x20not\x20user','attackSkillId','getLastHpDamage','currentValue','addNormalStatus','Game_Action_itemHit','offsetX','Game_Battler_clearDamagePopup','normalColor','_performDamageMotion','_surprise','updateTargetValue','clearBattleRefreshRequest','displayCurrentState','isAnyBattleBalloonPlaying','hpDamageFmt','ATK','updatePadding','positionOffsetX','registerDefeatedEnemy','PosOffsetY','_angleWholeDuration','_target','hide','pop','createTargetsJS','_tempBattler','ShakeFlinch','turnCount','_actor','_totalValue','portraitFlipHorz','clearHorrorEffects','itemEffectRecoverHp','makeBuffHelpText','doesPageHaveOnceParallelStart','%1StartBattleJS','left','WaitForFloat','forceSelect','_isBattlerFlipped','scrollTo','canUseItemCommand','updateStateSpriteBattleCore','ActSeq_Projectile_Icon','ActSeq_Horror_GlitchRemove','enemyHiddenParameter','parallaxScrollY','battleEffect','drawItem','endAnimation','Scene_Battle_createActorCommandWindowIBS','frameDelay','gradientFillRect','isMagical','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','gainTp','FlinchDistanceX','setLastPluginCommandInterpreter','process_VisuMZ_BattleCore_PreBattleCommonEvent','_preBattleCommonEvent','enemyNames','CastPhysical','Window_BattleStatus_drawItemImage','getStypeIdWithName','isAlwaysVisible','mainSpriteScaleY','Window_BattleLog_popBaseLine','MANUAL','Game_Action_applyGlobal','VisuMZ_3_BoostAction','command236','_motion','StatusWindowAttachmentFront','fittingHeight','custom','portraitFlipVert','alive\x20battlers','Game_Actor_setup','VisuMZ_2_BattleSystemBTB','createInBattleStatusWindow','onBattleStartBattleCore','isSideView','NUM','MOTIONS','processCancel','isGuardWaiting','Window_BattleLog_performDamage','_eventId','gainCurrentActionsETB','filters','isSubjectValidForAnyoneSelect','powerUpColor','_tpbSceneChangeCacheActor','zoomDuration','CTB','increaseHits','valueColor','isForNotUser','DamageStyles','ShowWeapon','PopupShiftY','_lastPluginCommandInterpreter','_branch','changeBattlerOpacity','makeStateName','WaitForProjectile','isHidden','addedStateObjects','faceRect','weaponTypes','battleCorePreBattleCommonEvent','isPartyCommandWindowDisabled','VisuMZ_3_FrontviewBattleUI','Scene_Battle_isTimeActiveIBS','validTargets','autoBattleStart','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','portraitIndex','targetsForOpponents','isActing','refreshActorPortrait','drawItemImage','isDamagePopupRequested','updateEffectContainers','_item','itemTextAlign','_tpbNeedsPartyCommand','createBattleBalloon','right','getItemDamageAmountLabelBattleCore','StyleON','ActSeq_Set_SetupAction','battleJump','sleep','_offsetX','ChargeRate','performCastAnimation','battleCommandName','_battlerKeyCache','maxWidth','jsScaleDown','createChildSprite','processRefresh','applyDamageCaps','applyBattleCoreCriticalHitRateJS','Scene_Battle_createPartyCommandWindowIBS','ActSeq_Camera_WaitForCamera','_animation','addState','isUndecided','drawBattlerData','pattern','ShowRemovedBuff','ConfigManager_makeData','addActor','toLowerCase','BattleSystemBTB','name','ReflectPlayback','DamageRate','CheckActSeqProjectileVersion','setMoveEasingType','previousActor','_updateColorFilter','currentAction','createBattleUIOffsetY','EasingType','_forcing','numTargets','makeTargetsBattleCoreJS','_jumpDuration','drawItemActorSprite','graphicType','isFrameVisible','terminate','DefaultDamageStyle','_cancelButton','_visibleDuration','call','_effectDuration','updateBattlerContainer','addTextToCombatLog','text\x20target','updateBattleBalloons','isMoving','isCharging','DistanceAdjust','sliceMin','Window_BattleLog_clear','isOptionsCommandEnabled','isForAll','parallaxScrollYinvertEnemy','_emptyBitmap','targetsForFriends','SvMotionIdleMass-%1-%2','_forcedHomeX','createBattleFieldContainer','addMeleeReturnActionSet','ForceDeath','_hpGaugeSprite','_requestRefresh','ParseStateNotetags','_hue','initElementStatusCore','walk','process_VisuMZ_BattleCore_jsFunctions','WaitComplete','addPartyCommand','MAT','isBattlerGrounded','OffsetAdjust','USER-DEFINED\x205','setText','CreateCutinSettings','pushBaseLine','Window_Options_statusText','ActSeq_Mechanics_CustomDmgFormula','VisuMZ_2_BattleSystemFTB','fadeShiftY','parallaxScrollXinvertEnemy','AnimationID','JSON','getAttackMotion','ChangeOrderBy','singleSkill','checkExtendTroopCompatibility','maxItems','damagePopupOffsetY','glitch','Game_Temp_requestBalloon','WaitForNewLine','Spriteset_Battle_createBattleField','action','VisuMZ_2_BattleSystemCTB','calcWindowHeight','ParseItemNotetags','createShadowSprite','criticalDmgFlat','CalcEscapeRaiseJS','ActSeq_Animation_ActionAnimation','_enemyNameContainer','VisuMZ_0_CoreEngine','MotionAni','applyAngleChange','Targets2','createMiss','makeStateHelpText','mainSpriteWidth','_shadowSprite','Immortal','performJump','MUSIC-NOTE','casting','Sprite_Battler_isMoving','ShowFailure','VisuMZ_4_IconBalloons','setWaitMode','Game_BattlerBase_meetsUsableItemConditions','VisuMZ_1_ElementStatusCore','applyGuard','getSkillIdWithName','makeUniqueNames','command357','portraitFilename','Game_Action_setSubject','createBattleField','Window_BattleLog_performCollapse','executeHpDamage','isInputting','canSingleOrMultipleSelect','map','Game_Battler_makeSpeed','isCustomActionSequence','onEscapeFailure','actorCommandCancelTPB','constructor','playOnceParallelTroopPage','getColor','Scene_Battle_terminate','itemTargetCandidates','BattleManager_processDefeat','BattleLogRectJS','DefaultStyle','alterChange','Scene_Battle_commandFight','HelpAutoBattle','recoverAll','removeStatesAuto','VisuMZ_2_WeaponSwapSystem','isPreviousSceneBattleTransitionable','Game_Action_itemTargetCandidates','Scene_Battle_createActorCommandWindow','alterCost','canGuard','ActSeq_BattleLog_PushBaseLine','moveBattlerHomeDistance','addOptionsCommand','ALL_ACTORS','ActSeq_Camera_Reset','selectNextCommandTpb','stepFlinch','anchorX','setHandler','dead\x20enemies','waitCount','Parse_Notetags_Targets','description','isSkipPartyCommandWindow','Sprite_Enemy_setBattler','Wave','select','adjustFlippedBattlefield','result','ActSeq_Zoom_WaitForZoom','ResetFocus','displayFailure','partyCommandWindowRectBorderStyle','itemLifeStealRate','numRepeats','Targets1','_createEffectsContainer','\x5cC[4](Passive)','Game_Interpreter_command283','isOpen','CmdStyle','BULB','_defeatedEnemies','startBattle','origin','inBattle','ResetOffset','version','adjustPosition','getDualWieldTimes','addGuardCommand','executeMpDamage','Window_BattleLog_displayMiss','addBattleGridMoveCommand','addLoadListener','onDatabaseLoaded','ActSeqImpact','VariableHeal','isPhysical','ActSeq_Movement_MoveToTarget','isForAliveFriend','%1EndBattleJS','RequiresDefeat','ActSeq_Impact_Desaturate','hpAffected','svAnchorY','setBattleAngle','updateShakeFlinch','ShowCurrentState','concat','Game_Action_setGuard','battlerSprites','_backAttachmentSprite','ItemID','SKILLS','getBattlerKeyTargets','addChildToUiContainer','parse','code','isBattleCoreTargetScope','canAddSkillCommand','Game_Interpreter_updateWaitMode','height','<CUSTOM\x20ACTION\x20SEQUENCE>','HITTYPE_PHYSICAL','MAXMP','refresh','visualCutinPortraitHue','Game_Action_evalDamageFormula','Window_BattleLog_displayEvasion','ActSeq_Animation_BalloonIcon','isForOpponent','Param','checkCacheKey','setBattleCameraTargets','StatusWindow_DrawJS','autoMeleeMultiTargetActionSet','stopInjectAnimation','Game_Action_updateLastTarget','buffRemove','CommandAddAutoBattle','_growY','CheckMapBattleEventValid','drawEnemyBattler','StatusWindow_RectJS','getBattlerKeyTargetReplacement','CommandWidth','closeBattleActorWindow','BattleManager_startBattle','updateBattlebackBitmap','STB','_freezeMotionData','processActorCommandCancelTPB','CmdIconEscape','allBattleMembers','_homeEasing','updateCounter','parseLocalizedText','HomePosJS','startActorCommandSelection','includes','Duration','_motionType','measureTextWidth','pageup','battlerKey','isBorderStylePortraitShown','_inputting','startIcon','jsAccuracyAsUser','cancelActorInput','filterArea','PostApplyAsUserJS','Window_BattleLog_performSubstitute','includeState','BattleManager_endBattle','drawEnemyName','CommonEventID','_speed','createAutoBattleWindow','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','Sprite_SvEnemy','changeInputWindow','DamageType%1','performFlinch','opacityStart','StartTurnMsg','user','100%','10HMdHPB','_autoBattle','performReflection','uiInputPosition','Window_BattleLog_performMiss','isChanting','canEscape','isForRandomBattleCore','commandRemember','VisuMZ_1_MainMenuCore','anchor','commandName','getAspectData','ActSeq_Grid_AddPassiveStatesToNode','PortraitScale','isArray','ActSeq_Movement_HomeMoveBy','+%1','playEnemyDamage','attackAnimationId1','stepForward','_damageCounterWindow','loadFaceImages','extraPositionY','drawGauge','isCurrentItemEnabled','dataId','value1','SILENCE','subject','CalcActionSpeedJS','boxHeight','ScaleToFit','canGuardBattleCore','_cursorArea','bind','ActSeq_Camera_FocusPoint','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','actorCommandSingleSkill','updateCancelButton','ActSeq_Motion_FreezeMotionFrame','_floatHeight','arRedRate','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','_partyCommandWindow','opacity','_inBattleStatusMode','createRateJS','AnchorY','ShowEnemyGauge','_targetY','visible','MpGaugeOffsetX','ZZZ','sort','aspect','PopupOffsetX','jumpBattler','WEAPON\x20SWAP','_commonEventKey','addGeneralOptions','linkSprite','Mirror','hpRate','Width','ActSeq_Movement_Skew','updateFrame','effects','randomTargets','onTurnEnd','_flashDuration','Window_PartyCommand_initialize','ActorOffsetX','isSceneChanging','repositionCancelButtonBorderStyle','actorCommandWindowRect','equipSlots','fillRect','innerWidth','Scene_Battle_start','isBypassDamageCap','onActorOk','noise','selectNextActor','cancelMpLifeSteal','JS\x20%1DAMAGE\x20%2','save','Game_Action_makeTargets','itemPadding','StatusWindow_BgType','LIGHT\x20BULB','setupMotionBlurImpactFilter','updateKeyboardKeys','flashColor','shouldPopupDamage','checkSubstitute','_showWeapon','setupDamagePopup','_battleBalloonQueue','TP_Rate','Scene_Battle_onEnemyCancel','8190630BqdFqQ','freezeFrame','battler','makeActionOrders','_offsetY','Sprite_Battler_update','commandAutoBattle','requestMotion','GuardFormulaJS','isMVAnimation','_distortionSprite','_inBattleStatusWindow','mpColor','stepBack','cancelTargetSelectionVisibility','getAttackMotionSlot','LIGHT','clearMotion','Game_Party_removeActor','NO\x20ACTOR\x20FOUND!','_handlers','clearFreezeMotionForWeapons','Game_Enemy_setup','exit','updateOnceParallelInterpreters','ActSeq_Mechanics_OtbOrder','delay','RegExp','ActSeq_Animation_ShowAnimation','_ptbActionCost','performActionMotions','Game_Action_executeDamage','hasAspectData','ActSeq_Mechanics_EmulateGuardEffect','Spriteset_Battle_createLowerLayer','battlerShadowScaleY','Sprite_Enemy_createStateIconSprite','randomInt','ActSeq_Horror_Clear','_jumpWholeDuration','clearFreezeMotion','damageRate','skillItemWindowRectMiddle','createDamageCounterWindow','Window_SkillList_maxCols','changeWeather','SETTINGS','_battleCoreBattleStartEvent','negativeMpLifeSteal','spriteId','battlerShadowScaleX','addChildAt','pha','Game_Battler_performEvasion','statesWindowRect','PostRegenerateJS','Post','isTurnBased','%1\x20Aspect','turnsFmt','coreEngineRepositionEnemies','makeCommandList','_enemySprite','log','all\x20enemies','ParseClassNotetags','freezeMotion','_stypeIDs','ParseArmorNotetags','Scene_Options_maxCommands','ESCAPE','BattleManager_processVictory','checkTpbInputClose','addSingleSkillCommands','offsetY','removeChild','alive\x20friends\x20not\x20target','PreApplyJS','_svBattlerData','indexOf','maxCols','svBattlerData','checkShowHideSwitchNotetags','Game_Battler_startTpbTurn','buffValueFmt','_cacheTextWidth','enemyStatus','BattleLayout','buffNameFmt','%1\x20%2','ActSeq_BattleLog_DisplayAction','timeScale','pages','removeAnimation','faceHeight','normalIcon','formula','refreshStatusWindow','_targetGrowY','addBattlerBuffsDebuffs','BattleCore','setHalfActionsPTB','_targetGrowX','BattleManager_startTurn','isATB','useItem','_buffs','dead\x20battlers','%1-%2','VisuMZ_3_ActSeqCamera','FlinchDuration','paySkillCost','horzCells','_animationCount','CalcEscapeRatioJS','sideview_ui','SWEAT','evade','ApplyImmortal','cameraDuration','Window_BattleLog_performReflection','Scene_Battle_selectNextCommand','opponentsUnit','gainCurrentActionsFTB','Sprite_Enemy_updateBossCollapse','isDeathStateAffected','setLetter','visualCutinPortraitIndex','playEnemyAttack','_updateCursorFilterArea','ShuffleArray','makeTargets','pow','_fauxAnimationSprites','loadBattleback1','escape','round','getDamageStyle','isTriggered','processExtendTroopMembers','waitForAnimation','Scene_Battle_onActorOk','clear','spinBattler','isBattleSys','hasSvBattler','_pageupButton','hitIndex','loadEnemy','_statusType','Sprite_Actor_setBattler','_skillWindow','isAnyoneJumping','ActorCmd','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','motionSpeed','Scene_Party','AggroControlSystem','displayBuffs','ActSeq_Movement_MoveToPoint','lukEffectRate','drawSkillCost','message4','PreStartActionJS','ActSeq_Mechanics_CtbOrder','ActionStart','Item-%1-%2','_attackAnimationId','increaseTotal','messageSpeed','canInput','canAttack','_createClientArea','WaitCount2','onEnemyCancel','Users','head','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','ComboWindow','applyGlobalCommonEventNotetags','ActSeq_DB_DragonbonesTimeScale','waitForMovement','SvWeaponMass-%1-%2','endIcon','softDamageCap','ActSeq_Animation_GuardAnimation','_colorType','waitForOpacity','_lineHeight','createActorCommandWindow','Scene_Battle_startPartyCommandSelection','View\x20battle\x20member\x20status.','children','_borderPortraitTargetX','_growWholeDuration','none','Game_Map_battleback1Name','disperseDamage','isChangingOpacity','index','_selectionEffectCount','_effectType','drawItemStyleIcon','innerHeight','states','statusWindowRectDefaultStyle','balloonId','FlashDuration','stateHelpFmt','WaitForAnimation','prepareCustomActionSequence','isMagicSkill','PostStartBattleJS','ActSeq_Impact_ShockwavePoint','isBattlerTargeted','split','_forcedHomeY','Index','PostEndTurnJS','powerDownColor','Style','_padding','extendTroopMembers','enemyTpGaugeRate','PartyCmd','Scene_Battle_skillWindowRect','gaugeBackColor','startSkew','stateColor','isLearnedSkill','applyBattleCoreJS','_targetBattlerKey','XPActorDefaultHeight','_pattern','abs','nextActiveWeaponSlot','guard','applyArmorModifiers','itemLineRect','Weapon-%1-%2','updateCancel','isPTB','SceneManager_isSceneChanging','actions','icon','currentMaxValue','showAnimation','updateSpin','needsInputWindowChange','ParseSkillNotetags','performSTBExploiter','icons','getFullActionsPTB','CriticalHitFlat','ShowSubstitute','ActSeq_Target_RandTarget','requestDragonbonesAnimation','%1StartActionJS','_onceParallelInterpreters','Game_Map_setupBattleback','isCertainHit','setBattlerMotionTrailData','ActSeq_Cutin_EndVisualCutinEffectType','weatherPower','visualHpGauge','autoSelect','applyHardDamageCap','isCancelTriggered','-%1','Window_BattleEnemy_hide','CounterPlayback','ActSeq_Skew_Reset','_enemySprites','displayRemovedStates','_uiContainer','WaitForSkew','EnemyOffsetY','clearBattleCoreAspects','note','parseForcedGameTroopSettingsBattleCore','_endingBattle','_motionSpeed','makeTargetSprites','Actor','all\x20actors','commandNameWindowCenter','autoBattle','special','isBreakStunned','BattleManager_endAction_ComboWindow','Sprite_Damage_createChildSprite','autoRemovalTiming','HP_Rate','CastMagical','PreEndTurnJS','findTargetSprite','removeChildFromUiContainer','ActSeq_Movement_Float','alive\x20opponents','\x5cI[%2]\x5cC[16]%1\x5cC[0]','addDebuff','_actionBattlers','_waitMode','_targetOffsetX','addText','Game_Actor_makeActionList','_makeCursorAlpha','min','isNonSubmenuCancel','cutinEnter','hasSkill','setLastBattleSkill','9528030quYzIP','_text','Parse_Notetags_TraitObjects','Name','ActSeq_Mechanics_EmulateItemEffect','PostStartTurnJS','value','Game_Battler_performDamage','playCancel','onActorCancel','Game_Action_isForFriend','CmdIconItem','stbGainInstant','_growDuration','battlerSmoothImage','currentExt','ActSeq_Target_PrevTarget','processHandling','resetNameTempVisibility','_shakeFlinchPower','motionType','buffAdd','VisuMZ_1_MessageCore','setup','_battler','COBWEB','StepDistanceX','_shadowScaleX','attackMotions','_svBattlerSprite','AdjustRect','removeBattleBalloon','damagePopupOffsetX','BattleManager_startInput','createStateSprite','AllActorsText','Window_BattleEnemy_initialize','AutoMeleeAoE','setSvBattlerSprite','EscapeSuccess','switchToWeaponType','ForceExploiter','updateNameTempVisibility','AutoBattleCancel','createMainSprite','isBuffAffected','updateStateIconSprite','declareGlobalVariables','_targets','drawTurnsRemaining','frontview_ui','addAnimationSpriteToContainer','ActSeq_Cutin_AddVisualCutinEffect','param','processDefeat','startInput','setupIconTextPopup','Enemy-%1-%2','VisuMZ_2_AggroControlSystem','isSkillItemWindowsMiddle','VisuMZ_3_BattleVoices','ActSeq_Mechanics_BtbGain','attackStatesRate','ActSeq_Set_WholeActionSet','vertCells','MP_Rate','addCommand','isRepeated','setColorTone','ActSeq_Grid_RemoveTriggerFromNode','process_VisuMZ_BattleCore_CommonEventKeys','SwitchCritical','ParseWeaponNotetags','traitObjects','Sprite_StateIcon_updateFrame','_createCursorSprite','damage','updateEventMain','processPostBattleCommonEvents','updateCommandNameWindow','checkShowHideBattleNotetags','TpbGaugeOffsetY','mainSpriteHeight','setActionState','Game_BattlerBase_allIconsIBS','displayReflection','isBattleMember','forActor','_scene','AutoBattleMsg','Game_System_initialize','AutoBattleBgType','SkewY','FvAniCenterScreen','pagedown','portrait','createDamageSprite','onStaticEnemyBitmapLoad','hue','COMBAT\x20LOG','JS\x20%1START\x20ACTION','HelpEscape','ActSeq_Horror_NoiseCreate','_targetIndex','ActionCount','setBattleImpactTimeScale','AsUser','Sprite_Battler_damageOffsetX','opacitySpeed','Sprite_Actor_updateBitmap','ActSeq_Horror_NoiseRemove','enemyMpGaugeRate','Slot','ActSeq_ChangeAngle','addStateTurns','battlerName','applyItem','_createDamageContainer','processDrawEnemyBattler','drawBuffs','VoiceLine','ATTACK','ActSeq_BattleLog_PopBaseLine','_mainSprite','extraPositionScaledY','setClickHandler','VisuMZ_1_SkillsStatesCore','itemHeight','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','FilenameJS','startSpin','updateBattleProcess','SwitchMissEvade','WeaponTypeID','battleOpacity','addSkillTypeCommand','disarmMpLifeSteal','Sprite_Actor_updateFrame','_skewWholeDuration','ActSeq_Movement_HomeMoveToTarget','ActSeq_Animation_AttackAnimation2','_commonEventQueue','SceneManager_push','_battlerContainer','AllowRandomSpeed','ExtraSettings','_skewDuration','CheckVisibleSkillNotetags','state','Turns','hasBeenDefeatedBefore','_enemyWindow','performEvasion','_flipScaleX','displayStartMessages','SkillItemStandardCols','deadMembers','Window_Options_addGeneralOptions','battleDisplayText','helpWindowRectBorderStyle','ScaleDown','ActSeq_Impact_MotionTrailRemove','GUARD','traits','ActSeq_Mechanics_AddBuffDebuff','addStatusCommand','updateHomeMove','commandNameWindowDrawText','ActionAnimation','makeTargetSelectionMoreVisible','endVisualCutin','extraHeight','createEnemyNameContainer','BattleManager_processAbort','Game_BattlerBase_addNewState','resizeWindowXPStyle','isFlipped','processAnimationRequests','adjustPosition_ScaleUp','ActSeq_Mechanics_ActionEffect','_targetAngle','ActSeq_Impact_ZoomBlurTargetCenter','CreateCommonEventKeys','mpDamageFmt','getParamBuffAndStateRate','trim','_targetX','updatePhase','Game_Action_isForAll','nameY','setBlendColor','getItemDamageAmountTextOriginal','damageOffsetY','mmp','UNTITLED','RevertAngle','addAutoBattleCommand','ActSeq_Grid_ActionAnimationAtNode','selectLast','_tpbChargeTime','ANTI_TINT_UI','ActSeq_BattleVoice_PlayCommonLine','AUTO\x20BATTLE','CheckSkillCommandShowSwitches','sortEnemies','isActionSelectionValid','drawActorFace','playOnceParallelInterpreter','itemEffectGainTp','guardMpLifeSteal','ActSeq_Target_CurrentIndex','isBigCharacter','pointX','_shadowScaleY','text','revertTpbCachedActor','partyCommandWindowRectDefaultStyle','displayActionResults','PopupOffsetY','forceAction','createEffectActionSet','Victory','ActSeq_Animation_AttackAnimation','push','callOkHandler','mainSprite','PreDamage%1JS','Settings','ActSeq_Camera_Clamp','isForAnyone','isBTB','setValue','6903347IFgTZA','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','arPenRate','ArPenFlat','chant','nextActor','dead\x20opponents','updateTargetPosition','_frame','battleMove','isNameTemporarilyVisible','selectNextCommand','normalHelp','AutoBattleOK','VisuMZ_2_BattleSystemATB','isSideButtonLayout','front\x20center','onGrowEnd','_duration','width','unshift','ActSeq_Mechanics_Collapse','_buttonKey','isAtbChargingState','_character','isStatusAffected','isBattleRefreshRequested','FullActions','removedStateObjects','allIcons','effect','ShowMpDmg','Actions','drawActorStateData','enemyId','AutoBattle','WaitForOpacity','displayMpDamage','getHardDamageCap','Game_Troop_expTotal','lifeStealRate','magicReflection','startShakeFlinch','\x5cC[16]%1\x5cC[0]','_floatEasing','swing','AntiTintUiElements','isStateAffected','die','addBattlerStates','isGuardLifeSteal','Sprite_Actor_update','PreRegenerateJS','isIncludedInEnemyWindow','isForAnyoneFocusFriends','AutoNotetag','Scene_Battle_createPartyCommandWindow','Game_Troop_setup'];_0x2aab=function(){return _0x303570;};return _0x2aab();}function Window_InBattleStatusStates(){const _0x49df77=_0x44ae36;this[_0x49df77(0x58b)](...arguments);}Window_InBattleStatusStates[_0x44ae36(0x137)]=Object['create'](Window_Command[_0x44ae36(0x137)]),Window_InBattleStatusStates['prototype'][_0x44ae36(0x6ea)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x44ae36(0x81b)]={'maxWidth':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x4e1)]['statesMaxWidth']??0x180,'drawStates':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)]['drawStates']??!![],'drawBuffs':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x99c)]??!![],'drawDebuffs':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0xadc)]??!![],'normalIcon':VisuMZ['BattleCore'][_0x44ae36(0xa08)][_0x44ae36(0x4e1)]['normalIcon']??0x54,'normalText':VisuMZ[_0x44ae36(0x851)]['Settings'][_0x44ae36(0x4e1)]['normalText']??_0x44ae36(0xb61),'normalHelp':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0xa19)]??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x8bd)]??_0x44ae36(0x846),'buffNameFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x845)]??_0x44ae36(0x294),'buffHelpFmt':VisuMZ['BattleCore']['Settings'][_0x44ae36(0x4e1)]['buffHelpFmt']??_0x44ae36(0x60d),'debuffNameFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x3e0)]??_0x44ae36(0x269),'debuffHelpFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x427)]??_0x44ae36(0x89e),'actionsFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)]['InBattleStatus'][_0x44ae36(0xa73)]??'\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','turnsFmt':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x571)]??_0x44ae36(0x7b3),'passiveText':VisuMZ[_0x44ae36(0x851)][_0x44ae36(0xa08)][_0x44ae36(0x4e1)][_0x44ae36(0x326)]??_0x44ae36(0x718)},Window_InBattleStatusStates['prototype'][_0x44ae36(0x58b)]=function(_0x517ba1){const _0x4c03ba=_0x44ae36;this[_0x4c03ba(0x93d)]=null,Window_Command[_0x4c03ba(0x137)]['initialize'][_0x4c03ba(0x689)](this,_0x517ba1),this[_0x4c03ba(0x1f2)](),this[_0x4c03ba(0x360)](),this[_0x4c03ba(0x517)](0x2);},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x37e)]=function(_0x10ca8d){const _0x59550f=_0x44ae36;this[_0x59550f(0x93d)]=_0x10ca8d||null,this['refresh'](),this[_0x59550f(0x2ba)](0x0),this[_0x59550f(0x5ff)](0x0,0x0),this[_0x59550f(0x1ed)]();},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x560)]=function(){},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x82a)]=function(){const _0x20f49e=_0x44ae36;if(!this[_0x20f49e(0x93d)])return;this[_0x20f49e(0x221)](),this['addBattlerStates'](),this[_0x20f49e(0x850)](),this['addNormalStatus']();},Window_InBattleStatusStates[_0x44ae36(0x137)]['addBattlerAspect']=function(){const _0x5dda46=_0x44ae36;if(!this['_battler'][_0x5dda46(0x2fe)]())return;if(!this[_0x5dda46(0x93d)][_0x5dda46(0x80d)]())return;const _0x3e9ba0=this[_0x5dda46(0x93d)][_0x5dda46(0x794)]()['name'],_0x347876=this[_0x5dda46(0x93d)][_0x5dda46(0x794)]()[_0x5dda46(0x426)],_0x2079f0=this['_battler'][_0x5dda46(0x794)]()[_0x5dda46(0x5bd)];let _0x3b20cc='';_0x2079f0['match'](/#(.*?)/gi)&&Imported[_0x5dda46(0x93b)]?_0x3b20cc='\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x5dda46(0x4be)](_0x347876,_0x3e9ba0,_0x2079f0):_0x3b20cc='\x5cI[%1]\x5cC[%3]%2'[_0x5dda46(0x4be)](_0x347876,_0x3e9ba0,_0x2079f0),this['addCommand'](_0x3b20cc,_0x5dda46(0x7bf),!![]);},Window_InBattleStatusStates['prototype'][_0x44ae36(0xa3e)]=function(){const _0x2a8fcd=_0x44ae36;if(!Window_InBattleStatusStates[_0x2a8fcd(0x81b)][_0x2a8fcd(0x147)])return;for(const _0xd61565 of this[_0x2a8fcd(0x93d)][_0x2a8fcd(0x8b9)]()){if(!this[_0x2a8fcd(0x779)](_0xd61565))continue;const _0x41749d=this[_0x2a8fcd(0x63f)](_0xd61565);this[_0x2a8fcd(0x967)](_0x41749d,_0x2a8fcd(0x9b9),!![],_0xd61565['id']);}},Window_InBattleStatusStates['prototype'][_0x44ae36(0x779)]=function(_0x433cb9){const _0x34ddd9=_0x44ae36;if(!_0x433cb9)return![];if(_0x433cb9[_0x34ddd9(0x674)][_0x34ddd9(0x9de)]()==='')return![];if(_0x433cb9[_0x34ddd9(0x674)][_0x34ddd9(0x76b)](_0x34ddd9(0xafa)))return![];if(_0x433cb9[_0x34ddd9(0x426)]<=0x0)return![];if(_0x433cb9[_0x34ddd9(0xbe7)])return![];return!![];},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x63f)]=function(_0x2de341){const _0x4691db=_0x44ae36;let _0x549e3b=_0x2de341[_0x4691db(0x426)],_0x21bbbb=_0x2de341[_0x4691db(0x674)],_0x5aaf92='0';return Imported[_0x4691db(0x9a3)]&&Imported[_0x4691db(0x93b)]&&(_0x5aaf92=String(ColorManager[_0x4691db(0x8d1)](_0x2de341))),_0x5aaf92[_0x4691db(0x54f)](/#(.*?)/gi)?_0x4691db(0x2db)['format'](_0x549e3b,_0x21bbbb,_0x5aaf92):'\x5cI[%1]\x5cC[%3]%2'[_0x4691db(0x4be)](_0x549e3b,_0x21bbbb,_0x5aaf92);},Window_InBattleStatusStates['prototype']['addBattlerBuffsDebuffs']=function(){const _0x1467e8=_0x44ae36;for(let _0x1fc365=0x0;_0x1fc365<0x8;_0x1fc365++){const _0x255134=this[_0x1467e8(0x54b)](_0x1fc365);if(!_0x255134)continue;this[_0x1467e8(0x967)](_0x255134,_0x1467e8(0x45c),!![],_0x1fc365);}},Window_InBattleStatusStates[_0x44ae36(0x137)]['makeBuffName']=function(_0x354f2e){const _0x151cc5=_0x44ae36;if(!this[_0x151cc5(0x93d)][_0x151cc5(0x952)](_0x354f2e)&&!this[_0x151cc5(0x93d)][_0x151cc5(0x2aa)](_0x354f2e))return'';const _0x294c1d=Window_InBattleStatusStates['SETTINGS'];if(this[_0x151cc5(0x93d)][_0x151cc5(0x952)](_0x354f2e)&&!_0x294c1d[_0x151cc5(0x99c)])return'';if(this[_0x151cc5(0x93d)][_0x151cc5(0x2aa)](_0x354f2e)&&!_0x294c1d[_0x151cc5(0xadc)])return'';const _0x176b96=this['_battler'][_0x151cc5(0x857)][_0x354f2e];let _0x3d7a16=this[_0x151cc5(0x93d)][_0x151cc5(0x2c4)](_0x176b96,_0x354f2e),_0x431b15=TextManager[_0x151cc5(0x95a)](_0x354f2e);_0x176b96>0x0?_0x431b15=_0x294c1d[_0x151cc5(0x845)][_0x151cc5(0x4be)](_0x431b15):_0x431b15=_0x294c1d[_0x151cc5(0x3e0)][_0x151cc5(0x4be)](_0x431b15);let _0x484dd8=0x0;return Imported['VisuMZ_1_SkillsStatesCore']&&(_0x484dd8=_0x176b96>0x0?ColorManager['buffColor']():ColorManager[_0x151cc5(0x57b)]()),String(_0x484dd8)['match'](/#(.*?)/gi)?_0x151cc5(0x2db)[_0x151cc5(0x4be)](_0x3d7a16,_0x431b15,_0x484dd8):_0x151cc5(0x416)[_0x151cc5(0x4be)](_0x3d7a16,_0x431b15,_0x484dd8);},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x5da)]=function(){const _0x40e944=_0x44ae36;if(this[_0x40e944(0x255)][_0x40e944(0x2d9)]>0x0)return;const _0x1d6631=Window_InBattleStatusStates['SETTINGS'],_0x528600=_0x1d6631[_0x40e944(0x84c)],_0x25a1ed=_0x1d6631[_0x40e944(0x3d7)],_0x1b5bfb=_0x40e944(0xee)[_0x40e944(0x4be)](_0x528600,_0x25a1ed);this[_0x40e944(0x967)](_0x1b5bfb,'normal');},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x607)]=function(_0x2aa8a5){const _0x2406fa=_0x44ae36,_0x3d5b44=this['itemLineRect'](_0x2aa8a5);this[_0x2406fa(0xbaa)](0xff),this[_0x2406fa(0xb3c)](this['commandName'](_0x2aa8a5),_0x3d5b44['x'],_0x3d5b44['y']),this[_0x2406fa(0x956)](_0x2aa8a5,_0x3d5b44);},Window_InBattleStatusStates[_0x44ae36(0x137)]['drawTurnsRemaining']=function(_0x469917,_0x3f6e4b){const _0x10a9ab=_0x44ae36;if(!Imported[_0x10a9ab(0x9a3)])return;const _0x2787f1=this[_0x10a9ab(0x1c6)](_0x469917),_0x2127b7=_0x3f6e4b['x']+0x2;if(_0x2787f1===_0x10a9ab(0x9b9)){const _0x4da590=$dataStates[this[_0x10a9ab(0x255)][_0x469917][_0x10a9ab(0x3be)]||0x0];this['drawActorStateTurns'](this[_0x10a9ab(0x93d)],_0x4da590,_0x2127b7,_0x3f6e4b['y']),this[_0x10a9ab(0xa2e)](this[_0x10a9ab(0x93d)],_0x4da590,_0x2127b7,_0x3f6e4b['y']);}else{if(_0x2787f1==='buff'){const _0xd769ad=this['_list'][_0x469917][_0x10a9ab(0x3be)];this[_0x10a9ab(0x2e5)](this[_0x10a9ab(0x93d)],_0xd769ad,_0x2127b7,_0x3f6e4b['y']),this[_0x10a9ab(0x5bb)](this[_0x10a9ab(0x93d)],_0xd769ad,_0x2127b7,_0x3f6e4b['y']);}}},Window_InBattleStatusStates['prototype'][_0x44ae36(0x1de)]=function(){const _0x2abcbf=_0x44ae36,_0x91ee54=this[_0x2abcbf(0x5a0)]();let _0x3389b0='';if(_0x91ee54===_0x2abcbf(0x7bf))_0x3389b0=this[_0x2abcbf(0x93d)][_0x2abcbf(0x794)]()[_0x2abcbf(0x709)];else{if(_0x91ee54===_0x2abcbf(0x9b9))_0x3389b0=this[_0x2abcbf(0x6cd)]();else{if(_0x91ee54==='buff')_0x3389b0=this[_0x2abcbf(0x5f8)]();else _0x91ee54===_0x2abcbf(0xb2c)&&(_0x3389b0=Window_InBattleStatusStates[_0x2abcbf(0x81b)][_0x2abcbf(0xa19)]);}}_0x3389b0?this[_0x2abcbf(0xb0f)][_0x2abcbf(0x6ab)](_0x3389b0):this[_0x2abcbf(0xb0f)]['clear']();},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x6cd)]=function(){const _0x3754a8=_0x44ae36,_0x3b5854=Window_InBattleStatusStates['SETTINGS'],_0x2bfdf3=this[_0x3754a8(0x934)]();let _0x242f94='';const _0x24ef48=$dataStates[_0x2bfdf3]||null;if(_0x24ef48){const _0xf30bf1=_0x3b5854[_0x3754a8(0x8bd)];let _0x3f1ef6=_0x24ef48[_0x3754a8(0xb15)]||_0x24ef48[_0x3754a8(0x709)]||'';Imported[_0x3754a8(0x9a3)]&&(_0x3f1ef6=_0x3f1ef6['format'](this['_battler'][_0x3754a8(0x47f)](_0x2bfdf3)));let _0x5463a7=_0x3754a8(0x1ac);if(this[_0x3754a8(0x93d)][_0x3754a8(0xa3c)](_0x2bfdf3)){if(_0x24ef48[_0x3754a8(0x910)]===0x0)_0x5463a7='none';if(_0x24ef48[_0x3754a8(0x910)]===0x1)_0x5463a7=_0x3754a8(0x8e0);if(_0x24ef48[_0x3754a8(0x910)]===0x2)_0x5463a7=_0x3754a8(0x186);}const _0x4875b4=this['_battler'][_0x3754a8(0xa7c)][_0x2bfdf3]||0x0;let _0x38d5d1=_0x3754a8(0xe6);Imported[_0x3754a8(0x9a3)]&&Imported['VisuMZ_1_MessageCore']&&(_0x38d5d1=ColorManager[_0x3754a8(0x8d1)](_0x24ef48),_0x38d5d1[_0x3754a8(0x54f)](/#(.*?)/gi)?_0x38d5d1=_0x3754a8(0xab1)[_0x3754a8(0x4be)](_0x38d5d1):_0x38d5d1=_0x3754a8(0xba7)[_0x3754a8(0x4be)](_0x38d5d1)),_0x242f94=_0xf30bf1[_0x3754a8(0x4be)](_0x3f1ef6,this[_0x3754a8(0x375)](_0x5463a7,_0x4875b4,_0x38d5d1));}return _0x242f94;},Window_InBattleStatusStates['prototype'][_0x44ae36(0x5f8)]=function(){const _0x218164=_0x44ae36,_0x58f707=Window_InBattleStatusStates['SETTINGS'],_0x37923a=this[_0x218164(0x934)]();let _0x18ce1f='';const _0x2ae9ea=this[_0x218164(0x93d)]['isBuffAffected'](_0x37923a),_0x113a26=_0x2ae9ea?_0x218164(0x428):_0x218164(0x427),_0x55c8a9=_0x58f707[_0x113a26];let _0x2757f1=_0x218164(0xe6);Imported[_0x218164(0x9a3)]&&Imported[_0x218164(0x93b)]&&(_0x2757f1=_0x2ae9ea?ColorManager['buffColor']():ColorManager['debuffColor'](),_0x2757f1[_0x218164(0x54f)](/#(.*?)/gi)?_0x2757f1=_0x218164(0xab1)[_0x218164(0x4be)](_0x2757f1):_0x2757f1=_0x218164(0xba7)[_0x218164(0x4be)](_0x2757f1));const _0x1633e9=this[_0x218164(0x93d)]['_buffTurns'][_0x37923a]||0x0;return _0x18ce1f=_0x55c8a9[_0x218164(0x4be)](TextManager[_0x218164(0x95a)](_0x37923a),Math['floor'](this['_battler'][_0x218164(0xbef)](_0x37923a)*0x64)+'%',_0x2757f1,this['makeTurnsText'](_0x218164(0x186),_0x1633e9,_0x2757f1)),_0x18ce1f;},Window_InBattleStatusStates[_0x44ae36(0x137)][_0x44ae36(0x375)]=function(_0x253b80,_0x328b62,_0x4d93a8){const _0x33119f=_0x44ae36,_0x3fe098=Window_InBattleStatusStates[_0x33119f(0x81b)];let _0x5989c2=_0x3fe098['passiveText'];if(_0x253b80===_0x33119f(0x8e0))_0x5989c2=_0x3fe098['actionsFmt'];if(_0x253b80===_0x33119f(0x186))_0x5989c2=_0x3fe098[_0x33119f(0x828)];if(_0x253b80===_0x33119f(0x8b0))return'';return _0x5989c2[_0x33119f(0x4be)](_0x328b62,_0x4d93a8);};